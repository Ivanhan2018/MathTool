#define R16_I1I2
#include"quotientRing.h"
#include <ctime>
#include <fstream>
#include <set>

// 有限循环环mZ/nZ，这里限制m|n
struct ZmodnZ:public IRing
{
public:
	// 静态函数
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	ZmodnZ(int m,int n);
	// 析构函数
	~ZmodnZ(){};	
	// 成员函数	
	// 成员变量
	int m_m;
	int m_n;// 运算为模n加法和模n乘法	
};

void ZmodnZ::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",size(),ID,str.c_str());	
	//string S1=calS1(this,true);
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	//printRing(this);	
}

int ZmodnZ::add(int a,int b)
{
	return ((m_m*a+m_m*b)%m_n)/m_m;
}

int ZmodnZ::mul(int a,int b)
{
	return ((m_m*a*m_m*b)%m_n)/m_m;	
}

int ZmodnZ::size()
{
	return m_n/m_m;
}

ZmodnZ::ZmodnZ(int m,int n)
{
	m_m=m;
	m_n=n;
}

// 有限可分解环
struct DecompositionRing:public IRing
{
public:
	//  静态函数  
	static vector<vector<int> > DirectProduct(const vector<vector<int>> &A,const vector<vector<int>> &B);   
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	DecompositionRing();
	DecompositionRing(IRing *r1,IRing *r2);
	// 析构函数
	~DecompositionRing();
	// 成员函数 
	template<class T> vector<vector<int> > getTable(T *obp,int n,int(T::*p)(int,int));
	void initF(int n);// R4_6、R9_6所在的有限环序列,
	// 成员变量  
	IRing *m_r1;
	IRing *m_r2;
	vector<vector<int> > m_Add;
	vector<vector<int> > m_Mul;
	int m_flag;// DecompositionRing对象析构时是否释放m_r1、m_r2指向的内存
};

DecompositionRing::DecompositionRing(){
	m_r1=NULL;
	m_r2=NULL;
	m_flag=0;	
}

DecompositionRing::~DecompositionRing(){
	if(m_flag==1 && m_r1!=NULL){
		delete m_r1;
		m_r1=NULL;
	}	
	if(m_flag==1 && m_r2!=NULL){
		delete m_r2;
		m_r2=NULL;
	}
}

void DecompositionRing::initF(int n){
	m_r1=new ZmodnZ(n,n*n);
	m_r2=new ZmodnZ(1,n); 
	vector<vector<int> > Add1=getTable(m_r1,m_r1->size(),&IRing::add);
	vector<vector<int> > Add2=getTable(m_r2,m_r2->size(),&IRing::add);
	m_Add=DirectProduct(Add1,Add2);
	vector<vector<int> > Mul1=getTable(m_r1,m_r1->size(),&IRing::mul);
	vector<vector<int> > Mul2=getTable(m_r2,m_r2->size(),&IRing::mul);
	m_Mul=DirectProduct(Mul1,Mul2);
}

template<class T>
vector<vector<int> > DecompositionRing::getTable(T *obp,int n,int(T::*p)(int,int))
{
	vector<vector<int> > vv(n,vector<int>(n));
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
		{
			vv[i][j]=(obp->*p)(i,j);	
		}
	return vv;
}

vector<vector<int> > DecompositionRing::DirectProduct(const vector<vector<int>> &A,const vector<vector<int>> &B)
{
	vector<vector<int> > C;
	int nA=A.size();
	int nB=B.size();
	int n=nA*nB;

	for(int a=0;a<n;a++)
	{
		vector<int> iRow;
		for(int b=0;b<n;b++)
		{
			int aj=a%nB;
			int ai=a/nB;
			int bj=b%nB;
			int bi=b/nB;
			int i=A[ai][bi];
			int j=B[aj][bj];
			int c=nB*i+j;
			iRow.push_back(c);
		}
		C.push_back(iRow);
	}
	return C;
}

DecompositionRing::DecompositionRing(IRing *r1,IRing *r2)
{
    m_r1=r1;
	m_r2=r2;
	vector<vector<int> > Add1=getTable(r1,r1->size(),&IRing::add);
	vector<vector<int> > Add2=getTable(r2,r2->size(),&IRing::add);
	m_Add=DirectProduct(Add1,Add2);
	vector<vector<int> > Mul1=getTable(r1,r1->size(),&IRing::mul);
	vector<vector<int> > Mul2=getTable(r2,r2->size(),&IRing::mul);
	m_Mul=DirectProduct(Mul1,Mul2);
}

void DecompositionRing::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",size(),ID,str.c_str());
	//printRing(this);	
}

int DecompositionRing::add(int a,int b)
{
	return m_Add[a][b];
}

int DecompositionRing::mul(int a,int b)
{
	return m_Mul[a][b];	
}

int DecompositionRing::size()
{
	return m_Add.size();
}

// 直接从凯莱表构造一个有限环
struct FiniteRing:public IRing
{
public:
	//  静态函数  
	static IRing* newR8(int i);
	static IRing* newR16(int i);	
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	FiniteRing(int n,int* a,int* m,int delt);
	// 析构函数
	~FiniteRing();	
	// 成员变量  
	int m_n; 
	int* m_Add;
	int* m_Mul; 
	int m_delt; 
	int m_flag;// FiniteRing对象析构时是否释放m_Add、m_Mul指向的内存	
};

void FiniteRing::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",size(),ID,str.c_str());
	//printRing(this);	
}

int FiniteRing::add(int a,int b)
{
	int c=*(m_Add+a*m_n+b);
	return c-m_delt;
}

int FiniteRing::mul(int a,int b)
{
	int c=*(m_Mul+a*m_n+b);
	return c-m_delt;
}

int FiniteRing::size()
{
	return m_n;
}

FiniteRing::FiniteRing(int n,int* a,int* m,int delt)
{
	m_n=n;
	m_Add=a;
    m_Mul=m;
    m_delt=delt;	
}

FiniteRing::~FiniteRing(){
	if(m_flag==1 && m_Add!=NULL){
		delete m_Add;
		m_Add=NULL;
	}	
	if(m_flag==1 && m_Mul!=NULL){
		delete m_Mul;
		m_Mul=NULL;
	}		
}

IRing* FiniteRing::newR8(int i){
/* 	static int g_C2C4Mul_2[8][8]={
		{0,1,2,3,4,5,6,7},
		{1,4,7,2,5,0,3,6},
		{2,7,4,1,6,3,0,5},
		{3,2,1,0,7,6,5,4},
		{4,5,6,7,0,1,2,3},
		{5,0,3,6,1,4,7,2},
		{6,3,0,5,2,7,4,1},
		{7,6,5,4,3,2,1,0}
	};	
	static int g_Z4F2Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1},
		{0,0,2,2,4,4,6,6},
		{0,1,2,3,4,5,6,7},
		{0,0,4,4,0,0,4,4},
		{0,1,4,5,0,1,4,5},
		{0,0,6,6,4,4,2,2},
		{0,1,6,7,4,5,2,3},
	}; */
	static int g_R8_24Add[8][8]={
		{0,1,2,3,4,5,6,7},
		{1,0,3,2,5,4,7,6},
		{2,3,4,5,6,7,0,1},
		{3,2,5,4,7,6,1,0},
		{4,5,6,7,0,1,2,3},
		{5,4,7,6,1,0,3,2},
		{6,7,0,1,2,3,4,5},
		{7,6,1,0,3,2,5,4}
	};	
	static int g_R8_6Mul[8][8]={
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}
	};	
	static int g_R8_8Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4}
	};	
	static int g_R8_9Mul[8][8]={
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0}
	};	
	static int g_R8_12Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4},
		{0,0,4,4,0,0,4,4}
	};	
	static int g_R8_18Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,0,4,4,0,0,4,4},
		{0,4,0,4,0,4,0,4},
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,0,4,4,0,0,4,4},
		{0,4,0,4,0,4,0,4}
	};	
	static int g_R8_22Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,1,5,0,4,1,5},
		{0,1,2,3,4,5,6,7},
		{0,5,3,6,4,1,7,2},
		{0,0,4,4,0,0,4,4},
		{0,4,5,1,0,4,5,1},
		{0,1,6,7,4,5,2,3},
		{0,5,7,2,4,1,3,6}
	};
	static int g_F8Add[8][8]={
	  {0, 1, 2, 3, 4, 5, 6, 7},
	  {1, 0, 3, 2, 5, 4, 7, 6},
	  {2, 3, 0, 1, 6, 7, 4, 5},
	  {3, 2, 1, 0, 7, 6, 5, 4},
	  {4, 5, 6, 7, 0, 1, 2, 3},
	  {5, 4, 7, 6, 1, 0, 3, 2},
	  {6, 7, 4, 5, 2, 3, 0, 1},
	  {7, 6, 5, 4, 3, 2, 1, 0}
	};	
	static int g_R8_39Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,0,0,1,1},
		{0,0,1,1,0,0,1,1},
		{0,0,1,1,1,1,0,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,1,1,1,1},
		{0,0,0,0,1,1,1,1},
	};	
	if(i==6)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_6Mul[0][0],0);
		return r;
	}	
	if(i==7)//R8_7:=DirectSum(SmallRing(4,1),SmallRing(2,2));;
	{
		ZmodnZ* r4=new ZmodnZ(4,16);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r4,r2);
		r->m_flag=1;
		return r;
	}	
	if(i==8)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_8Mul[0][0],0);
		return r;
	}	
	if(i==9)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_9Mul[0][0],0);
		return r;
	}	
	if(i==12)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_12Mul[0][0],0);
		return r;
	}	
	if(i==14)//R8_14:=DirectSum(SmallRing(4,3),SmallRing(2,2));;R8_14:=DirectSum(ZmodnZ(2),ZmodnZ(4));;
	{
		//不是环FiniteRing* r=new FiniteRing(8,g_C2C4Add,&g_Z4F2Mul[0][0],0);
		ZmodnZ* r4=new ZmodnZ(1,4);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r4,r2);
		r->m_flag=1;		
		return r;
	}
	if(i==18)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_18Mul[0][0],0);
		return r;
	}	
	if(i==22)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_22Mul[0][0],0);
		return r;
	}	
	if(i==39)
	{
		FiniteRing* r=new FiniteRing(8,&g_F8Add[0][0],&g_R8_39Mul[0][0],0);
		return r;
	}		
	return NULL;
}

IRing* FiniteRing::newR16(int i){
	static int g_R16_228Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,3,2,14,6,5,0,15,10,9,1,13,12,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,6,5,15,10,9,1,7,13,12,4,3,2,8,0},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,10,9,7,13,12,4,11,3,2,8,6,5,0,1},
		{15,7,13,12,11,3,2,8,14,6,5,0,10,9,1,4},
	};
	static int g_R16_228Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
	};
	static int g_R16_229Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,5,6,8,7,0,10,11,12,2,13,14,4,15,9},
		{2,5,0,7,9,1,10,3,12,4,6,14,8,15,11,13},
		{3,6,7,0,11,10,1,2,13,14,5,4,15,8,9,12},
		{4,8,9,11,0,12,13,14,1,2,15,3,5,6,7,10},
		{5,7,1,10,12,3,2,6,14,8,0,15,11,9,13,4},
		{6,0,10,1,13,2,3,5,4,15,7,8,9,11,12,14},
		{7,10,3,2,14,6,5,0,15,11,1,9,13,12,4,8},
		{8,11,12,13,1,14,4,15,3,5,9,6,7,0,10,2},
		{9,12,4,14,2,8,15,11,5,0,13,7,1,10,3,6},
		{10,2,6,5,15,0,7,1,9,13,3,12,4,14,8,11},
		{11,13,14,4,3,15,8,9,6,7,12,0,10,1,2,5},
		{12,14,8,15,5,11,9,13,7,1,4,10,3,2,6,0},
		{13,4,15,8,6,9,11,12,0,10,14,1,2,3,5,7},
		{14,15,11,9,7,13,12,4,10,3,8,2,6,5,0,1},
		{15,9,13,12,10,4,14,8,2,6,11,5,0,7,1,3},
	};
	static int g_R16_229Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,3,9,2,4,7,11,9,3,14,7,11,14},
		{0,4,3,0,0,11,4,3,4,3,11,0,11,4,3,11},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,0,3,3,0,3,0,3,0,3,3,0,3},
		{0,9,11,0,3,7,9,11,14,4,7,3,2,14,4,2},
		{0,2,4,0,3,9,2,4,7,11,9,3,14,7,11,14},
		{0,4,3,0,0,11,4,3,4,3,11,0,11,4,3,11},
		{0,7,4,0,3,14,7,4,2,11,14,3,9,2,11,9},
		{0,11,3,0,0,4,11,3,11,3,4,0,4,11,3,4},
		{0,9,11,0,3,7,9,11,14,4,7,3,2,14,4,2},
		{0,3,0,0,0,3,3,0,3,0,3,0,3,3,0,3},
		{0,14,11,0,3,2,14,11,9,4,2,3,7,9,4,7},
		{0,7,4,0,3,14,7,4,2,11,14,3,9,2,11,9},
		{0,11,3,0,0,4,11,3,11,3,4,0,4,11,3,4},
		{0,14,11,0,3,2,14,11,9,4,2,3,7,9,4,7},
	};
	static int g_R16_249Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,5,6,8,7,0,10,11,12,2,13,14,4,15,9},
		{2,5,0,7,9,1,10,3,12,4,6,14,8,15,11,13},
		{3,6,7,0,11,10,1,2,13,14,5,4,15,8,9,12},
		{4,8,9,11,0,12,13,14,1,2,15,3,5,6,7,10},
		{5,7,1,10,12,3,2,6,14,8,0,15,11,9,13,4},
		{6,0,10,1,13,2,3,5,4,15,7,8,9,11,12,14},
		{7,10,3,2,14,6,5,0,15,11,1,9,13,12,4,8},
		{8,11,12,13,1,14,4,15,3,5,9,6,7,0,10,2},
		{9,12,4,14,2,8,15,11,5,0,13,7,1,10,3,6},
		{10,2,6,5,15,0,7,1,9,13,3,12,4,14,8,11},
		{11,13,14,4,3,15,8,9,6,7,12,0,10,1,2,5},
		{12,14,8,15,5,11,9,13,7,1,4,10,3,2,6,0},
		{13,4,15,8,6,9,11,12,0,10,14,1,2,3,5,7},
		{14,15,11,9,7,13,12,4,10,3,8,2,6,5,0,1},
		{15,9,13,12,10,4,14,8,2,6,11,5,0,7,1,3},
	};
	static int g_R16_249Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
	};
	static int g_R16_271Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_271Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_272Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_272Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
	};	
	static int g_R16_273Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_273Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_275Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,4,7,10,8,9,11,12,13,0,14,1,15,3,6},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,8,9,12,4,7,13,10,11,1,15,0,14,6,3},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,11,2,14,13,5,4,15,8,3,10,6,12,0,1},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,13,5,15,11,2,8,14,4,6,12,3,10,1,0},
		{10,12,0,14,2,1,15,3,5,6,4,7,8,9,11,13},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,1,15,5,0,14,6,2,3,8,9,4,7,13,11},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,3,10,7,6,12,0,9,1,11,2,13,5,4,8},
		{15,14,6,12,9,3,10,1,7,0,13,5,11,2,8,4},
	};
	static int g_R16_275Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_276Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,4,7,10,8,9,11,12,13,0,14,1,15,3,6},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,8,9,12,4,7,13,10,11,1,15,0,14,6,3},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,11,2,14,13,5,4,15,8,3,10,6,12,0,1},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,13,5,15,11,2,8,14,4,6,12,3,10,1,0},
		{10,12,0,14,2,1,15,3,5,6,4,7,8,9,11,13},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,1,15,5,0,14,6,2,3,8,9,4,7,13,11},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,3,10,7,6,12,0,9,1,11,2,13,5,4,8},
		{15,14,6,12,9,3,10,1,7,0,13,5,11,2,8,4},
	};
	static int g_R16_276Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
	};
	static int g_R16_277Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,7,8,10,0,12,11,13,14,2,3,15,9},
		{2,5,0,9,8,1,11,12,4,3,14,6,7,15,10,13},
		{3,6,9,0,10,11,1,13,14,2,4,5,15,7,8,12},
		{4,7,8,10,0,12,13,1,2,14,3,15,5,6,9,11},
		{5,8,1,11,12,4,14,2,7,6,15,10,0,9,13,3},
		{6,10,11,1,13,14,4,3,15,5,7,8,9,0,12,2},
		{7,0,12,13,1,2,3,4,5,15,6,9,8,10,11,14},
		{8,12,4,14,2,7,15,5,0,10,9,13,1,11,3,6},
		{9,11,3,2,14,6,5,15,10,0,8,1,13,12,4,7},
		{10,13,14,4,3,15,7,6,9,8,0,12,11,1,2,5},
		{11,14,6,5,15,10,8,9,13,1,12,4,3,2,7,0},
		{12,2,7,15,5,0,9,8,1,13,11,3,4,14,6,10},
		{13,3,15,7,6,9,0,10,11,12,1,2,14,4,5,8},
		{14,15,10,8,9,13,12,11,3,4,2,7,6,5,0,1},
		{15,9,13,12,11,3,2,14,6,7,5,0,10,8,1,4},
	};
	static int g_R16_277Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,4,0,3,10,3,0,4,4,10,3,10,4,10},
		{0,0,4,0,0,4,0,0,4,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,4,0,10,10,3,4,0,4,3,10,10,0,3},
		{0,10,0,4,0,10,3,10,0,4,4,3,10,3,4,3},
		{0,3,0,4,0,3,10,3,0,4,4,10,3,10,4,10},
		{0,0,4,0,0,4,0,0,4,4,0,4,4,0,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,10,4,4,0,3,3,10,4,0,4,10,3,3,0,10},
		{0,3,4,4,0,10,10,3,4,0,4,3,10,10,0,3},
		{0,10,0,4,0,10,3,10,0,4,4,3,10,3,4,3},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,10,4,4,0,3,3,10,4,0,4,10,3,3,0,10},
	};	
	static int g_R16_278Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,10,9,14,13,12,0,15,3,2,1,6,5,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,13,12,15,3,2,1,7,6,5,4,10,9,8,0},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,3,2,7,6,5,4,11,10,9,8,13,12,0,1},
		{15,7,6,5,11,10,9,8,14,13,12,0,3,2,1,4},
	};
	static int g_R16_278Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,4,4,4,4,8,8,8,8,0,0,0,1},
		{0,2,2,2,4,4,4,4,9,9,9,9,0,0,0,2},
		{0,3,3,3,4,4,4,4,10,10,10,10,0,0,0,3},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,5,5,5,0,0,0,0,5,5,5,5,0,0,0,5},
		{0,6,6,6,0,0,0,0,6,6,6,6,0,0,0,6},
		{0,7,7,7,0,0,0,0,7,7,7,7,0,0,0,7},
		{0,8,8,8,4,4,4,4,1,1,1,1,0,0,0,8},
		{0,9,9,9,4,4,4,4,2,2,2,2,0,0,0,9},
		{0,10,10,10,4,4,4,4,3,3,3,3,0,0,0,10},
		{0,11,11,11,4,4,4,4,15,15,15,15,0,0,0,11},
		{0,12,12,12,0,0,0,0,12,12,12,12,0,0,0,12},
		{0,13,13,13,0,0,0,0,13,13,13,13,0,0,0,13},
		{0,14,14,14,0,0,0,0,14,14,14,14,0,0,0,14},
		{0,15,15,15,4,4,4,4,11,11,11,11,0,0,0,15},
	};	
	if(i==228)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_228Add[0][0],&g_R16_228Mul[0][0],0);
		return r;
	}	
	if(i==229)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_229Add[0][0],&g_R16_229Mul[0][0],0);
		return r;
	}
	if(i==249)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_249Add[0][0],&g_R16_249Mul[0][0],0);
		return r;
	}
	if(i==271)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_271Add[0][0],&g_R16_271Mul[0][0],0);
		return r;
	}
	if(i==272)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_272Add[0][0],&g_R16_272Mul[0][0],0);
		return r;
	}
	if(i==273)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_273Add[0][0],&g_R16_273Mul[0][0],0);
		return r;
	}	
	if(i==275)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_275Add[0][0],&g_R16_275Mul[0][0],0);
		return r;
	}	
	if(i==276)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_276Add[0][0],&g_R16_276Mul[0][0],0);
		return r;
	}	
	if(i==277)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_277Add[0][0],&g_R16_277Mul[0][0],0);
		return r;
	}	
	if(i==278)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_278Add[0][0],&g_R16_278Mul[0][0],0);
		return r;
	}	
	return NULL;
}

void printRing0(IRing* r,int ID){
   int n=r->size();
   printf("static int g_R%d_%dAdd[%d][%d]={\n",n,ID,n,n);   
   for(int i=0;i<n;i++){
	   printf("{"); 
	   for(int j=0;j<n;j++){
		  int ij=r->add(i,j);
		  printf("%d",ij);
		  if(j<n-1)
			printf(",");  
	   } 
       printf("},\n");   
   }
   printf("};\n");    
   printf("static int g_R%d_%dMul[%d][%d]={\n",n,ID,n,n);   
   for(int i=0;i<n;i++){
	   printf("{"); 
	   for(int j=0;j<n;j++){
		  int ij=r->mul(i,j);
		  printf("%d",ij);
		  if(j<n-1)
			printf(",");  
	   } 
       printf("},\n");   
   }
   printf("};\n"); 
}

typedef vector<vector<int> > MATRIXi;

// 2阶全矩阵环M2(r)
struct M2r:public IRing
{
public:
	// 静态函数
   static int getidx(vector<MATRIXi> &Arr2,MATRIXi &Arr1);
   static bool IsEqual(const MATRIXi &t,const MATRIXi &m);
   static vector<MATRIXi> FR(IRing* r,vector<MATRIXi>& gen); 
   static MATRIXi add(IRing* r,const MATRIXi &t,const MATRIXi &m);  
   static MATRIXi mul(IRing* r,const MATRIXi &t,const MATRIXi &m);
   static string MStr(const MATRIXi &t);   
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	M2r();// 默认构造函数
	M2r(IRing* r);
	M2r(IRing* r,vector<MATRIXi>& gen);	
	// 析构函数
	~M2r();
	// 成员函数	
    // 有限环序列A、B、C、D、E、F、G、H、I、J、K(拉丁字母符号以4阶环的GAP编号为准)<->C、B、A、J、?、?、Y、P、X、D、K(对应的某些文献的拉丁字母符号)
    void initD(int n);// 256阶全矩阵环M2(Z/4Z)的4阶子环R4_4所在的有限环序列,J=<a,b;pa=pb=0,a^2=b^2=0>=C_p×C_p(0)	
	void initE(int n);// R4_5所在的有限环序列,
	void initF(int n);// R4_6所在的有限环序列,		
    void initG(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_7所在的有限环序列,Y	
    void initH(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_8所在的有限环序列,P	
    void initI(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_9所在的有限环序列,X	
    void initJ(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_10所在的有限环序列,D=<a,b;pa=pb=0,a^2=a,b^2=b,ab=ba=0>=Z_p+Z_p	
    void initK(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_11所在的有限环序列,K=GF(p^2)=p^2阶有限域
	bool initR8(int ID=0);
	bool initR16(int ID=0);	
	bool initR16_2(int ID=0);		
	// 成员变量
	vector<MATRIXi> m_Set;
	IRing* m_r;
	int m_flag;// M2r对象析构时是否释放m_r指向的内存
};

M2r::M2r(){
	m_r=NULL;
	m_flag=0;	
}

M2r::~M2r(){
#if 0
	int ID=IdRing(this);
	printf("R%d_%d: %s\n",size(),ID,__FUNCTION__);	
#endif	
	if(m_flag==1 && m_r!=NULL){
		delete m_r;
		m_r=NULL;
	}	
}

// A:=[ [ ZmodnZObj(2,m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj(0,m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 2, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initD(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=n;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=0;
   B[0][1]=0;
   B[1][0]=0;
   B[1][1]=n;
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n*n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

void M2r::initE(int n){
}

void M2r::initF(int n){
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 1, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;YRing:=RingByGenerators([A,B]);;
void M2r::initG(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=1;
   B[0][1]=1;
   B[1][0]=0;
   B[1][1]=0;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initH(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=1;
   B[0][1]=0;
   B[1][0]=1;
   B[1][1]=0;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 1, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 1, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 1, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initI(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=1;  
   B[0][0]=1;
   B[0][1]=1;
   B[1][0]=0;
   B[1][1]=1;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, 2 ), ZmodnZObj( 0, 2 ) ], [ ZmodnZObj( 0, 2 ), ZmodnZObj( 1, 2 ) ] ];;B:=[ [ ZmodnZObj( 1, 2 ), ZmodnZObj( 0, 2 ) ], [ ZmodnZObj( 0, 2 ), ZmodnZObj( 0, 2 ) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initJ(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=1;  
   B[0][0]=1;
   B[0][1]=0;
   B[1][0]=0;
   B[1][1]=0; 
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

void M2r::initK(int n){
   MATRIXi A(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=1;
   A[1][0]=1;
   A[1][1]=0;   
   vector<MATRIXi> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

bool M2r::initR8(int ID){
	vector<MATRIXi> gen;	
	MATRIXi A(2,vector<int>(2,0));
	MATRIXi B(2,vector<int>(2,0));	
	if(ID==1){  
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=4;
		gen.push_back(A);
   }else if(ID==2){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=1;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=1;
		gen.push_back(A);
   }else if(ID==3){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=7;
		A[1][1]=1;
		gen.push_back(A);
   }else if(ID==4){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=7;
		A[1][1]=0;
		gen.push_back(A);		
   }else if(ID==5){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=2;
		B[0][1]=2;
		B[1][0]=2;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==8){	 
		//R8_8:N0n0bAbOn1n2n4n5n6n7n8S1N2=[1,3,4,0],4,0,0,8,1,5,7,48,7,2,[1,3,4,0],[[2,4,8],[4,4,8]]	
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);   
   }else if(ID==10){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=0;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==11){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=0;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==13){		
        //R8_13:N0n0bAbOn1n2n4n5n6n7n8S1N2=[1,3,4,0],4,1,0,8,2,3,3,32,7,8,[1,3,2,2],[[2,4,8],[4,2,8],[4,4,16]]
		m_r=new ZmodnZ(1,4);		
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;  
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==15){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=2;
		A[1][1]=0;
		B[0][0]=3;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==16){
		m_r=new ZmodnZ(2,8);		
		A[0][0]=0;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=3;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==19){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==20){
        //R8_20:N0n0bAbOn1n2n4n5n6n7n8S1N2=[1,3,4,0],4,0,0,8,3,3,3,28,3,2,[1,3,4,0],[[2,4,8],[4,2,12],[4,4,16]]
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=3;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==21){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=3;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=3;
		gen.push_back(A);		
   }else if(ID==23){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=2;
		A[0][1]=4;
		A[1][0]=2;
		A[1][1]=6;
		gen.push_back(A);		
   }else if(ID==24){	 
		m_r=new ZmodnZ(1,4);		
		A[0][0]=2;
		A[0][1]=2;
		A[1][0]=1;
		A[1][1]=2;
		gen.push_back(A);		
   }else if(ID==25){
		M2r *K4=new M2r();
		K4->initD(2);
		m_r=K4;		
		A[0][0]=3;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,2));
		gen.push_back(C);
	}else if(ID==26){//R8_26
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=1;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==27){//R8_27
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==31){
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=0;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=0;  
		B[0][0]=3;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==36){	 
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==41){
		M2r *r4=new M2r();
		r4->initG(2);
		m_r=r4;		
		A[0][0]=3;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==47){
		M2r *r4=new M2r();
		r4->initH(2);
		m_r=r4;		
		A[0][0]=3;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==48){
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;			
		A[0][0]=3;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==51){
	   // KK(4)=R8_51
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;
	   A[0][0]=1;
	   A[0][1]=1;
	   A[1][0]=1;
	   A[1][1]=0;   
	   gen.push_back(A);
   }else if(ID==0){ 
		//m_r=new ZmodnZ(1,4);	
		m_r=FiniteRing::newR8(22);
		A[0][0]=1;
		B[0][0]=2;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,0));		
		C[1][1]=1;
		gen.push_back(C);		
 	    //initR8(51);
		//return true;  
	}else{
		return false;
	}	 
	m_flag=1;
	m_Set=FR(m_r,gen); 
    return true;	
}

bool M2r::initR16(int ID){
   vector<MATRIXi> gen;	
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   if(ID==2){ 
		m_r=new ZmodnZ(1,16);		
		A[0][0]=2;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=8;
		gen.push_back(A);   			
   }else if(ID==8){
		m_r=new ZmodnZ(1,16);		
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=6;
		gen.push_back(A);
   }else if(ID==9){
		m_r=new ZmodnZ(2,32);		
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=6;
		B[0][0]=8;
		B[0][1]=8;
		B[1][0]=8;
		B[1][1]=8;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==10){
		m_r=new ZmodnZ(1,16);		
		A[0][0]=2;
		A[0][1]=4;
		A[1][0]=0;
		A[1][1]=8;
		B[0][0]=8;
		B[0][1]=8;
		B[1][0]=8;
		B[1][1]=8;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==11){
        //R16_11
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=1;
		gen.push_back(A);
   }else if(ID==16){	 
		m_r=new ZmodnZ(1,8);
		A[0][0]=2;
		A[0][1]=6;
		A[1][0]=2;
		A[1][1]=6;
		B[0][0]=3;
		B[0][1]=3;
		B[1][0]=5;
		B[1][1]=5;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==17){
		m_r=new ZmodnZ(1,8);		
		A[0][0]=6;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=2;
		gen.push_back(A);		
   }else if(ID==18){		
		//R16_18
		m_r=new ZmodnZ(1,8);
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);  
   }else if(ID==19){
        //R16_19
		m_r=new ZmodnZ(1,8);	
		A[0][0]=2;
		A[0][1]=3;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=6;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==20){
        //R16_20
		m_r=new ZmodnZ(1,8);		
		A[0][0]=1;
		A[0][1]=4;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=3;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==21){
        //R16_21
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==22){
		m_r=new ZmodnZ(1,16);		
		A[0][0]=12;
		A[0][1]=4;
		A[1][0]=6;
		A[1][1]=8;
		gen.push_back(A);		
   }else if(ID==23){		
		m_r=new ZmodnZ(1,8);		
		A[0][0]=0;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=1;  
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==24){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==25){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=6;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=2;
		B[0][1]=5;
		B[1][0]=0;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==26){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=7;
		A[1][1]=4;
		B[0][0]=4;
		B[0][1]=0;
		B[1][0]=6;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==27){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=0;
		A[0][1]=4;
		A[1][0]=3;
		A[1][1]=2;
		gen.push_back(A);	
   }else if(ID==93){ 
		m_r=FiniteRing::newR8(8);
		A[0][0]=0;
		A[0][1]=5;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=2;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==94){ 
		m_r=FiniteRing::newR8(8);
		A[0][0]=0;
		A[0][1]=5;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=2;
		B[1][0]=1;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==95){ 
		m_r=FiniteRing::newR8(8);
		A[0][0]=0;
		A[0][1]=5;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=6;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==101){//initG(4)
		m_r=new ZmodnZ(1,4);		
		A[0][0]=1;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=3;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==102){		
		initH(4);
        return true;
   }else if(ID==103){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=2;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==104){//initJ(4)
		m_r=new ZmodnZ(1,4);		
		A[0][0]=1;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==105){
		m_r=new ZmodnZ(1,4);		
		A[0][0]=1;
		A[0][1]=0;
		A[1][0]=2;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==106){		
		initK(4);
        return true; 		
   }else if(ID==107){		
		initD(4);
        return true;		
   }else if(ID==108){
		m_r=new ZmodnZ(1,8);		
		A[0][0]=2;
		A[0][1]=2;
		A[1][0]=2;
		A[1][1]=2;
		B[0][0]=4;
		B[0][1]=0;
		B[1][0]=6;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==110){		
		initI(4);
        return true;		
   }else if(ID==115){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=0; 
		gen.push_back(A);		
   }else if(ID==118){
		m_r=new ZmodnZ(2,8);		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==119){	 
		m_r=new ZmodnZ(1,8);		
		A[0][0]=6;
		A[0][1]=4;
		A[1][0]=0;
		A[1][1]=6;
		B[0][0]=2;
		B[0][1]=2;
		B[1][0]=2;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==129){ 
		m_r=FiniteRing::newR8(12);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==150){ 
		m_r=FiniteRing::newR8(9);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==151){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==154){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=2;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==157){ 
		m_r=FiniteRing::newR8(12);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==158){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==161){ 
		m_r=FiniteRing::newR8(12);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==164){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);			
   }else if(ID==166){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==170){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=2;
		B[0][1]=1;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==174){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==177){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==184){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==185){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==186){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==187){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==188){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==189){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=7;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==191){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==192){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==193){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=3;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==194){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);			
   }else if(ID==195){ 
		m_r=FiniteRing::newR8(9);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==196){ 
		m_r=FiniteRing::newR8(9);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==197){ 
		m_r=FiniteRing::newR8(9);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==199){	  
		m_r=new ZmodnZ(1,4);		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;  
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 
		MATRIXi C(2,vector<int>(2,0));
		C[0][0]=2;		
		gen.push_back(C);		
   }else if(ID==200){
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=4;
		A[1][0]=4;
		A[1][1]=4;
		B[0][0]=4;
		B[0][1]=2;
		B[1][0]=6;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==201){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=2;
		B[1][1]=0;	
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==202){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=2;
		B[1][1]=0;	
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==203){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=0;	
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==204){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=2;
		B[1][1]=1;	
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==205){
		m_r=new ZmodnZ(1,4);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=1;	
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==207){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==208){ 
		m_r=FiniteRing::newR8(7);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=4;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==209){ 
		m_r=FiniteRing::newR8(7);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==210){ 
		m_r=FiniteRing::newR8(7);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=2;
		gen.push_back(A);	
   }else if(ID==211){ 
		m_r=FiniteRing::newR8(7);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=3;
		gen.push_back(A);		
   }else if(ID==212){
		m_r=new ZmodnZ(1,8);		
		A[0][0]=4;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=4;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,4));
		gen.push_back(C);
   }else if(ID==213){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=3;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==215){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==216){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=3;
		A[1][1]=4;
		gen.push_back(A);	
   }else if(ID==217){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);			
   }else if(ID==218){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=3;
		A[1][1]=5;
		gen.push_back(A);			
   }else if(ID==220){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=2;
		A[1][1]=3;
		gen.push_back(A);
   }else if(ID==221){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=4;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==222){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==223){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==224){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==225){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=1;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==226){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);			
   }else if(ID==227){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=3;
		gen.push_back(A);	
   }else if(ID==230){ 
		m_r=FiniteRing::newR8(6);
		A[0][0]=1;
		B[0][0]=2;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,0));
		C[1][1]=4;		
		gen.push_back(C);			
   }else if(ID==232){ 
		m_r=FiniteRing::newR8(9);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==234){ 
		m_r=FiniteRing::newR8(12);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=4;
		B[0][0]=1;
		B[0][1]=3;
		B[1][0]=2;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==235){ 
		m_r=FiniteRing::newR8(12);
		A[0][0]=4;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,0));
		C[1][1]=2;		
		gen.push_back(C);	
   }else if(ID==236){ 
		m_r=FiniteRing::newR8(18);
		A[0][0]=1;
		B[0][0]=2;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,0));
		C[1][1]=4;		
		gen.push_back(C);			
   }else if(ID==237){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=3;
		gen.push_back(A);
   }else if(ID==240){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==242){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=4;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==243){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=2;
		A[1][1]=0;
		B[0][0]=4;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=5;
		gen.push_back(A);
		gen.push_back(B);			
   }else if(ID==245){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=4;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==247){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=4;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==250){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=4;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==253){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=5;
		B[0][0]=4;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==254){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=6;
		gen.push_back(A);
		gen.push_back(B);				
   }else if(ID==255){ 
		m_r=FiniteRing::newR8(7);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==256){ 
		m_r=FiniteRing::newR8(14);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=2;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID>280 && ID<=390){ 
		return initR16_2(ID);
   }else if(ID==0){	 
 	    initR16(256);
		return true;  
   }else{
		return false;
   }
   m_flag=1;
   m_Set=FR(m_r,gen); 
   return true; 
}

bool M2r::initR16_2(int ID){
	vector<MATRIXi> gen;	
	MATRIXi A(2,vector<int>(2,0));
	MATRIXi B(2,vector<int>(2,0));	
	if(ID==288){ 
		m_r=FiniteRing::newR8(39);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=5;
		B[0][0]=2;
		B[0][1]=6;
		B[1][0]=6;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==291){ 	
		m_r=FiniteRing::newR8(39);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=2;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==292){ 
		m_r=FiniteRing::newR8(39);
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=4;
		B[1][1]=4;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==293){	 
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=0;
		B[0][0]=1;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B); 
		MATRIXi C(2,vector<int>(2,0));
		C[1][1]=3;
		gen.push_back(C);	
   }else if(ID==294){	 
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=1;
		A[0][1]=2;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=3;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 
		MATRIXi C(2,vector<int>(2,0));
		C[0][0]=3;
		C[0][1]=3;		
		gen.push_back(C);
   }else if(ID==295){	 
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=3;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B); 
   }else if(ID==299){	 
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==300){
		m_r=new ZmodnZ(1,2);		
		A[0][0]=1;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==302){
		M2r *r=new M2r();
        r->initJ(2);
		m_r=r;
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=2;	
		gen.push_back(A);
	}else if(ID==308){//R16_308
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=3;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==312){//R16_312
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==317){//R16_317
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=1;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==318){//R16_318
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==321){//R16_321
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==322){//R16_322
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=2;
		B[0][1]=3;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==327){//R16_327
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==328){//R16_328
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=3;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==330){//R16_330
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=3;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==335){//R16_335
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=2;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==336){//R16_336
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==337){ 
		m_r=FiniteRing::newR8(39);
		A[0][0]=2;
		B[0][0]=4;
		gen.push_back(A);
		gen.push_back(B);
		MATRIXi C(2,vector<int>(2,0));
		C[1][1]=1;		
		gen.push_back(C);			
	}else if(ID==352){//R16_352
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=3;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==354){//R16_354
		M2r *H4=new M2r();
		H4->initH(2);
		m_r=H4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=3;
		B[1][0]=1;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==362){ 
		m_r=FiniteRing::newR8(22);
		A[0][0]=1;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=5;
		B[0][0]=1;
		B[0][1]=1;
		B[1][0]=1;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);				
   }else if(ID==364){	
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;
	   A[0][0]=1;
	   A[0][1]=0;
	   A[1][0]=0;
	   A[1][1]=2;  
	   B[0][0]=3;
	   B[0][1]=2;
	   B[1][0]=0;
	   B[1][1]=3;    
	   gen.push_back(A);
	   gen.push_back(B);		
   }else if(ID==365){
	   M2r *K4=new M2r();
	   K4->initJ(2);
	   m_r=K4;	
		A[0][0]=1;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=2;  
		B[0][0]=3;
		B[0][1]=3;
		B[1][0]=3;
		B[1][1]=1; 
	   gen.push_back(A);
	   gen.push_back(B);		
   }else if(ID==366){
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=2;
		A[0][1]=2;
		A[1][0]=0;
		A[1][1]=2;  
		B[0][0]=0;
		B[0][1]=2;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==378){
	   // HK(4)=R16_378
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;	
	   A[0][0]=1;
	   A[0][1]=0;
	   A[1][0]=0;
	   A[1][1]=0;  
	   B[0][0]=1;
	   B[0][1]=0;
	   B[1][0]=1;
	   B[1][1]=0;  
	   gen.push_back(A);
	   gen.push_back(B);
   }else if(ID==381){
	   // GK(4)=R16_381	
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;
	   A[0][0]=1;
	   A[0][1]=0;
	   A[1][0]=0;
	   A[1][1]=0;  
	   B[0][0]=1;
	   B[0][1]=1;
	   B[1][0]=0;
	   B[1][1]=0;  
	   gen.push_back(A);
	   gen.push_back(B);	   
   }else if(ID==383){
	   // R16_383	
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;
#if 0	   
	   A[0][0]=0;
	   A[0][1]=1;
	   A[1][0]=1;
	   A[1][1]=0;   
	   gen.push_back(A);	  
	   // IK(4)=R16_383
#else
	   A[0][0]=1;
	   A[0][1]=0;
	   A[1][0]=0;
	   A[1][1]=1;  
	   B[0][0]=1;
	   B[0][1]=1;
	   B[1][0]=0;
	   B[1][1]=1;    
	   gen.push_back(A);
	   gen.push_back(B);
#endif 	  
   }else if(ID==384){
		// DK(4)=R16_389
		// DI(4)=R16_384
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;	
		A[0][0]=2;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=0;  
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==385){//R16_385
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=3;
		gen.push_back(A);
	}else if(ID==387){//R16_387
		M2r *J4=new M2r();
		J4->initJ(2);
		m_r=J4;
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=2;
		B[0][0]=1;
		B[0][1]=3;
		B[1][0]=3;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==389){
	   // JK(4)=R16_389
	   M2r *K4=new M2r();
	   K4->initK(2);
	   m_r=K4;	
	   A[0][0]=1;
	   A[0][1]=0;
	   A[1][0]=0;
	   A[1][1]=1;  
	   B[0][0]=1;
	   B[0][1]=0;
	   B[1][0]=0;
	   B[1][1]=0;   
	   gen.push_back(A);
	   gen.push_back(B);
   }else if(ID==390){	 
		M2r *K4=new M2r();
		K4->initK(2);
		m_r=K4;
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=2;
		gen.push_back(A);
	}else{
		return false;
	}	 
	m_flag=1;
	m_Set=FR(m_r,gen); 
    return true;	
}

M2r::M2r(IRing* r,vector<MATRIXi>& gen){
	m_r=r;
	m_Set=FR(r,gen);
}

vector<MATRIXi> M2r::FR(IRing* r,vector<MATRIXi>& gen){
	vector<MATRIXi> Set;
	int n=gen[0].size();
	MATRIXi E(n,vector<int>(n,0));
	Set.push_back(E);
	for(int i=0;i<gen.size();i++)
	{
		if(!IsEqual(gen[i],E))
			Set.push_back(gen[i]);
	}
	int R=Set.size();
	int cnt=R;
	int cnt1=R;
	do{
		cnt=Set.size();
		for(int i=0;i<cnt;i++)
		{
			for(int j=0;j<cnt;j++)
			{
				MATRIXi IJ=mul(r,Set[i],Set[j]);
				vector<MATRIXi>::iterator p=std::find(Set.begin(),Set.end(),IJ);
				if(p==Set.end()){
					Set.push_back(IJ);
				}
				MATRIXi IJ1=add(r,Set[i],Set[j]);
				p=std::find(Set.begin(),Set.end(),IJ1);
				if(p==Set.end()){
					Set.push_back(IJ1);
				}
			}
		}
		cnt1=Set.size();
	}while(cnt1>cnt);
    return Set;	
}

string M2r::MStr(const MATRIXi &t){
	string str="[";
	int n=t.size();
	for(int i=0;i<n;i++)
	{
        str+="[";
		for(int j=0;j<n;j++)
		{
			char sz[20]={0};
			sprintf(sz,"%d",t[i][j]);
			str+=sz;
			if(j<n-1)
				str+=",";
		}
		str+="]";
		if(i<n-1)
			str+=",";
	}
	str+="]";
	return str;
}

MATRIXi M2r::add(IRing* r,const MATRIXi &t,const MATRIXi &m)
{
    int n=t.size();
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=r->add(t[i][j],m[i][j]);
		}
	}
	return C;
}

MATRIXi M2r::mul(IRing* r,const MATRIXi &t,const MATRIXi &m)
{
    int n=t.size();
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=r->add(sum,r->mul(t[i][k],m[k][j]));
			}
			C[i][j]=sum;
		}
	}
	return C;
}

int M2r::getidx(vector<MATRIXi> &Arr2,MATRIXi &Arr1){
	int N=Arr2.size();
	for(int i=0;i<N;i++){
		if(IsEqual(Arr2[i],Arr1))
			return i;
	}
	return -1;
}

bool M2r::IsEqual(const MATRIXi &t,const MATRIXi &m){
	int nt=t.size();
	int nm=m.size();
	if(nt!=nm)
		return false;
	for(int i=0;i<nt;i++){
		for(int j=0;j<nt;j++){
			if(t[i][j]!=m[i][j])
				return false;
		}
	}
	return true;
}

void M2r::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",size(),ID,str.c_str());	
	string I1=calcI1(this);
	string I2=calcI2(this);   
	printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());	
	//string S1=calS1(this,true);
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	if(size()<100){
		printRing(this);	
	}
	else{
	   printf("环的阶太大，不在控制台打印\n");
	}
}

int M2r::add(int a,int b)
{
	MATRIXi A=m_Set[a];
	MATRIXi B=m_Set[b];	
    int n=2;
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=m_r->add(A[i][j],B[i][j]);
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int M2r::mul(int a,int b)
{
	MATRIXi A=m_Set[a];
	MATRIXi B=m_Set[b];	
    int n=2;
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=m_r->add(sum,m_r->mul(A[i][k],B[k][j]));
			}
			C[i][j]=sum;
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int M2r::size()
{
	return m_Set.size();
}

M2r::M2r(IRing* r)
{
	m_r=r;
	int N=r->size();
	int n=2;
	MATRIXi m(n,vector<int>(n,0));
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			for(int k=0;k<N;k++){
				for(int l=0;l<N;l++){
					m[0][0]=i;
					m[0][1]=j;
					m[1][0]=k;
					m[1][1]=l;
                    m_Set.push_back(m);					
				}
			}
		}
	}
}

typedef unsigned int TElem; // unsigned char
typedef vector<vector<TElem> > MATRIXi8;

// n阶全矩阵环Mn(r)
struct Mnr:public IRing
{
public:
	// 静态函数
   static int getidx(vector<MATRIXi8> &Arr2,MATRIXi8 &Arr1);
   static bool IsEqual(const MATRIXi8 &t,const MATRIXi8 &m);	
   static bool nextV1(int m,vector<TElem>& v);
   static vector<MATRIXi8> FR(IRing* r,vector<MATRIXi8>& gen); 
   static MATRIXi8 add(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m);  
   static MATRIXi8 mul(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m); 
   static string MStr(const MATRIXi8 &t);   
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	Mnr();// 默认构造函数
	Mnr(IRing* r,int n);
	Mnr(IRing* r,int n,vector<MATRIXi8>& gen);	
	// 析构函数
	~Mnr();	
	// 成员函数	
    int visitMnRm(int n,int m);	
	// 有限环序列
	void initE(int n);// R4_5、R9_5所在的n^2阶有限环序列,
	void initF(int n);// R4_6、R9_6所在的n^2阶有限环序列,		
	void initL(int n);// R8_38所在的n^3阶有限环序列,
	bool initR8(int ID=0);
	bool initR16(int ID=0);	
	bool initR16_2(int ID=0);// 特征为2的16阶环，拆分原因：fatal error C1061: 编译器限制 : 块嵌套太深	
	// 成员变量
	vector<MATRIXi8> m_Set;
	IRing* m_r;
	int m_n;
	int m_flag;// Mnr对象析构时是否释放m_r指向的内存
};

Mnr::Mnr(){
	m_r=NULL;
	m_flag=0;	
}

Mnr::~Mnr(){
	if(m_flag==1 && m_r!=NULL){
		delete m_r;
		m_r=NULL;
	}	
}

// A:=[[Z(m),Z(m),0*Z(m),0*Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)],[Z(m),Z(m),0*Z(m),0*Z(m)]];;R4_5:=RingByGenerators([A]);;
void Mnr::initE(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   //MATRIXi8 B(4,vector<unsigned char>(4,0));
   A[0][0]=0;
   A[0][1]=1;
   A[0][2]=0;
   A[0][3]=1; 
   A[1][0]=n-1;
   A[1][1]=n-1;
   A[1][2]=0;
   A[1][3]=0;
   A[2][0]=n-1;
   A[2][1]=n-1;
   A[2][2]=0;
   A[2][3]=0;
   A[3][0]=0;
   A[3][1]=1;
   A[3][2]=0;
   A[3][3]=1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

// A:=[[Z(m),0*Z(m),0*Z(m),Z(m)],[Z(m),0*Z(m),0*Z(m),Z(m)],[0*Z(m),Z(m),Z(m),0*Z(m)],[Z(m),0*Z(m),0*Z(m),Z(m)]];;R4_6:=RingByGenerators([A]);;
void Mnr::initF(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   A[0][0]=1;
   A[0][1]=0;
   A[0][2]=0;
   A[0][3]=1;
   A[1][0]=n-1;
   A[1][1]=0;
   A[1][2]=0;
   A[1][3]=n-1; 
   A[2][0]=0;
   A[2][1]=n-1;
   A[2][2]=n-1;
   A[2][3]=0;
   A[3][0]=n-1;
   A[3][1]=0;
   A[3][2]=0;
   A[3][3]=n-1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

// A:=[[0*Z(m),Z(m),0*Z(m),Z(m)],[Z(m),Z(m),0*Z(m),0*Z(m)],[0*Z(m),0*Z(m),Z(m),Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)]];;R8_38:=RingByGenerators([A]);;
void Mnr::initL(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   //MATRIXi8 B(4,vector<unsigned char>(4,0));
   A[0][0]=0;
   A[0][1]=1;
   A[0][2]=0;
   A[0][3]=1;
   A[1][0]=1;
   A[1][1]=1;
   A[1][2]=0;
   A[1][3]=0; 
   A[2][0]=0;
   A[2][1]=0;
   A[2][2]=1;
   A[2][3]=1;
   A[3][0]=0;
   A[3][1]=1;
   A[3][2]=0;
   A[3][3]=1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

bool Mnr::initR8(int ID){
   vector<MATRIXi8> gen;		
   if(ID==4){
		m_r=new ZmodnZ(4,32);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=4;
		A[0][3]=4;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=4;
		A[1][3]=4; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=5;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=5;
		gen.push_back(A);	   
   }else if(ID==5){	   
		m_r=new ZmodnZ(2,8);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
		MATRIXi8 B(3,vector<TElem>(3,2));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		gen.push_back(A);  
		gen.push_back(B); 	
   }else if(ID==13){
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=2;
		A[1][1]=2;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=2;
		A[2][1]=2;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;
		gen.push_back(A);
		m_r=new ZmodnZ(1,4);	  
		m_n=4;				
   }else if(ID==28){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==29){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=1;   
		gen.push_back(A);
		gen.push_back(B);	
	}else if(ID==30){//R8_30
		m_r=new ZmodnZ(1,2);
		m_n=3;	
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));	
		MATRIXi8 C(3,vector<TElem>(3,0));			
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=0;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=1;
		C[2][1]=0;
		C[2][2]=0;
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==32){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=1; 
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=1;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=1;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;	   
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==33){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));	   
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[1][3]=1; 
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=1;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=0;     
		gen.push_back(A);		
   }else if(ID==34){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=1;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=1;   
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==35){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));			
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=1; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=1;  
		gen.push_back(A);		
   }else if(ID==37){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==38){//R8_38
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		gen.push_back(A);
	}else if(ID==39){//R8_39
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==40){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));	
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[1][3]=0; 
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;  
		B[3][3]=1;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==41){	   
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,1));	
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;		
		gen.push_back(A);  
		gen.push_back(B);
   }else if(ID==42){
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=0; 
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0; 
		gen.push_back(A);   
		m_r=new ZmodnZ(1,2);	
		m_n=4;
	}else if(ID==43){//R8_43
		m_r=new ZmodnZ(1,2);
		m_n=3;
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		MATRIXi8 C(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=1;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=0;
		C[2][1]=0;
		C[2][2]=0;
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);	   
   }else if(ID==44){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;  
		gen.push_back(A);
		gen.push_back(B);	   
   }else if(ID==45){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);	   
   }else if(ID==46){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;  
		gen.push_back(A);
   }else if(ID==49){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=1;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==50){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=1;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==52){
	   MATRIXi8 A(4,vector<TElem>(4,0));
	   A[0][0]=0;
	   A[0][1]=1;
	   A[0][2]=1;
	   A[0][3]=0;
	   A[1][0]=0;
	   A[1][1]=1;
	   A[1][2]=1;
	   A[1][3]=0; 
	   A[2][0]=0;
	   A[2][1]=1;
	   A[2][2]=0;
	   A[2][3]=1;
	   A[3][0]=0;
	   A[3][1]=0;
	   A[3][2]=1;
	   A[3][3]=0;  
	   gen.push_back(A);   
	   m_r=new ZmodnZ(1,2);	
       m_n=4;	   
   }else if(ID==0){
		//Mnr* r=new Mnr();
		//r->initR8(45);
		//m_r=r;
		//m_r=FiniteRing::newR8(22);
		m_r=new ZmodnZ(1,4);	
		m_n=5;		
		MATRIXi8 A(5,vector<TElem>(5,0)); 
		MATRIXi8 B(5,vector<TElem>(5,0)); 		
		MATRIXi8 C(6,vector<TElem>(6,0));
		MATRIXi8 D(4,vector<TElem>(4,0));		
		A[0][0]=2;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=2;
		A[1][1]=2;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=2;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=2;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;
		B[4][4]=3;	
		gen.push_back(A);
		gen.push_back(B);
		//gen.push_back(C); 
		//gen.push_back(D);		
	   //initR8(41);
       //return true;	   
   }else{
       return false;		   
   }
   m_flag=1;
   m_Set=FR(m_r,gen); 
   return true;   
}

bool Mnr::initR16(int ID){
   vector<MATRIXi8> gen;     
   if(ID==1){
		m_r=new ZmodnZ(1,16);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;   
		gen.push_back(A);
   }else if(ID==4){	
		m_r=new ZmodnZ(1,16);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=4;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;   
		gen.push_back(A); 
   }else if(ID==5){	
		m_r=new ZmodnZ(1,16);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=8;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;   
		gen.push_back(A); 		
   }else if(ID==7){
		m_r=new ZmodnZ(1,8);	
		m_n=4;	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=4;
		A[0][3]=4;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=4;
		A[1][3]=4; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=5;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=5;
		gen.push_back(A);	   	   
   }else if(ID==8){	   
		m_r=new ZmodnZ(1,8);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));		
		A[0][0]=4;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		gen.push_back(A);
   }else if(ID==9){   
		m_r=new ZmodnZ(2,16);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;	
		B[0][1]=4;
		B[1][2]=4;
		B[2][0]=4;		
		gen.push_back(A);  
		gen.push_back(B); 			
   }else if(ID==12){
		m_r=new ZmodnZ(2,16);
		m_n=4; 
		MATRIXi8 A(4,vector<TElem>(4,1));		
		MATRIXi8 B(4,vector<TElem>(4,4));		
		A[0][0]=4;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		gen.push_back(A);		
		gen.push_back(B);			
   }else if(ID==22){
		m_r=new ZmodnZ(1,8);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=4;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		gen.push_back(A);
   }else if(ID==71){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==72){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=2;
		A[2][2]=0;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=2;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==73){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=2;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==74){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==75){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==76){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=3;
		A[2][1]=0;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=2;
		B[1][2]=2;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=2;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==77){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=3;
		A[2][1]=2;
		A[2][2]=0;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;   
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==78){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=2;
		A[2][0]=1;
		A[2][1]=2;
		A[2][2]=2;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;  
		gen.push_back(A);
		gen.push_back(B); 	
   }else if(ID==79){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=2;
		A[2][0]=1;
		A[2][1]=2;
		A[2][2]=2;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=2;  
		gen.push_back(A);
		gen.push_back(B);  
   }else if(ID==80){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=2;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=2;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=2;  
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==81){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=3;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B); 	
   }else if(ID==82){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=3;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=3;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B); 	 		
   }else if(ID==83){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=3;
		A[1][1]=0;
		A[1][2]=2;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=3;
		B[1][1]=0;
		B[1][2]=3;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==84){
		m_r=new ZmodnZ(1,4);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));	   
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=0;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=2;
		A[1][3]=1; 
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=2;
		A[2][3]=1;
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=1;  
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=0;
		B[0][3]=1;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=2;
		B[1][3]=0;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		B[2][3]=2;
		B[3][0]=3;
		B[3][1]=1;
		B[3][2]=2;
		B[3][3]=3;	   
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==85){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=2;
		A[2][0]=0;
		A[2][1]=2;
		A[2][2]=2;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=3;
		B[1][0]=0;
		B[1][1]=3;
		B[1][2]=3;
		B[2][0]=0;
		B[2][1]=3;
		B[2][2]=3;    
		gen.push_back(A);
		gen.push_back(B); 	
   }else if(ID==86){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=3;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=2;
		A[2][2]=0;
		B[0][0]=2;
		B[0][1]=3;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;    
		gen.push_back(A);
		gen.push_back(B); 	
   }else if(ID==87){
		m_r=new ZmodnZ(1,4);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));	   
		A[0][0]=3;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=3;
		A[1][0]=3;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=3; 
		A[2][0]=1;
		A[2][1]=3;
		A[2][2]=3;
		A[2][3]=1;
		A[3][0]=3;
		A[3][1]=1;
		A[3][2]=1;
		A[3][3]=3;  
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=1;
		B[1][3]=0;
		B[2][0]=2;
		B[2][1]=3;
		B[2][2]=3;
		B[2][3]=2;
		B[3][0]=0;
		B[3][1]=1;
		B[3][2]=1;
		B[3][3]=0;	  
		gen.push_back(A);
		gen.push_back(B); 
   }else if(ID==88){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=2;
		B[0][1]=3;
		B[0][2]=3;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=2;  
		gen.push_back(A);
		gen.push_back(B);  		
   }else if(ID==89){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=2;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==90){
		m_r=new ZmodnZ(1,4);	
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=2;		 	
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=2;   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==106){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=3;
		A[1][1]=2;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=3;
		A[2][1]=2;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;
		gen.push_back(A);
   }else if(ID==107){
		m_r=new ZmodnZ(2,8);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=3;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=3;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==109){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0)); 
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=3;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=3; 
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=2;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;	
		gen.push_back(A);  		
   }else if(ID==110){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 B(3,vector<TElem>(3,0));		
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		gen.push_back(B);			
   }else if(ID==111){
	   initE(4);
	   return true;
   }else if(ID==112){
	   initF(4);
       return true;			
    }else if(ID==113){
	   m_r=new ZmodnZ(1,4);
	   m_n=4; 	   
	   MATRIXi8 A(4,vector<TElem>(4,0));	
	   A[0][0]=1;
	   A[0][1]=0;
	   A[0][2]=0;
	   A[0][3]=1;
	   A[1][0]=1;
	   A[1][1]=0;
	   A[1][2]=0;
	   A[1][3]=1; 
	   A[2][0]=0;
	   A[2][1]=1;
	   A[2][2]=1;
	   A[2][3]=0;
	   A[3][0]=1;
	   A[3][1]=0;
	   A[3][2]=0;
	   A[3][3]=1;
	   gen.push_back(A);	   
   }else if(ID==114){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));	
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=1; 
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=1;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=0; 
		gen.push_back(A);
   }else if(ID==116){
		m_r=new ZmodnZ(1,8);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=2;
		A[0][2]=6;
		A[0][3]=6;
		A[1][0]=2;
		A[1][1]=2;
		A[1][2]=6;
		A[1][3]=6; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=2;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=2;
		B[0][2]=6;
		B[0][3]=6;
		B[1][0]=0;
		B[1][1]=4;
		B[1][2]=4;
		B[1][3]=4;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=2;
		B[3][2]=6;
		B[3][3]=6;	   
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==117){
		m_r=new ZmodnZ(1,8);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=2;
		A[3][0]=0;
		A[3][1]=2;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;	   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==120){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=2;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=3;
		A[3][1]=2;
		A[3][2]=2;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=3;
		B[2][1]=2;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=2;
		B[3][1]=1;
		B[3][2]=2;
		B[3][3]=0;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==198){
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=1;  
		gen.push_back(A);
		gen.push_back(B);  
		MATRIXi8 C(3,vector<TElem>(3,0));
		C[2][0]=2;
		C[2][1]=2;	
		gen.push_back(C); 		
   }else if(ID==200){//R8_25是其子环
		m_r=new ZmodnZ(1,8);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,4));		
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=2;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=2;
		A[1][3]=2; 
		A[2][0]=0;
		A[2][1]=2;
		A[2][2]=2;
		A[2][3]=0;
		A[3][0]=2;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=2;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==204){//R8_25是其子环
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,2));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;		
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==206){	 //R4_1×R4_4=R16_206
		m_r=new ZmodnZ(1,8);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=2;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=4;
		B[1][1]=4; 
		C[2][2]=0;
		C[2][3]=0;
		C[3][2]=4;
		C[3][3]=0;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==212){//R8_25是其子环
		m_r=new ZmodnZ(2,8);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,2));		
		A[0][0]=0;
		A[0][1]=2;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A); 
		gen.push_back(B);
		gen.push_back(C);	
   }else if(ID==214){
		m_r=FiniteRing::newR8(14);
		m_n=3;
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=2;
		A[1][1]=4;
		B[2][2]=5;		
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==219){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,2));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=2;
		A[1][1]=2;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=2;
		A[2][1]=2;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;
		gen.push_back(A); 
		gen.push_back(B);
	}else if(ID==231){//R16_231
		m_r=new ZmodnZ(1,4);
		m_n=3;
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		MATRIXi8 C(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		B[0][0]=2;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=2;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=0;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=0;
		C[2][1]=0;
		C[2][2]=2;
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
   }else if(ID==233){
		m_r=new ZmodnZ(1,4);		
		m_n=3;
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		MATRIXi8 C(3,vector<TElem>(3,0));					
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=3;
		A[1][1]=0;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=0;
		C[2][2]=2;		
		gen.push_back(A);
		gen.push_back(B);				
		gen.push_back(C);		
   }else if(ID==238){	 
		m_r=new ZmodnZ(1,4);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));	
		A[0][0]=2;
		A[0][1]=2;
		A[0][2]=1;
		A[1][0]=2;
		A[1][1]=2;
		A[1][2]=2;
		A[2][0]=2;
		A[2][1]=2;
		A[2][2]=2;
		B[0][0]=2;
		B[0][1]=2;
		B[0][2]=2;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=2;  
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==251){	
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0)); 
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=2;
		A[1][3]=2; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=2;
		A[2][3]=0;
		A[3][0]=2;
		A[3][1]=2;
		A[3][2]=0;
		A[3][3]=1;	
		gen.push_back(A);
   }else if(ID==252){
		m_r=new ZmodnZ(1,4);
		m_n=3;
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));		
		MATRIXi8 C(3,vector<TElem>(3,0));				
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=2;
		B[0][0]=2;
		B[0][1]=0;
		B[1][0]=3;
		B[1][1]=0;
		C[2][2]=2;			
		gen.push_back(A);
		gen.push_back(B); 
		gen.push_back(C);		
   }else if(ID==257){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=2;
		A[1][0]=1;
		A[1][1]=2;
		A[1][2]=2;
		A[2][0]=2;
		A[2][1]=2;
		A[2][2]=0;		
		B[0][0]=2;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=2;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B); 	   
   }else if(ID==258){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=2;
		A[0][2]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=2;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=2;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=2;
		B[2][1]=2;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B); 
   }else if(ID==259){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=2;
		A[0][2]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=2;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=2;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==260){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		A[0][0]=2;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=2;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=3;
		A[2][2]=2;
		A[2][3]=3;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=2;
		A[3][3]=0;
		gen.push_back(A); 	
   }else if(ID==261){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=2;
		B[1][2]=0;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B); 
   }else if(ID==262){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=2;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=2;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B);  		
   }else if(ID==263){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=2;		
		B[0][0]=2;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B); 	
   }else if(ID==264){
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=3;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;		
		B[0][0]=2;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=2;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==265){//R8_25是其子环
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=2;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==266){
		m_r=new ZmodnZ(1,4);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=2;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==267){
		m_r=new ZmodnZ(1,4);
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=3;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=3;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=1; 
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		A[2][3]=2;
		A[3][0]=3;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[1][3]=2;
		B[2][0]=2;
		B[2][1]=0;
		B[2][2]=2;
		B[2][3]=2;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;	   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==268){	//R8_25是其子环   
		m_r=new ZmodnZ(1,4);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));	
	    MATRIXi8 B(3,vector<TElem>(3,2));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=2;
		A[2][1]=0;
		A[2][2]=2;		
		gen.push_back(A);  
		gen.push_back(B); 
   }else if(ID==269){
		m_r=new ZmodnZ(1,4);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));	   
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=3;
		A[2][1]=2;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=2;
		A[3][1]=1;
		A[3][2]=2;
		A[3][3]=0;  
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=2;
		B[2][1]=2;
		B[2][2]=2;
		B[2][3]=2;
		B[3][0]=2;
		B[3][1]=2;
		B[3][2]=2;
		B[3][3]=2;	   
		gen.push_back(A);
		gen.push_back(B); 
   }else if(ID==270){
		m_r=new ZmodnZ(1,4);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));	   
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=2;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=2;
		A[2][3]=2;
		A[3][0]=0;
		A[3][1]=3;
		A[3][2]=0;
		A[3][3]=2;  
		B[0][0]=2;
		B[0][1]=2;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=2;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=3;
		B[3][2]=2;
		B[3][3]=0;	   
		gen.push_back(A);
		gen.push_back(B); 				
    }else if(ID>280 && ID<=390){  
 	    return initR16_2(ID);
	}else if(ID==0){	
 	    initR16_2(380);
        return true;    		
   }else{
       return false; 
   }
   m_flag=1;
   m_Set=FR(m_r,gen);  
   return true;    
}

bool Mnr::initR16_2(int ID){
   vector<MATRIXi8> gen;     
   if(ID==0){	
 	    initR16_2(380);
        return true; 
	}else if(ID==284){//R16_284
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=1;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=1;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==285){//R16_285
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[0][3]=1;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		B[2][3]=1;
		B[3][0]=0;
		B[3][1]=1;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A);
		gen.push_back(B);
    }else if(ID==296){
		Mnr* r=new Mnr();
		r->initR8(45);
		m_r=r;	
		m_n=2;
		MATRIXi8 A(2,vector<TElem>(2,0));
		MATRIXi8 B(2,vector<TElem>(2,0));
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[0][0]=0;
		B[0][1]=2;
		B[1][1]=0;
		B[1][1]=2;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==297){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=0;  
		gen.push_back(A);
		gen.push_back(B);  
		MATRIXi8 C(3,vector<TElem>(3,0));
		C[2][2]=1;	
		gen.push_back(C);
   }else if(ID==298){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));	
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;  
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=1;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=1;
		B[3][2]=0;
		B[3][3]=0;	
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==301){	 //R4_4×R4_4=R16_301
		m_r=new ZmodnZ(1,8);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));
		MATRIXi8 D(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=4;
		A[1][1]=4;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=4;
		B[1][1]=0; 
		C[2][2]=0;
		C[2][3]=0;
		C[3][2]=4;
		C[3][3]=4;
		D[2][2]=0;
		D[2][3]=0;
		D[3][2]=4;
		D[3][3]=0; 		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
		gen.push_back(D);	
   }else if(ID==303){	 //R4_4×R4_5=R16_303
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));	
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=0; 
		C[2][2]=0;
		C[2][3]=1;
		C[3][2]=0;
		C[3][3]=3;	
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);	
   }else if(ID==304){	 //R4_5×R4_5=R16_304
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=0;
		B[3][3]=3;		
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==305){	 //R4_4×R4_6=R16_305
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=0; 
		C[2][2]=0;
		C[2][3]=1;
		C[3][2]=0;
		C[3][3]=2;	
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==306){	 //R4_5×R4_6=R16_306
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=0;
		B[3][3]=2;		
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==307){	 //R4_4×R4_10=R16_307
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));
		MATRIXi8 D(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=0; 
		C[2][2]=0;
		C[2][3]=0;
		C[3][2]=1;
		C[3][3]=1;
		D[2][2]=1;
		D[2][3]=0;
		D[3][2]=0;
		D[3][3]=1; 		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
		gen.push_back(D);		
	}else if(ID==309){//R16_309
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A);
		gen.push_back(B); 
	}else if(ID==310){//R16_310
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=1;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A);
		gen.push_back(B); 		
   }else if(ID==311){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=1;   
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==313){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;  
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==314){//R16_314
		Mnr *F4=new Mnr();
		F4->initF(2);
		m_r=F4;
		m_n=2;
		MATRIXi8 A(2,vector<TElem>(2,0));
		MATRIXi8 B(2,vector<TElem>(2,0));
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==315){	 //R4_5×R4_9=R16_315
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=1;
		B[3][3]=0;		
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==316){	 //R4_6×R4_9=R16_316
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=1;
		A[1][1]=0; 
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=0;
		B[3][3]=2;		
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==319){	 //R4_5×R4_10=R16_319
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=1;
		B[3][3]=1; 
		C[2][2]=1;
		C[2][3]=0;
		C[3][2]=0;
		C[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
   }else if(ID==320){	 //R4_6×R4_10=R16_320
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1; 
		C[2][2]=0;
		C[2][3]=1;
		C[3][2]=0;
		C[3][3]=2;	
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==323){	 //R4_9×R4_10=R16_323
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));	
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1; 
		C[2][2]=0;
		C[2][3]=1;
		C[3][2]=1;
		C[3][3]=0;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
   }else if(ID==324){	 //R4_4×R4_11=R16_324
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[0][0]=0;
		B[0][1]=0;
		B[1][0]=1;
		B[1][1]=0; 
		C[2][2]=0;
		C[2][3]=1;
		C[3][2]=1;
		C[3][3]=1;	
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==325){	 //R4_5×R4_11=R16_325
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=1;
		B[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==326){	 //R4_6×R4_11=R16_326
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=1;
		A[1][0]=0;
		A[1][1]=2;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=1;
		B[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==329){//R2_1×R8_45=R16_329
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=0;
		B[3][3]=3; 
		C[2][2]=1;
		C[2][3]=0;
		C[3][2]=3;
		C[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
   }else if(ID==331){
		m_r=new ZmodnZ(1,2);
		m_n=6;
		MATRIXi8 A(6,vector<TElem>(6,0));
		MATRIXi8 B(6,vector<TElem>(6,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=0; 
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=0; 
		B[5][4]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==332){
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;   
		C[3][3]=1; 		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==333){//R2_1×R8_31=R16_333
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=1;
		B[3][3]=0; 
		C[2][2]=3;
		C[2][3]=0;
		C[3][2]=0;
		C[3][3]=3;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);	
   }else if(ID==334){//R2_1×R8_32=R16_334
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=1;
		B[3][3]=3; 
		C[2][2]=3;
		C[2][3]=0;
		C[3][2]=0;
		C[3][3]=3;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==338){//R2_2×R8_31=R16_338
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=1;
		B[3][3]=0; 
		C[2][2]=3;
		C[2][3]=0;
		C[3][2]=0;
		C[3][3]=3;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);	
   }else if(ID==339){//R2_2×R8_32=R16_339
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=1;
		B[3][3]=3; 
		C[2][2]=3;
		C[2][3]=0;
		C[3][2]=0;
		C[3][3]=3;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==340){	//R2_2×R8_36=R16_340
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=0;
		B[3][3]=1; 
		C[2][2]=0;
		C[2][3]=3;
		C[3][2]=3;
		C[3][3]=0;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
	}else if(ID==341){//R16_341
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==342){//R2_2×R8_39=R16_342
		m_r=new ZmodnZ(1,2);
		m_n=5;		   
		MATRIXi8 A(5,vector<TElem>(5,0));
		MATRIXi8 B(5,vector<TElem>(5,0));
		MATRIXi8 C(5,vector<TElem>(5,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		C[4][4]=1;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
   }else if(ID==343){//R2_1×R8_28=R16_343
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=0;
		B[3][2]=0;
		B[3][3]=3; 
		C[2][2]=0;
		C[2][3]=0;
		C[3][2]=1;
		C[3][3]=0;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
	}else if(ID==344){//R16_344
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=0;
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==345){//R2_1×R8_33=R16_345
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=3;
		B[3][3]=0; 	
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==346){//R2_2×R8_33=R16_346
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=1;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=3;
		B[3][3]=0; 	
		gen.push_back(A);
		gen.push_back(B);		
	}else if(ID==347){//R16_347
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=1;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=1;
		B[1][0]=1;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A);
		gen.push_back(B);	
   }else if(ID==348){//R2_1×R8_46=R16_348
		M2r *I4=new M2r();
		I4->initI(2);
		m_r=I4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=0;
		A[1][1]=3;
		B[2][2]=0;
		B[2][3]=1;
		B[3][2]=2;
		B[3][3]=3; 		
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==349){//R2_1×R8_30=R16_349
		m_r=new ZmodnZ(1,2);
		m_n=5;		   
		MATRIXi8 A(5,vector<TElem>(5,0));
		MATRIXi8 B(5,vector<TElem>(5,0));
		MATRIXi8 C(5,vector<TElem>(5,0));	
		MATRIXi8 D(5,vector<TElem>(5,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=0;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=1;
		C[2][1]=0;
		C[2][2]=0;
		D[3][3]=0;		
		D[3][4]=0;	
		D[4][3]=1;		
		D[4][4]=0;			
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
		gen.push_back(D);		
   }else if(ID==350){//R2_2×R8_30=R16_350
		m_r=new ZmodnZ(1,2);
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));	
		MATRIXi8 D(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=0;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=1;
		C[2][1]=0;
		C[2][2]=0;
		D[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);		
		gen.push_back(D);					
   }else if(ID==351){// R8_43×R2_2=R16_351
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));
		MATRIXi8 D(4,vector<TElem>(4,0));	
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=1;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=0;
		C[2][1]=0;
		C[2][2]=0;
		D[3][3]=1;			
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
		gen.push_back(D);
   }else if(ID==353){
		m_r=new ZmodnZ(1,2);
		m_n=5;
		MATRIXi8 A(5,vector<TElem>(5,0));
		MATRIXi8 B(5,vector<TElem>(5,0));
		MATRIXi8 C(5,vector<TElem>(5,0));							
		MATRIXi8 D(5,vector<TElem>(5,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		C[0][0]=0;
		C[0][1]=0;
		C[0][2]=1;
		C[1][0]=0;
		C[1][1]=0;
		C[1][2]=0;
		C[2][0]=0;
		C[2][1]=0;
		C[2][2]=0;
		D[4][3]=1;			
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);	
		gen.push_back(D);		
   }else if(ID==355){
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,1));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=0; 
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=1;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=1;
		gen.push_back(A); 
		gen.push_back(B);
	}else if(ID==356){//R16_356
		m_r=new ZmodnZ(1,2);
		m_n=4;
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=1;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=1;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==357){
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=0;
		B[0][3]=1;
		B[1][0]=1;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=1;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==358){
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=0;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=1;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=1;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;
		B[2][3]=1;
		B[3][0]=0;
		B[3][1]=1;
		B[3][2]=0;
		B[3][3]=1;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==359){
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[1][3]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=1;
		B[2][3]=0;
		B[3][0]=1;
		B[3][1]=1;
		B[3][2]=1;
		B[3][3]=0;
		gen.push_back(A); 
		gen.push_back(B);			
   }else if(ID==360){
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=0;
		A[1][0]=1;
		A[1][1]=0;
		A[1][2]=0;
		A[1][3]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=1;
		A[3][2]=1;
		A[3][3]=0;
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=0;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=1;
		B[2][3]=1;
		B[3][0]=1;
		B[3][1]=1;
		B[3][2]=1;
		B[3][3]=1;
		gen.push_back(A); 
		gen.push_back(B);
	}else if(ID==361){//R16_361
		Mnr *E4=new Mnr();
		E4->initE(2);
		m_r=E4;
		m_n=2;
		MATRIXi8 A(2,vector<TElem>(2,0));
		MATRIXi8 B(2,vector<TElem>(2,0));
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==363){
		m_r=new ZmodnZ(1,2);	
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));	   
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[0][3]=1;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[1][3]=1; 
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=1;
		A[3][1]=1;
		A[3][2]=0;
		A[3][3]=0;  
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[0][3]=1;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=1;
		B[1][3]=1;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=1;
		B[2][3]=1;
		B[3][0]=1;
		B[3][1]=0;
		B[3][2]=1;
		B[3][3]=1;	   
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==367){
		m_r=new ZmodnZ(1,2);
		m_n=5; 	   
		MATRIXi8 A(5,vector<TElem>(5,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=0;
		A[0][3]=0;
		A[0][4]=1;		
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[1][3]=1;
		A[1][4]=0;		
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;
		A[2][3]=1;
		A[2][4]=0;		
		A[3][0]=1;
		A[3][1]=0;
		A[3][2]=1;
		A[3][3]=0;
		A[3][4]=0;	
		A[4][0]=1;
		A[4][1]=1;
		A[4][2]=0;
		A[4][3]=1;
		A[4][4]=1;	
		gen.push_back(A);		
   }else if(ID==368){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=1;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);		
   }else if(ID==369){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;		
		B[0][0]=0;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);		
   }else if(ID==370){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=0;
		A[2][2]=1;		
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=0;
		B[1][0]=1;
		B[1][1]=0;
		B[1][2]=1;
		B[2][0]=1;
		B[2][1]=0;
		B[2][2]=1;
		gen.push_back(A); 
		gen.push_back(B);		
   }else if(ID==371){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;		
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);			
   }else if(ID==372){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;		
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=1;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);		
   }else if(ID==373){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=0;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;		
		B[0][0]=1;
		B[0][1]=1;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);	
   }else if(ID==374){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=0;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=0;		
		B[0][0]=0;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=1;
		gen.push_back(A); 
		gen.push_back(B);		
   }else if(ID==375){
		m_r=new ZmodnZ(1,2);
		m_n=3; 	   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=0;
		A[2][1]=1;
		A[2][2]=1;		
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		gen.push_back(A); 
		gen.push_back(B);
   }else if(ID==376){
		m_r=new ZmodnZ(1,2);	
		m_n=3;		   
		MATRIXi8 A(3,vector<TElem>(3,0));
		MATRIXi8 B(3,vector<TElem>(3,0));
		A[0][0]=1;
		A[0][1]=1;
		A[0][2]=1;
		A[1][0]=1;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[1][0]=0;
		B[1][1]=1;
		B[1][2]=1;
		B[2][0]=0;
		B[2][1]=1;
		B[2][2]=1;  
		gen.push_back(A);
		gen.push_back(B);
	}else if(ID==379){//R16_379
		Mnr *E4=new Mnr();
		E4->initE(2);
		m_r=E4;
		m_n=2;
		MATRIXi8 A(2,vector<TElem>(2,0));
		MATRIXi8 B(2,vector<TElem>(2,0));
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=0;
		B[0][0]=0;
		B[0][1]=1;
		B[1][0]=0;
		B[1][1]=0;
		gen.push_back(A);
		gen.push_back(B);		
   }else if(ID==380){  
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0)); 
		MATRIXi8 B(4,vector<TElem>(4,0)); 	   
		A[0][0]=1;
		A[0][1]=0;
		A[0][2]=0;
		A[0][3]=1;		
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[1][3]=0;	
		A[2][0]=0;
		A[2][1]=0;
		A[2][2]=0;
		A[2][3]=0;
		A[3][0]=0;
		A[3][1]=0;
		A[3][2]=0;
		A[3][3]=0;	   
		B[0][0]=1;
		B[0][1]=0;
		B[0][2]=0;
		B[0][3]=0;		
		B[1][0]=0;
		B[1][1]=0;
		B[1][2]=0;
		B[1][3]=1;		
		B[2][0]=0;
		B[2][1]=0;
		B[2][2]=0;
		B[2][3]=0;
		B[3][0]=0;
		B[3][1]=0;
		B[3][2]=0;
		B[3][3]=1;		
		gen.push_back(A);
		gen.push_back(B);
   }else if(ID==382){// R8_46×R2_2=R16_382
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));	
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=0;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		B[3][3]=1;	
		gen.push_back(A);  
		gen.push_back(B); 		
   }else if(ID==386){	 //R4_10×R4_10=R16_386
		M2r *G4=new M2r();
		G4->initG(2);
		m_r=G4;
		m_n=4;		   
		MATRIXi8 A(4,vector<TElem>(4,0));
		MATRIXi8 B(4,vector<TElem>(4,0));
		MATRIXi8 C(4,vector<TElem>(4,0));
		MATRIXi8 D(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[1][0]=1;
		A[1][1]=1;
		B[0][0]=1;
		B[0][1]=0;
		B[1][0]=0;
		B[1][1]=1; 
		C[2][2]=0;
		C[2][3]=0;
		C[3][2]=1;
		C[3][3]=1;
		D[2][2]=1;
		D[2][3]=0;
		D[3][2]=0;
		D[3][3]=1; 		
		gen.push_back(A);
		gen.push_back(B);
		gen.push_back(C);
		gen.push_back(D);		
   }else if(ID==388){// R8_52×R2_2=R16_388
		m_r=new ZmodnZ(1,2);
		m_n=4; 	   
		MATRIXi8 A(4,vector<TElem>(4,0));	
		MATRIXi8 B(4,vector<TElem>(4,0));		
		A[0][0]=0;
		A[0][1]=0;
		A[0][2]=1;
		A[1][0]=0;
		A[1][1]=1;
		A[1][2]=1;
		A[2][0]=1;
		A[2][1]=1;
		A[2][2]=0;
		B[3][3]=1;	
		gen.push_back(A);  
		gen.push_back(B);
   }else{
       return false; 
   }
   m_flag=1;
   m_Set=FR(m_r,gen);  
   return true; 		
}

Mnr::Mnr(IRing* r,int n,vector<MATRIXi8>& gen){
	m_r=r;
	m_n=n;
	m_flag=0;
	m_Set=FR(r,gen);
}

string Mnr::MStr(const MATRIXi8 &t){
	string str="[";
	int n=t.size();
	for(int i=0;i<n;i++)
	{
        str+="[";
		for(int j=0;j<n;j++)
		{
			char sz[20]={0};
			sprintf(sz,"%d",t[i][j]);
			str+=sz;
			if(j<n-1)
				str+=",";
		}
		str+="]";
		if(i<n-1)
			str+=",";
	}
	str+="]";
	return str;
}

vector<MATRIXi8> Mnr::FR(IRing* r,vector<MATRIXi8>& gen){
	vector<MATRIXi8> Set;
	int n=gen[0].size();
	MATRIXi8 E(n,vector<TElem>(n,0));
	Set.push_back(E);
	for(int i=0;i<gen.size();i++)
	{
		if(!IsEqual(gen[i],E))
			Set.push_back(gen[i]);
	}
	int R=Set.size();
	int cnt=R;
	int cnt1=R;
	do{
		cnt=Set.size();
		for(int i=0;i<cnt;i++)
		{
			for(int j=0;j<cnt;j++)
			{
				MATRIXi8 IJ=mul(r,Set[i],Set[j]);
				vector<MATRIXi8>::iterator p=std::find(Set.begin(),Set.end(),IJ);
				if(p==Set.end()){
					Set.push_back(IJ);
				}
				MATRIXi8 IJ1=add(r,Set[i],Set[j]);
				p=std::find(Set.begin(),Set.end(),IJ1);
				if(p==Set.end()){
					Set.push_back(IJ1);
				}
			}
		}
		cnt1=Set.size();
	}while(cnt1>cnt);
    return Set;	
}

MATRIXi8 Mnr::add(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m)
{
    int n=t.size();
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=r->add(t[i][j],m[i][j]);
		}
	}
	return C;
}

MATRIXi8 Mnr::mul(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m)
{
    int n=t.size();
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=r->add(sum,r->mul(t[i][k],m[k][j]));
			}
			C[i][j]=sum;
		}
	}
	return C;
}

bool Mnr::nextV1(int m,vector<TElem>& v){
	int n=v.size();
	for(int i=n-1;i>=0;i--){
		if(v[i]<m-1){
			v[i]+=1;
			return true;
		}
		else if(v[i]==m-1 && i>0){
			if(v[i-1]<m-1){
				v[i-1]+=1;
				for(int j=i;j<n;j++)
					v[j]=0;
				return true;
			}
		}
	}
	return false;
}

// 调用m^(n^2)次visit
int Mnr::visitMnRm(int n,int m){
	vector<TElem> v(n*n,0);
	int cnt=0;
	do {
		++cnt;
		MATRIXi8 M(n,vector<TElem>(n,0));
		for(int k=0;k<n*n;k++){
			int i=k/n;
			int j=k%n;
			M[i][j]=v[k];
		}
		m_Set.push_back(M);
	}while(nextV1(m,v));
	return cnt;
}

int Mnr::getidx(vector<MATRIXi8> &Arr2,MATRIXi8 &Arr1){
	int N=Arr2.size();
	for(int i=0;i<N;i++){
		if(IsEqual(Arr2[i],Arr1))
			return i;
	}
	return -1;
}

bool Mnr::IsEqual(const MATRIXi8 &t,const MATRIXi8 &m){
	int nt=t.size();
	int nm=m.size();
	if(nt!=nm)
		return false;
	for(int i=0;i<nt;i++){
		for(int j=0;j<nt;j++){
			if(t[i][j]!=m[i][j])
				return false;
		}
	}
	return true;
}

void Mnr::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",size(),ID,str.c_str());
	string I1=calcI1(this);
	string I2=calcI2(this);   
	printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());	
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	if(size()<100){
		printRing(this);	
	}
	else{
	   printf("环的阶太大，不在控制台打印\n");
	}
}

int Mnr::add(int a,int b)
{
	MATRIXi8 A=m_Set[a];
	MATRIXi8 B=m_Set[b];	
    int n=m_n;
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=m_r->add(A[i][j],B[i][j]);
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int Mnr::mul(int a,int b)
{
	MATRIXi8 A=m_Set[a];
	MATRIXi8 B=m_Set[b];	
    int n=m_n;
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=m_r->add(sum,m_r->mul(A[i][k],B[k][j]));
			}
			C[i][j]=sum;
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int Mnr::size()
{
	return m_Set.size();
}

Mnr::Mnr(IRing* r,int n)
{
	m_r=r;
	m_n=n;
	int N=r->size();
	int cnt=visitMnRm(m_n,N);
	printf("cnt=%d\n",cnt);
}

string calcI2a(IRing* r){
	int IdRing(IRing* r);
	int n=r->size();
	vector<pair<int,int> > v;
   for(int i=0;i<n-1;i++){
	   int j=i+1;
		   vector<int> vi;
		   vi.push_back(i);
		   vi.push_back(j);		   
		   Subring si(r,vi);
		   int ni=si.size();
		   if(ni<n && ni>0){
			int ID=IdRing(&si);
#if 1			
			if(ID==-1 && ni==16){
				printf("i=%d,j=%d\n",i,j);
			    break;
			}
#endif
			v.push_back(make_pair(ni,ID));
		   }
   }
	std::sort(v.begin(),v.end());
	vector<tuple<int,int,int> > v1=doN2Vec(v);
	string str="[";
	for(int i=0;i<v1.size();i++)
	{
		char sz[200]={0};
		sprintf(sz,"[%d,%d,%d],",get<0>(v1[i]),get<1>(v1[i]),get<2>(v1[i]));
		str+=sz;
	}
	if(str.size()>2)
	{
		str=str.substr(0,str.size()-1);
	}
	str+="]";
	return str;
}

int g_i=0;
void findsubring(M2r *r,int n)
{
	map<pair<int,int>,pair<int,int>> M;
	int ID=0;//IdRing(r);
	srand(time(NULL));
	g_i=rand()%r->size();	
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size()-1;i++)	
	for(int j=i+1;j<r->size();j++)
	{
		//int j=i+1;
		vector<int> v;
		v.push_back(i);
		v.push_back(j);		
		Subring S1i;
		bool bn=S1i.init(r,v,16);
		if(!bn)
			continue;
		//Subring S1i(r,v);
		int ni=S1i.size();
		//if(ni!=n)
			//continue;		
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
			string str=M2r::MStr(r->m_Set[i]);
			string strj=M2r::MStr(r->m_Set[j]);				
			printf("cnt1=%d:R%d_%d->i=%d,j=%d=>%s,%s\n",cnt1,ni,ID,i,j,str.c_str(),strj.c_str());
			//string I1=calcI1(&S1i);
			//string I2=calcI2(&S1i);   
			//printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());				
		}		
		//if(ni==n && ID==-1||(ID==230||ID==232||ID==236||ID==241||ID==244||ID==246||ID==337||ID==384||ID==389||ID==390)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==31||ID==32||ID==26||ID==34||ID==39||ID==52||ID==42||ID==39||ID==40||ID==35||ID==36||ID==27||ID==22||ID==17||ID==14||ID==7)))   
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39))) 
		//if(ni==n && ni<r->size() && (ID==-1||(ID>5 && ID!=8 && ID!=10 && ID!=11 && ID!=13 && ID!=15 && ID!=16 && ID!=20 && ID!=21 && ID!=23 && ID!=24 && ID!=25 && ID!=49 && ID!=51)))	
		{		
			string strR=calcRingInvariant(&S1i);
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
			//S1i.printTable();
			break;
		}		   
	}	   	
}

void findsubring(Mnr *r,int n)
{
#define PRINT_LOG 1	
	bool bFind=false;	
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d.txt",r->size(),time(NULL));
    ofstream fout(sz);
#endif	
    string strCmd="del ";
	strCmd+=sz;
	map<pair<int,int>,pair<int,int>> M;	
	int ID=0;//IdRing(r);
	//srand(time(NULL));
	//g_i=rand()%r->size();	
	//printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size()-1;i++)		
	for(int j=i+1;j<r->size();j++)
	{
		//int j=i+1;
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		//Subring S1i(r,v);
		int ni=S1i.size();
		//if(ni!=n)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
			string str=Mnr::MStr(r->m_Set[i]);
			string strj=Mnr::MStr(r->m_Set[j]);
			printf("cnt1=%d:R%d_%d->i=%d,j=%d=>%s,%s\n",cnt1,ni,ID,i,j,str.c_str(),strj.c_str());
			//string I1=calcI1(&S1i);
			//string I2=calcI2(&S1i);   
			//printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());				
		}		
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39))) 
		//if(ID==126||ni==n && ID==-1||(ni==8 && (ID==302||ID==364||ID==365||ID==366||ID==378||ID==381||ID==383||ID==384||ID==389||ID==390)||(ID==6||ID==9||ID==12||ID==18||ID==31||ID==32||ID==26||ID==29||ID==34||ID==39||ID==40||ID==35||ID==36||ID==27||ID==22||ID==17||ID==14||ID==7)))   
		//if((ni<=32 && ID==-1)||(ni==8 && ID>5 && ID!=8 && ID!=10 && ID!=11 && ID!=13 && ID!=15 && ID!=16 && ID!=19 && ID!=20 && ID!=21 && ID!=23 && ID!=24 && ID!=25 && ID!=28 && ID!=29 && ID!=37 && ID!=41 && ID<44 && ID>51))	
		{
			string str=Mnr::MStr(r->m_Set[i]);
			string strj=Mnr::MStr(r->m_Set[j]);			
			string strR=calcRingInvariant(&S1i);
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
			//S1i.printTable();
#if PRINT_LOG			
			fout<<i<<"->"<<str<<","<<j<<"->"<<strj<<"=>";
			fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2="<<strR<<endl;
			bFind=true;
#endif
			break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring3(Mnr *r,int n)
{
#define PRINT_LOG 1	
	bool bFind=false;	
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d.txt",r->size(),time(NULL));
    ofstream fout(sz);
#endif	
    string strCmd="del ";
	strCmd+=sz;
	map<pair<int,int>,pair<int,int>> M;	
	int ID=IdRing(r);
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size()-2;i++)		
	for(int j=i+1;j<r->size()-1;j++)
	for(int k=j+1;k<r->size();k++)		
	{
		//int j=i+1;
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);	
		v.push_back(k);			
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		//Subring S1i(r,v);
		int ni=S1i.size();
		if(ni!=n)
			continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
			string str=Mnr::MStr(r->m_Set[i]);
			string strj=Mnr::MStr(r->m_Set[j]);
			string strk=Mnr::MStr(r->m_Set[k]);				
			printf("cnt1=%d:R%d_%d->i=%d,j=%d,k=%d=>%s,%s,%s\n",cnt1,ni,ID,i,j,k,str.c_str(),strj.c_str(),strk.c_str());
			//string I1=calcI1(&S1i);
			//string I2=calcI2(&S1i);   
			//printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());				
		}	
		//if(ni==n && ID==-1||(ID==230||ID==232||ID==236||ID==241||ID==244||ID==246||ID==337||ID==384||ID==389||ID==390)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39||ID==22||ID==17||ID==14||ID==7)))   
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39)))   
		{
			string str=Mnr::MStr(r->m_Set[i]);
			string strj=Mnr::MStr(r->m_Set[j]);
			string strk=Mnr::MStr(r->m_Set[k]);						
			string strR=calcRingInvariant(&S1i);			
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
			//S1i.printTable();
#if PRINT_LOG			
			fout<<i<<"->"<<str<<","<<j<<"->"<<strj<<","<<k<<"->"<<strk<<"=>";
			fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2="<<strR<<endl;
			bFind=true;
#endif
			break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring3(IRing *r,int n)
{
#define PRINT_LOG 1	
	bool bFind=false;	
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d.txt",r->size(),time(NULL));
    ofstream fout(sz);
#endif	
    string strCmd="del ";
	strCmd+=sz;
	map<pair<int,int>,pair<int,int>> M;	
	int ID=0;//IdRing(r);
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size()-2;i++)		
	for(int j=i+1;j<r->size()-1;j++)
	for(int k=j+1;k<r->size();k++)		
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);	
		v.push_back(k);			
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		int ni=S1i.size();
		if(ni!=n)
			continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){			
			printf("cnt1=%d:R%d_%d->i=%d,j=%d,k=%d\n",cnt1,ni,ID,i,j,k);			
		}	
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39)))   
		{					
			string strR=calcRingInvariant(&S1i);			
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
#if 0//PRINT_LOG			
			fout<<i<<","<<j<<"=>";
			fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2="<<strR<<endl;
			bFind=true;
#endif
			break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring(IRing *r,int n)
{
#define PRINT_LOG 1	
	bool bFind=false;	
	int ID=0;//IdRing(r);
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d_%d.txt",r->size(),ID,time(NULL));
    ofstream fout(sz);
#endif	
    string strCmd="del ";
	strCmd+=sz;
	map<pair<int,int>,pair<int,int>> M;		
	srand(time(NULL));
	g_i=rand()%r->size();
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);	
	for(int i=g_i;i<r->size()-1;i++)		
	for(int j=i+1;j<r->size();j++)
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);
		Subring S1i;
		bool bn=S1i.init(r,v,16);
		if(!bn)
			continue;
		//Subring S1i(r,v);
		int ni=S1i.size();
		//if(ni!=16)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
			printf("cnt1=%d:R%d_%d->i=%d,j=%d\n",cnt1,ni,ID,i,j);
			//string I1=calcI1(&S1i);
			//string I2=calcI2(&S1i);   
			//printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());				
		}		
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39))) 
		{		
			string strR=calcRingInvariant(&S1i);
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
			//S1i.printTable();
#if PRINT_LOG			
			fout<<i<<","<<j<<"=>";
			fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2="<<strR<<endl;
			bFind=true;
#endif
			//break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring1(IRing *r)
{
	set<pair<int,int>> M;
	set<string> S;	
	int ID=0;//IdRing(r);
	//srand(time(NULL));
	//g_i=rand()%r->size();
	//printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size();i++)			
	{
		vector<int> v;
		v.push_back(i);				
		Subring S1i;
		bool bn=S1i.init(r,v,16);
		if(!bn)
			continue;
		int ni=S1i.size();
		//if(ni!=16 && ni!=8)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(ni,ID));
		int cnt1=M.size();
		if(cnt1>cnt){		
			printf("cnt1=%d:R%d_%d->i=%d\n",cnt1,ni,ID,i);			
		}	
		if((ni==16 && ID==-1)||(ni==8 && (ID==6||ID==9||ID==12||ID==18||ID==39)))   
		{					
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){		
				printf("i=%d->R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",i,ni,ID,strR.c_str());
			}
			S.insert(strR);	
		}		   
	}
}

void findquotientring(IRing *r,int n)
{
#define PRINT_LOG 1	
	bool bFind=false;	
	int ID=0;//IdRing(r);
	printf("R%d_%d\n",r->size(),ID);
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d_%d.txt",r->size(),ID,time(NULL));
    ofstream fout(sz);
#endif	
    string strCmd="del ";
	strCmd+=sz;
	map<pair<int,int>,pair<int,int>> M;	
	for(int i=0;i<r->size()-1;i++)		
    //int i=0;
	for(int j=i+1;j<r->size();j++)
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);
		Subring S1i0;
		bool bn=S1i0.init(r,v,r->size()/n);
		if(!bn)
			continue;
		if(S1i0.m_Set.size()!=r->size()/n)
			continue;
		vector<int> v0=v;
		v=S1i0.m_Set;
		int iret1=IsIdeal(r,v); 
		if(iret1!=1)
			continue;
		quotientRing S1i(r,v);
		int ni=S1i.size();	
		int IDr=ID;
		bool b=IsRing(&S1i);
		if(!b){
			continue;
		}			
		int ID=IdRing(&S1i);	
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){		
			int IDr0=IdRing(&S1i0);
			printf("cnt1=%d:R%d_%d/R%d_%d=R%d_%d->i=%d,j=%d\n",cnt1,r->size(),IDr,S1i0.size(),IDr0,ni,ID,i,j);
            if(ID>271 && ID<284){
				printRing0(&S1i,ID);
			}				
		}	
		if(ni==16 && ID==-1) 	
		{		
			string strR=calcRingInvariant(&S1i);
			printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2=%s\n",ni,ID,strR.c_str());				
			//S1i.printTable();
#if PRINT_LOG			
			fout<<i<<","<<j<<"=>";
			fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2="<<strR<<endl;
			bFind=true;
#endif
			//break;
		}
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("商环表示已输出到文件%s\n",sz);
#endif	
}

IRing* newR16R2(int ij)
{
	int i=(ij-1)%390+1;
	int j=(ij-1)/390+1;
	IRing* ri=NULL;
	M2r* r16=new M2r;
	bool b=r16->initR16(i);
	if(b){
	   ri=r16;
	}else{
		delete r16;
		r16=NULL;
		Mnr* r16a=new Mnr;
		bool ba=r16a->initR16(i);
		if(ba){
		   ri=r16a;
		}	
		else{
			delete r16a;
			r16a=NULL;
		}				
	}	
	if(!ri)
		return NULL;
	if(j!=1 && j!=2){
		delete ri;
		return NULL;		
	}
    IRing* rj=new ZmodnZ(3-j,2*(3-j));
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR8R2(int ij)
{
	int i=(ij-1)%52+1;
	int j=(ij-1)/52+1;
	IRing* ri=NULL;
	M2r* r8=new M2r;
	bool b=r8->initR8(i);
	if(b){
	   ri=r8;
	}else{
		delete r8;
		r8=NULL;
		Mnr* r8a=new Mnr;
		bool ba=r8a->initR8(i);
		if(ba){
		   ri=r8a;
		}	
		else{
			delete r8a;
			r8a=NULL;
		}				
	}	
	if(!ri)
		return NULL;
	if(j!=1 && j!=2){
		delete ri;
		return NULL;		
	}
    IRing* rj=new ZmodnZ(3-j,2*(3-j));
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR8(int ij)
{
    if(ij<1||ij>52)
		ij=1;
	int i=(ij-1)%52+1;
	IRing* ri=NULL;
	M2r* r8=new M2r;
	bool b=r8->initR8(i);
	if(b){
	   ri=r8;
	}else{
		delete r8;
		r8=NULL;
		Mnr* r8a=new Mnr;
		bool ba=r8a->initR8(i);
		if(ba){
		   ri=r8a;
		}	
		else{
			delete r8a;
			r8a=NULL;
		}				
	}	
	return ri;
}

int main(int argc, char* argv[])
{ 
	if(argc>1)
		g_i=atoi(argv[1]);
	
	if(0){	
	   for(int i=1;i<=104;i++)
	   {
		   IRing* r=newR8R2(i);
		   if(r){
			   int ID=IdRing(r);
			   printf("R8R2_%d=R8_%d×R2_%d=R16_%d\n",i,(i-1)%52+1,(i-1)/52+1,ID);
			   //findsubring(r,8);	   
			   //findquotientring(r,8);
			   delete r;
			   r=NULL;
		   }
	   }
	   return 0;
	}   
	
	if(0){
		ZmodnZ r(1,2);
		//M2r r4;
		//r4.initJ(2);
		//IRing* r8=newR8(g_i);
		//M2r m2r(r8);
		Mnr m2r(&r,4);
		findsubring(&m2r,16);	   
		findquotientring(&m2r,16);
		//findsubring(&m2r,8);	   
		findquotientring(&m2r,8);
		return 0;
	}	
	
	if(argc>2){
		set<int> vID;
		for(int i=1;i<=390;i++){
		   M2r r16;
		   bool b=r16.initR16(i);
		   if(b){
			   int ID=IdRing(&r16);			   
			   bool b=true;//IsRing(&r16);
			   //const char* sz=b?"":"不是环";
			   //printf("%d:R16_%d%s\n",i,ID,sz);
			   //findquotientring(&r16,8);
			   //findsubring(&r16,8);
			   /**/
				string I1=calcI1(&r16);
				string I2=calcI2(&r16);
				char sz[20]={0};	
				sprintf(sz,"%d",ID);			
				string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+sz+"));";
				printf("%s\n",strI1I2.c_str());	
				
			    vID.insert(ID);
		   }else{
				Mnr r16a;
				bool ba=r16a.initR16(i);
				if(ba){
				   int ID=IdRing(&r16a);
				   bool b=true;//IsRing(&r16);
				   //const char* sz=b?"":"不是环";
				   //printf("%d:R16_%d%s\n",i,ID,sz);
				   //findquotientring(&r16a,8);
				   //findsubring3(&r16a,8);
				   /**/
					string I1=calcI1(&r16a);
					string I2=calcI2(&r16a);
					char sz[20]={0};	
					sprintf(sz,"%d",ID);			
					string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+sz+"));";
					printf("%s\n",strI1I2.c_str());	
					
					vID.insert(ID);
				}else{
                   IRing* r=FiniteRing::newR16(i);
				   if(r){
					   int ID=IdRing(r);
					   bool b=true;//IsRing(r);
					   //const char* sz=b?"":"不是环";
					   //printf("%d:R16_%d%s\n",i,ID,sz);
					   //findquotientring(r,8);
					   //findsubring3(r,8);
					   /**/
						string I1=calcI1(r);
						string I2=calcI2(r);
						char sz[20]={0};	
						sprintf(sz,"%d",ID);			
						string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+sz+"));";
						printf("%s\n",strI1I2.c_str());	

						vID.insert(ID);
				   }
				}					
		   }
		}
		for(auto it=vID.begin();it!=vID.end();it++){
			printf("%d,",*it);
		}
		printf("\n");
		// 129种16阶可分解环
		int IDs[]={6,9,10,11,12,13,14,15,103,104,107,112,113,116,200,203,204,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,380,382,384,386,387,388,389};	
        int cnt=sizeof(IDs)/sizeof(IDs[0]);
		printf("%d,%d\n",vID.size(),cnt);
		for(int i=0;i<cnt;i++){
			if(vID.find(IDs[i])==vID.end()){
				printf("%d,",IDs[i]);
			}			
		}
		printf("\n");		
	}
	
	if(argc>2){
		set<int> vID;
		for(int i=1;i<=52;i++){
		   M2r r8;
		   bool b=r8.initR8(i);
		   if(b){
			   int ID=IdRing(&r8);
			   printf("%d:R8_%d\n",i,ID);
			   vID.insert(ID);
		   }else{
				Mnr r8a;
				bool ba=r8a.initR8(i);
				if(ba){
				   int ID=IdRing(&r8a);
				   printf("%d:R8_%d\n",i,ID);
				   vID.insert(ID);
				}				
		   }
		}
		for(auto it=vID.begin();it!=vID.end();it++){
			printf("%d,",*it);
		}
		printf("\n");
	}	
	
	if(0){
	   Mnr r16;
	   r16.initR8();
	   //r16.printTable(); 
	   findsubring3(&r16,16);
	}
	
	if(1){
		{
			IRing* r=FiniteRing::newR16(249);
			int ID=IdRing(r);
			bool b=IsRing(r);
			const char* sz=b?"":"不是环";   
			printf("R%d_%d%s\n",r->size(),ID,sz);	 
		}		   
	   Mnr r16;
	   r16.initR8();
	   if(r16.size()<=16){
		   int ID=IdRing(&r16);
		   bool b=IsRing(&r16);
		   const char* sz=b?"":"不是环";   
		   printf("R%d_%d%s\n",r16.size(),ID,sz);
	   }else{
		   
	   }
	   //r16.printTable();	 
	   findquotientring(&r16,16);
	   findsubring(&r16,16);  	   
	   //findsubring(&r16,8);	   
	   //findquotientring(&r16,8);	   
	}
   
   return 0;
}