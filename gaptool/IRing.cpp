#define R16_I1I2
#include"quotientRing.h"
#include <ctime>
#include <fstream>
#include <set>

std::vector<string> split( const std::string& str, const std::string& delims, unsigned int maxSplits = 0)
{
	std::vector<string> ret;
	unsigned int numSplits = 0;
	// Use STL methods 
	size_t start, pos;
	start = 0;
	do 
	{
		pos = str.find_first_of(delims, start);
		if (pos == start)
		{
			// Do nothing
			start = pos + 1;
		}
		else if (pos == std::string::npos || (maxSplits && numSplits == maxSplits))
		{
			// Copy the rest of the std::string
			ret.push_back( str.substr(start) );
			break;
		}
		else
		{
			// Copy up to delimiter
			ret.push_back( str.substr(start, pos - start) );
			start = pos + 1;
		}
		// parse up to next real data
		start = str.find_first_not_of(delims, start);
		++numSplits;
	} while (pos != std::string::npos);
	return ret;
}

// “环表示数据表”结点
class CRingDataItem
{
public:
	CRingDataItem() 
	{
		m_n=0;
		m_ID=0;
		m_n0=0;
		m_n1=0;
		m_n2=0;
        m_mstr="";		
	}

	int m_n;
	int m_ID;	
	int m_n0;
	int m_n1;
	int m_n2;
	string m_mstr;
};

map<pair<int,int>,CRingDataItem> g_mapRingDataCache;

const CRingDataItem * Find(int n,int ID)
{
	map<pair<int,int>,CRingDataItem>::const_iterator it;
	it = g_mapRingDataCache.find(make_pair(n,ID));
	if( it != g_mapRingDataCache.end() )
		return &(it->second);
	return NULL;
}

// “环表示数据表”缓冲
int LoadData(char * pszFilePath)		//“从文件中读取数据”
{
	if( !g_mapRingDataCache.empty() )
		return 2;//2已经载入数据了

	FILE * fp =fopen(pszFilePath, "r");
	if( fp == NULL )
		return 1;//1打开文件失败

	char sz[200] = {0};
	CRingDataItem item;
	int n = 0;
	n = fscanf(fp, "%s", sz);
	while( n > 0 && !feof(fp) )
	{
		n = fscanf(fp, "%d,%d,%d,%d,%d,%s\n", &item.m_n, &item.m_ID, &item.m_n0,&item.m_n1, &item.m_n2, sz);
		if( n > 0 )
		{
			item.m_mstr = sz;
			g_mapRingDataCache.insert( make_pair(make_pair(item.m_n,item.m_ID),item));
		}
	}
	fclose(fp);
	return 0;//0成功
}

int g_a=1;

// 有限循环环mZ/nZ，这里限制m|n
struct ZmodnZ:public IRing
{
public:
	// 静态函数
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	ZmodnZ(int m,int n);
	// 析构函数
	~ZmodnZ(){};	
	// 成员函数	
	// 成员变量
	int m_m;
	int m_n;// 运算为模n加法和模n乘法	
};

void ZmodnZ::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",size(),ID,str.c_str());	
	//string S1=calS1(this,true);
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	//printRing(this);	
}

int ZmodnZ::add(int a,int b)
{
	return ((m_m*a+m_m*b)%m_n)/m_m;
}

int ZmodnZ::mul(int a,int b)
{
	return ((m_m*a*m_m*b)%m_n)/m_m;	
}

int ZmodnZ::size()
{
	return m_n/m_m;
}

ZmodnZ::ZmodnZ(int m,int n)
{
	m_m=m;
	m_n=n;
}

// 有限可分解环
struct DecompositionRing:public IRing
{
public:
	//  静态函数  
	static vector<vector<int> > DirectProduct(const vector<vector<int>> &A,const vector<vector<int>> &B);   
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	DecompositionRing();
	DecompositionRing(IRing *r1,IRing *r2);
	// 析构函数
	~DecompositionRing();
	// 成员函数 
	template<class T> vector<vector<int> > getTable(T *obp,int n,int(T::*p)(int,int));
	void initF(int n);// R4_6、R9_6所在的有限环序列,
	// 成员变量  
	IRing *m_r1;
	IRing *m_r2;
	vector<vector<int> > m_Add;
	vector<vector<int> > m_Mul;
	int m_flag;// DecompositionRing对象析构时是否释放m_r1、m_r2指向的内存
};

DecompositionRing::DecompositionRing(){
	m_r1=NULL;
	m_r2=NULL;
	m_flag=0;	
}

DecompositionRing::~DecompositionRing(){
	if(m_flag==1 && m_r1!=NULL){
		delete m_r1;
		m_r1=NULL;
	}	
	if(m_flag==1 && m_r2!=NULL){
		delete m_r2;
		m_r2=NULL;
	}
}

void DecompositionRing::initF(int n){
	m_r1=new ZmodnZ(n,n*n);
	m_r2=new ZmodnZ(1,n); 
	vector<vector<int> > Add1=getTable(m_r1,m_r1->size(),&IRing::add);
	vector<vector<int> > Add2=getTable(m_r2,m_r2->size(),&IRing::add);
	m_Add=DirectProduct(Add1,Add2);
	vector<vector<int> > Mul1=getTable(m_r1,m_r1->size(),&IRing::mul);
	vector<vector<int> > Mul2=getTable(m_r2,m_r2->size(),&IRing::mul);
	m_Mul=DirectProduct(Mul1,Mul2);
}

template<class T>
vector<vector<int> > DecompositionRing::getTable(T *obp,int n,int(T::*p)(int,int))
{
	vector<vector<int> > vv(n,vector<int>(n));
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
		{
			vv[i][j]=(obp->*p)(i,j);	
		}
	return vv;
}

vector<vector<int> > DecompositionRing::DirectProduct(const vector<vector<int>> &A,const vector<vector<int>> &B)
{
	vector<vector<int> > C;
	int nA=A.size();
	int nB=B.size();
	int n=nA*nB;

	for(int a=0;a<n;a++)
	{
		vector<int> iRow;
		for(int b=0;b<n;b++)
		{
			int aj=a%nB;
			int ai=a/nB;
			int bj=b%nB;
			int bi=b/nB;
			int i=A[ai][bi];
			int j=B[aj][bj];
			int c=nB*i+j;
			iRow.push_back(c);
		}
		C.push_back(iRow);
	}
	return C;
}

DecompositionRing::DecompositionRing(IRing *r1,IRing *r2)
{
    m_r1=r1;
	m_r2=r2;
	vector<vector<int> > Add1=getTable(r1,r1->size(),&IRing::add);
	vector<vector<int> > Add2=getTable(r2,r2->size(),&IRing::add);
	m_Add=DirectProduct(Add1,Add2);
	vector<vector<int> > Mul1=getTable(r1,r1->size(),&IRing::mul);
	vector<vector<int> > Mul2=getTable(r2,r2->size(),&IRing::mul);
	m_Mul=DirectProduct(Mul1,Mul2);
}

void DecompositionRing::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",size(),ID,str.c_str());
	//printRing(this);	
}

int DecompositionRing::add(int a,int b)
{
	return m_Add[a][b];
}

int DecompositionRing::mul(int a,int b)
{
	return m_Mul[a][b];	
}

int DecompositionRing::size()
{
	return m_Add.size();
}

// 直接从凯莱表构造一个有限环
struct FiniteRing:public IRing
{
public:
	//  静态函数  
	static IRing* newR8(int i);
	static IRing* newR16(int i);	
	static IRing* newR32(int i);
	static IRing* newR27(int i);	
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	FiniteRing(int n,int* a,int* m,int delt);
	// 析构函数
	~FiniteRing();	
	// 成员变量  
	int m_n; 
	int* m_Add;
	int* m_Mul; 
	int m_delt; 
	int m_flag;// FiniteRing对象析构时是否释放m_Add、m_Mul指向的内存	
};

void FiniteRing::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",size(),ID,str.c_str());
	//printRing(this);	
}

int FiniteRing::add(int a,int b)
{
	int c=*(m_Add+a*m_n+b);
	return c-m_delt;
}

int FiniteRing::mul(int a,int b)
{
	int c=*(m_Mul+a*m_n+b);
	return c-m_delt;
}

int FiniteRing::size()
{
	return m_n;
}

FiniteRing::FiniteRing(int n,int* a,int* m,int delt)
{
	m_n=n;
	m_Add=a;
    m_Mul=m;
    m_delt=delt;	
}

FiniteRing::~FiniteRing(){
	if(m_flag==1 && m_Add!=NULL){
		delete m_Add;
		m_Add=NULL;
	}	
	if(m_flag==1 && m_Mul!=NULL){
		delete m_Mul;
		m_Mul=NULL;
	}		
}

#if 1//def PARSE_RING_FILE

vector<char> lof(const char *fn)
{
	vector<char> ret;
	FILE *fp;
	int i=0;
	char ch=0;
	if((fp=fopen(fn, "rb"))!=NULL)
	{
		fseek(fp, 0, SEEK_SET); 
		while (ch!= EOF) 
		{
			i++; 
			ch = fgetc(fp);
			ret.push_back(ch);
		}; 
		fclose(fp);
	}
	if(ret.size()>0 && ret[ret.size()-1]==EOF)
		ret.pop_back();
	return ret; 
}

vector<char> lof2(const char *fn)
{
	vector<char> ret;
	FILE *fp;
	int i=0;
	char ch=0;
        int flag=0;//0:有效数据,1:注释开始,2:注释结束
	if((fp=fopen(fn, "rb"))!=NULL)
	{
		fseek(fp, 0, SEEK_SET); 
		while (ch!= EOF) 
		{
	           ch = fgetc(fp);
		   if (ch!='[' && ch!=']' && (flag==0||flag==2)) 
		   {
			i++; 
			ret.push_back(ch);
                        flag=0;
		   } 
                   else
                   {
                        if(ch=='[')
                        {
                          flag=1;
                        }
                        else if(ch==']')
                        {
                          flag=2;
                        }  
                   }                      
		}; 
		fclose(fp);
	}
	if(ret.size()>0 && ret[ret.size()-1]==EOF)
		ret.pop_back();
	return ret;
}

vector<char> CharArrToNormal(const vector<char>& vec)
{
	vector<char> ret;
	int n=vec.size();
	for(int i=0;i<n;i++)
	{
		if(vec[i]==32||vec[i]==13||vec[i]==10)
		{
			if(ret.size()>0 && ret[ret.size()-1]!=',')
				ret.push_back(',');
		}
		else
		{
			ret.push_back(vec[i]);
		}
	}
	return ret;
}

string CharArrToStr(const vector<char>& vec)
{
	string str;
	int n=vec.size();
	for(int i=0;i<n;i++)
	{
		str.push_back(vec[i]);
	}
	return str;
}

vector<int> atoV1(const char* strMtx,int k=1,int idx=0)
{
	vector<int> vMtx;
	vector<int> iAll;
	if(strMtx!=0)
	{
		vector<string> All=split(strMtx,",");
		for(int i=0;i<All.size();i++)
		{
			int iElem=atoi(All[i].c_str());
			iAll.push_back(iElem);
		}
	}
	int n=iAll.size()/k;
	int n1=(int)sqrtf(n);
	if(n1*n1==n)
	{
		for(int k=0;k<n;k++)
		{
			int i=k/n1;
			int j=k%n1;
			int iElem=iAll[i*n1+j+idx*n];
			vMtx.push_back(iElem);
		}
	}
	return vMtx;
}

int IsLegalTable(const vector<int> &mtx)
{
	vector<int> ret(3);
	int illegal=-1;
	int n=mtx.size();
	int n1=(int)sqrtf(n);
	bool bLegal=(n1*n1==n);
	return bLegal?n1:0;
}

FiniteRing* newRing(const char* szFileName){
	vector<char> A=lof2(szFileName);
	string strA=CharArrToStr(CharArrToNormal(A));
	vector<int> vA=atoV1(strA.c_str(),2,0);
	vector<int> vM=atoV1(strA.c_str(),2,1);

	int n=IsLegalTable(vA);
	if(n==0)
		return 0;
	int *Add=new int[n*n];
	int *Mul=new int[n*n];
    memcpy(Add,&vA[0],sizeof(int)*n*n);
    memcpy(Mul,&vM[0],sizeof(int)*n*n);	
	FiniteRing* r=new FiniteRing(n,Add,Mul,1);
	r->m_flag=1;
	return r;
}

#endif

IRing* FiniteRing::newR32(int i){
	if(i==1008)
	{
		ZmodnZ* r8=new ZmodnZ(1,8);
		ZmodnZ* r4=new ZmodnZ(1,4);
		DecompositionRing* r= new DecompositionRing(r8,r4);
		r->m_flag=1;		
		return r;
	}
#if 1//def PARSE_RING_FILE	
	char sz[100]={0};
	sprintf(sz,"R32_%d.txt",i);
	FiniteRing* r=newRing(sz);
	return r;	
#endif	
	return NULL;
}	

IRing* FiniteRing::newR27(int i){
	static int g_R27_6Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,3,5,7,8,9,10,12,13,14,15,16,18,0,19,20,21,22,4,23,24,2,25,11,26,6,17},
		{2,5,6,9,11,10,4,14,16,15,8,17,19,21,20,13,22,7,23,24,0,25,12,26,1,18,3},
		{3,7,9,12,13,14,15,18,0,19,20,21,4,1,23,24,2,25,8,11,26,5,6,16,17,10,22},
		{4,8,11,13,7,16,17,0,12,21,22,14,1,18,2,25,19,20,3,5,6,23,24,9,10,26,15},
		{5,9,10,14,16,15,8,19,21,20,13,22,23,2,24,0,25,12,11,26,1,6,18,17,3,4,7},
		{6,10,4,15,17,8,11,20,22,13,16,7,24,25,0,21,12,14,26,1,2,18,19,3,5,23,9},
		{7,12,14,18,0,19,20,4,1,23,24,2,8,3,11,26,5,6,13,16,17,9,10,21,22,15,25},
		{8,13,16,0,12,21,22,1,18,2,25,19,3,4,5,6,23,24,7,9,10,11,26,14,15,17,20},
		{9,14,15,19,21,20,13,23,2,24,0,25,11,5,26,1,6,18,16,17,3,10,4,22,7,8,12},
		{10,15,8,20,22,13,16,24,25,0,21,12,26,6,1,2,18,19,17,3,5,4,23,7,9,11,14},
		{11,16,17,21,14,22,7,2,19,25,12,20,5,23,6,18,24,0,9,10,4,26,1,15,8,3,13},
		{12,18,19,4,1,23,24,8,3,11,26,5,13,7,16,17,9,10,0,21,22,14,15,2,25,20,6},
		{13,0,21,1,18,2,25,3,4,5,6,23,7,8,9,10,11,26,12,14,15,16,17,19,20,22,24},
		{14,19,20,23,2,24,0,11,5,26,1,6,16,9,17,3,10,4,21,22,7,15,8,25,12,13,18},
		{15,20,13,24,25,0,21,26,6,1,2,18,17,10,3,5,4,23,22,7,9,8,11,12,14,16,19},
		{16,21,22,2,19,25,12,5,23,6,18,24,9,11,10,4,26,1,14,15,8,17,3,20,13,7,0},
		{17,22,7,25,20,12,14,6,24,18,19,0,10,26,4,23,1,2,15,8,11,3,5,13,16,9,21},
		{18,4,23,8,3,11,26,13,7,16,17,9,0,12,21,22,14,15,1,2,25,19,20,5,6,24,10},
		{19,23,24,11,5,26,1,16,9,17,3,10,21,14,22,7,15,8,2,25,12,20,13,6,18,0,4},
		{20,24,0,26,6,1,2,17,10,3,5,4,22,15,7,9,8,11,25,12,14,13,16,18,19,21,23},
		{21,2,25,5,23,6,18,9,11,10,4,26,14,16,15,8,17,3,19,20,13,22,7,24,0,12,1},
		{22,25,12,6,24,18,19,10,26,4,23,1,15,17,8,11,3,5,20,13,16,7,9,0,21,14,2},
		{23,11,26,16,9,17,3,21,14,22,7,15,2,19,25,12,20,13,5,6,18,24,0,10,4,1,8},
		{24,26,1,17,10,3,5,22,15,7,9,8,25,20,12,14,13,16,6,18,19,0,21,4,23,2,11},
		{25,6,18,10,26,4,23,15,17,8,11,3,20,22,13,16,7,9,24,0,21,12,14,1,2,19,5},
		{26,17,3,22,15,7,9,25,20,12,14,13,6,24,18,19,0,21,10,4,23,1,2,8,11,5,16},
	};
	static int g_R27_6Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
	};	
	static int g_R27_9Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,4,5,7,0,9,10,12,16,2,15,13,3,18,19,6,20,21,11,23,8,24,25,14,17,26,22},
		{2,5,6,11,9,10,8,13,17,15,16,14,18,19,0,20,21,22,23,1,24,25,3,4,26,7,12},
		{3,7,11,8,12,13,14,16,0,18,19,17,20,21,22,23,1,2,24,25,4,5,6,26,9,10,15},
		{4,0,9,12,1,2,15,3,20,5,6,18,7,11,23,10,8,24,13,14,16,17,26,19,21,22,25},
		{5,9,10,13,2,15,16,18,21,6,20,19,11,23,1,8,24,25,14,4,17,26,7,0,22,12,3},
		{6,10,8,14,15,16,17,19,22,20,21,0,23,1,2,24,25,3,4,5,26,7,11,9,12,13,18},
		{7,12,13,16,3,18,19,20,1,11,23,21,8,24,25,14,4,5,17,26,0,9,10,22,2,15,6},
		{8,16,17,0,20,21,22,1,3,24,25,2,4,5,6,26,7,11,9,10,12,13,14,15,18,19,23},
		{9,2,15,18,5,6,20,11,24,10,8,23,13,14,4,16,17,26,19,0,21,22,12,1,25,3,7},
		{10,15,16,19,6,20,21,23,25,8,24,1,14,4,5,17,26,7,0,9,22,12,13,2,3,18,11},
		{11,13,14,17,18,19,0,21,2,23,1,22,24,25,3,4,5,6,26,7,9,10,8,12,15,16,20},
		{12,3,18,20,7,11,23,8,4,13,14,24,16,17,26,19,0,9,21,22,1,2,15,25,5,6,10},
		{13,18,19,21,11,23,1,24,5,14,4,25,17,26,7,0,9,10,22,12,2,15,16,3,6,20,8},
		{14,19,0,22,23,1,2,25,6,4,5,3,26,7,11,9,10,8,12,13,15,16,17,18,20,21,24},
		{15,6,20,23,10,8,24,14,26,16,17,4,19,0,9,21,22,12,1,2,25,3,18,5,7,11,13},
		{16,20,21,1,8,24,25,4,7,17,26,5,0,9,10,22,12,13,2,15,3,18,19,6,11,23,14},
		{17,21,22,2,24,25,3,5,11,26,7,6,9,10,8,12,13,14,15,16,18,19,0,20,23,1,4},
		{18,11,23,24,13,14,4,17,9,19,0,26,21,22,12,1,2,15,25,3,5,6,20,7,10,8,16},
		{19,23,1,25,14,4,5,26,10,0,9,7,22,12,13,2,15,16,3,18,6,20,21,11,8,24,17},
		{20,8,24,4,16,17,26,0,12,21,22,9,1,2,15,25,3,18,5,6,7,11,23,10,13,14,19},
		{21,24,25,5,17,26,7,9,13,22,12,10,2,15,16,3,18,19,6,20,11,23,1,8,14,4,0},
		{22,25,3,6,26,7,11,10,14,12,13,8,15,16,17,18,19,0,20,21,23,1,2,24,4,5,9},
		{23,14,4,26,19,0,9,22,15,1,2,12,25,3,18,5,6,20,7,11,10,8,24,13,16,17,21},
		{24,17,26,9,21,22,12,2,18,25,3,15,5,6,20,7,11,23,10,8,13,14,4,16,19,0,1},
		{25,26,7,10,22,12,13,15,19,3,18,16,6,20,21,11,23,1,8,24,14,4,5,17,0,9,2},
		{26,22,12,15,25,3,18,6,23,7,11,20,10,8,24,13,14,4,16,17,19,0,9,21,1,2,5},
	};
	static int g_R27_9Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
		{0,3,0,0,8,3,0,3,0,8,3,0,8,3,0,8,3,0,8,3,8,3,0,8,8,3,8},
		{0,8,0,0,3,8,0,8,0,3,8,0,3,8,0,3,8,0,3,8,3,8,0,3,3,8,3},
	};	
	static int g_R27_12Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,3,5,7,8,9,10,12,13,14,15,16,18,0,19,20,21,22,4,23,24,2,25,11,26,6,17},
		{2,5,6,9,11,10,4,14,16,15,8,17,19,21,20,13,22,7,23,24,0,25,12,26,1,18,3},
		{3,7,9,12,13,14,15,18,0,19,20,21,4,1,23,24,2,25,8,11,26,5,6,16,17,10,22},
		{4,8,11,13,7,16,17,0,12,21,22,14,1,18,2,25,19,20,3,5,6,23,24,9,10,26,15},
		{5,9,10,14,16,15,8,19,21,20,13,22,23,2,24,0,25,12,11,26,1,6,18,17,3,4,7},
		{6,10,4,15,17,8,11,20,22,13,16,7,24,25,0,21,12,14,26,1,2,18,19,3,5,23,9},
		{7,12,14,18,0,19,20,4,1,23,24,2,8,3,11,26,5,6,13,16,17,9,10,21,22,15,25},
		{8,13,16,0,12,21,22,1,18,2,25,19,3,4,5,6,23,24,7,9,10,11,26,14,15,17,20},
		{9,14,15,19,21,20,13,23,2,24,0,25,11,5,26,1,6,18,16,17,3,10,4,22,7,8,12},
		{10,15,8,20,22,13,16,24,25,0,21,12,26,6,1,2,18,19,17,3,5,4,23,7,9,11,14},
		{11,16,17,21,14,22,7,2,19,25,12,20,5,23,6,18,24,0,9,10,4,26,1,15,8,3,13},
		{12,18,19,4,1,23,24,8,3,11,26,5,13,7,16,17,9,10,0,21,22,14,15,2,25,20,6},
		{13,0,21,1,18,2,25,3,4,5,6,23,7,8,9,10,11,26,12,14,15,16,17,19,20,22,24},
		{14,19,20,23,2,24,0,11,5,26,1,6,16,9,17,3,10,4,21,22,7,15,8,25,12,13,18},
		{15,20,13,24,25,0,21,26,6,1,2,18,17,10,3,5,4,23,22,7,9,8,11,12,14,16,19},
		{16,21,22,2,19,25,12,5,23,6,18,24,9,11,10,4,26,1,14,15,8,17,3,20,13,7,0},
		{17,22,7,25,20,12,14,6,24,18,19,0,10,26,4,23,1,2,15,8,11,3,5,13,16,9,21},
		{18,4,23,8,3,11,26,13,7,16,17,9,0,12,21,22,14,15,1,2,25,19,20,5,6,24,10},
		{19,23,24,11,5,26,1,16,9,17,3,10,21,14,22,7,15,8,2,25,12,20,13,6,18,0,4},
		{20,24,0,26,6,1,2,17,10,3,5,4,22,15,7,9,8,11,25,12,14,13,16,18,19,21,23},
		{21,2,25,5,23,6,18,9,11,10,4,26,14,16,15,8,17,3,19,20,13,22,7,24,0,12,1},
		{22,25,12,6,24,18,19,10,26,4,23,1,15,17,8,11,3,5,20,13,16,7,9,0,21,14,2},
		{23,11,26,16,9,17,3,21,14,22,7,15,2,19,25,12,20,13,5,6,18,24,0,10,4,1,8},
		{24,26,1,17,10,3,5,22,15,7,9,8,25,20,12,14,13,16,6,18,19,0,21,4,23,2,11},
		{25,6,18,10,26,4,23,15,17,8,11,3,20,22,13,16,7,9,24,0,21,12,14,1,2,19,5},
		{26,17,3,22,15,7,9,25,20,12,14,13,6,24,18,19,0,21,10,4,23,1,2,8,11,5,16},
	};
	static int g_R27_12Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,4,0,7,0,4,0,0,4,7,4,0,4,7,0,7,4,0,7,4,0,7,4,7,4,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,7,0,7,7,0,4,0,0,4,4,7,4,4,7,7,7,7,7,0,0,0,0,4,4},
		{0,7,0,4,0,7,0,0,7,4,7,0,7,4,0,4,7,0,4,7,0,4,7,4,7,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,4,7,7,0,0,4,0,4,4,7,7,4,7,7,0,0,4,7,0,4,4,7,4,7,0,0},
		{0,7,4,4,0,0,7,0,7,7,4,4,7,4,4,0,0,7,4,0,7,7,4,7,4,0,0},
		{0,4,0,7,0,4,0,0,4,7,4,0,4,7,0,7,4,0,7,4,0,7,4,7,4,7,7},
		{0,0,4,0,0,4,7,0,0,4,7,4,0,0,4,7,4,7,0,4,7,4,7,4,7,7,7},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,4,0,7,0,4,0,0,4,7,4,0,4,7,0,7,4,0,7,4,0,7,4,7,4,7,7},
		{0,7,7,4,0,4,4,0,7,0,0,7,7,4,7,7,4,4,4,4,4,0,0,0,0,7,7},
		{0,4,4,7,0,7,7,0,4,0,0,4,4,7,4,4,7,7,7,7,7,0,0,0,0,4,4},
		{0,7,0,4,0,7,0,0,7,4,7,0,7,4,0,4,7,0,4,7,0,4,7,4,7,4,4},
		{0,0,7,0,0,7,4,0,0,7,4,7,0,0,7,4,7,4,0,7,4,7,4,7,4,4,4},
		{0,4,4,7,0,7,7,0,4,0,0,4,4,7,4,4,7,7,7,7,7,0,0,0,0,4,4},
		{0,7,0,4,0,7,0,0,7,4,7,0,7,4,0,4,7,0,4,7,0,4,7,4,7,4,4},
		{0,4,7,7,0,0,4,0,4,4,7,7,4,7,7,0,0,4,7,0,4,4,7,4,7,0,0},
		{0,7,4,4,0,0,7,0,7,7,4,4,7,4,4,0,0,7,4,0,7,7,4,7,4,0,0},
		{0,4,7,7,0,0,4,0,4,4,7,7,4,7,7,0,0,4,7,0,4,4,7,4,7,0,0},
		{0,7,4,4,0,0,7,0,7,7,4,4,7,4,4,0,0,7,4,0,7,7,4,7,4,0,0},
		{0,7,7,4,0,4,4,0,7,0,0,7,7,4,7,7,4,4,4,4,4,0,0,0,0,7,7},
		{0,7,7,4,0,4,4,0,7,0,0,7,7,4,7,7,4,4,4,4,4,0,0,0,0,7,7},
	};	
	static int g_R27_22Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,3,5,7,2,10,14,12,0,13,19,20,18,6,23,17,21,8,15,24,4,26,9,16,25,11,22},
		{2,5,6,10,13,14,15,19,4,12,23,22,24,18,17,11,0,20,25,16,9,1,7,8,21,26,3},
		{3,7,10,12,5,19,23,18,1,6,24,4,15,14,16,8,26,0,17,25,2,22,13,21,11,20,9},
		{4,2,13,5,9,6,18,10,20,7,14,26,19,12,15,25,8,11,24,23,22,0,3,17,16,21,1},
		{5,10,14,19,6,23,17,24,2,18,16,9,25,15,8,20,1,4,11,21,13,3,12,0,26,22,7},
		{6,14,15,23,18,17,11,16,13,24,8,7,21,25,20,22,2,9,26,0,12,5,19,4,1,3,10},
		{7,12,19,18,10,24,16,15,3,14,25,2,17,23,21,0,22,1,8,11,5,9,6,26,20,4,13},
		{8,0,4,1,20,2,13,3,17,22,5,25,7,9,6,18,23,15,12,10,11,16,26,14,19,24,21},
		{9,13,12,6,7,18,24,14,22,10,15,1,23,19,25,21,20,26,16,17,3,4,5,11,8,0,2},
		{10,19,23,24,14,16,8,25,5,15,21,13,11,17,0,4,3,2,20,26,6,7,18,1,22,9,12},
		{11,20,22,4,26,9,7,2,25,1,13,16,5,3,12,19,15,24,10,6,21,17,0,18,14,23,8},
		{12,18,24,15,19,25,21,17,7,23,11,5,8,16,26,1,9,3,0,20,10,13,14,22,4,2,6},
		{13,6,18,14,12,15,25,23,9,19,17,3,16,24,11,26,4,22,21,8,7,2,10,20,0,1,5},
		{14,23,17,16,15,8,20,21,6,25,0,12,26,11,4,9,5,13,22,1,18,10,24,2,3,7,19},
		{15,17,11,8,25,20,22,0,18,21,4,19,1,26,9,7,6,12,3,2,24,14,16,13,5,10,23},
		{16,21,0,26,8,1,2,22,23,20,3,15,9,4,5,6,19,14,13,7,17,24,11,10,12,18,25},
		{17,8,20,0,11,4,9,1,15,26,2,24,3,22,13,12,14,18,7,5,25,23,21,6,10,19,16},
		{18,15,25,17,24,11,26,8,12,16,20,10,0,21,22,3,13,7,1,4,19,6,23,9,2,5,14},
		{19,24,16,25,23,21,0,11,10,17,26,6,20,8,1,2,7,5,4,22,14,12,15,3,9,13,18},
		{20,4,9,2,22,13,12,5,11,3,6,21,10,7,18,24,17,25,19,14,26,8,1,15,23,16,0},
		{21,26,1,22,0,3,5,9,16,4,7,17,13,2,10,14,24,23,6,12,8,25,20,19,18,15,11},
		{22,9,7,13,3,12,19,6,26,5,18,0,14,10,24,16,11,21,23,15,1,20,2,25,17,8,4},
		{23,16,8,21,17,0,4,26,14,11,1,18,22,20,2,13,10,6,9,3,15,19,25,5,7,12,24},
		{24,25,21,11,16,26,1,20,19,8,22,14,4,0,3,5,12,10,2,9,23,18,17,7,13,6,15},
		{25,11,26,20,21,22,3,4,24,0,9,23,2,1,7,10,18,19,5,13,16,15,8,12,6,14,17},
		{26,22,3,9,1,7,10,13,21,2,12,8,6,5,19,23,25,16,14,18,0,11,4,24,15,17,20},
	};
	static int g_R27_22Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,6,8,13,9,15,16,17,18,10,11,20,12,7,21,19,22,25,23,1,14,24,26,3,5},
		{0,4,8,9,16,20,17,7,21,19,22,18,10,23,11,15,1,25,14,3,24,2,12,26,5,6,13},
		{0,6,9,11,17,24,10,7,19,18,1,21,16,26,8,15,25,22,2,14,5,3,4,13,20,12,23},
		{0,8,16,17,21,23,19,15,1,25,14,22,18,24,10,7,2,3,12,6,26,4,11,5,13,9,20},
		{0,13,20,24,23,7,26,0,24,5,23,20,13,15,5,0,26,13,24,20,7,5,26,15,7,23,15},
		{0,9,17,10,19,26,18,15,25,22,2,1,21,5,16,7,3,14,4,12,13,6,8,20,23,11,24},
		{0,15,7,7,15,0,15,0,7,7,15,7,15,0,7,0,15,15,7,7,0,7,15,0,0,15,0},
		{0,16,21,19,1,24,25,7,2,3,12,14,22,26,18,15,4,6,11,9,5,8,10,13,20,17,23},
		{0,17,19,18,25,5,22,7,3,14,4,2,1,13,21,15,6,12,8,11,20,9,16,23,24,10,26},
		{0,18,22,1,14,23,2,15,12,4,9,6,3,24,25,7,11,8,17,16,26,10,19,5,13,21,20},
		{0,10,18,21,22,20,1,7,14,2,6,3,25,23,19,15,12,4,9,8,24,11,17,26,5,16,13},
		{0,11,10,16,18,13,21,15,22,1,3,25,19,20,17,7,14,2,6,4,23,12,9,24,26,8,5},
		{0,20,23,26,24,15,5,0,26,13,24,23,20,7,13,0,5,20,26,23,15,13,5,7,15,24,7},
		{0,12,11,8,10,5,16,7,18,21,25,19,17,13,9,15,22,1,3,2,20,14,6,23,24,4,26},
		{0,7,15,15,7,0,7,0,15,15,7,15,7,0,15,0,7,7,15,15,0,15,7,0,0,7,0},
		{0,21,1,25,2,26,3,15,4,6,11,12,14,5,22,7,8,9,10,17,13,16,18,20,23,19,24},
		{0,19,25,22,3,13,14,15,6,12,8,4,2,20,1,7,9,11,16,10,23,17,21,24,26,18,5},
		{0,22,14,2,12,24,4,7,11,8,17,9,6,26,3,15,10,16,19,21,5,18,25,13,20,1,23},
		{0,25,3,14,6,20,12,7,9,11,16,8,4,23,2,15,17,10,21,18,24,19,1,26,5,22,13},
		{0,23,24,5,26,7,13,0,5,20,26,24,23,15,20,0,13,23,5,24,7,20,13,15,7,26,15},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{0,14,12,4,11,26,8,15,10,16,19,17,9,5,6,7,18,21,25,1,13,22,3,20,23,2,24},
		{0,24,26,13,5,15,20,0,13,23,5,26,24,7,23,0,20,24,13,26,15,23,20,7,15,5,7},
		{0,26,5,20,13,7,23,0,20,24,13,5,26,15,24,0,23,26,20,5,7,24,23,15,7,13,15},
		{0,3,6,12,9,23,11,15,17,10,21,16,8,24,4,7,19,18,1,22,26,25,2,5,13,14,20},
		{0,5,13,23,20,15,24,0,23,26,20,13,5,7,26,0,24,5,23,13,15,26,24,7,15,20,7},
	};	
	static int g_R27_29Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,3,4,0,6,7,2,8,5,10,12,13,9,15,16,11,17,14,19,21,22,18,24,25,20,26,23},
		{2,4,5,6,7,0,8,1,3,11,13,14,15,16,9,17,10,12,20,22,23,24,25,18,26,19,21},
		{3,0,6,1,2,8,4,5,7,12,9,15,10,11,17,13,14,16,21,18,24,19,20,26,22,23,25},
		{4,6,7,2,8,1,5,3,0,13,15,16,11,17,10,14,12,9,22,24,25,20,26,19,23,21,18},
		{5,7,0,8,1,2,3,4,6,14,16,9,17,10,11,12,13,15,23,25,18,26,19,20,21,22,24},
		{6,2,8,4,5,3,7,0,1,15,11,17,13,14,12,16,9,10,24,20,26,22,23,21,25,18,19},
		{7,8,1,5,3,4,0,6,2,16,17,10,14,12,13,9,15,11,25,26,19,23,21,22,18,24,20},
		{8,5,3,7,0,6,1,2,4,17,14,12,16,9,15,10,11,13,26,23,21,25,18,24,19,20,22},
		{9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,1,2,3,4,5,6,7,8},
		{10,12,13,9,15,16,11,17,14,19,21,22,18,24,25,20,26,23,1,3,4,0,6,7,2,8,5},
		{11,13,14,15,16,9,17,10,12,20,22,23,24,25,18,26,19,21,2,4,5,6,7,0,8,1,3},
		{12,9,15,10,11,17,13,14,16,21,18,24,19,20,26,22,23,25,3,0,6,1,2,8,4,5,7},
		{13,15,16,11,17,10,14,12,9,22,24,25,20,26,19,23,21,18,4,6,7,2,8,1,5,3,0},
		{14,16,9,17,10,11,12,13,15,23,25,18,26,19,20,21,22,24,5,7,0,8,1,2,3,4,6},
		{15,11,17,13,14,12,16,9,10,24,20,26,22,23,21,25,18,19,6,2,8,4,5,3,7,0,1},
		{16,17,10,14,12,13,9,15,11,25,26,19,23,21,22,18,24,20,7,8,1,5,3,4,0,6,2},
		{17,14,12,16,9,15,10,11,13,26,23,21,25,18,24,19,20,22,8,5,3,7,0,6,1,2,4},
		{18,19,20,21,22,23,24,25,26,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},
		{19,21,22,18,24,25,20,26,23,1,3,4,0,6,7,2,8,5,10,12,13,9,15,16,11,17,14},
		{20,22,23,24,25,18,26,19,21,2,4,5,6,7,0,8,1,3,11,13,14,15,16,9,17,10,12},
		{21,18,24,19,20,26,22,23,25,3,0,6,1,2,8,4,5,7,12,9,15,10,11,17,13,14,16},
		{22,24,25,20,26,19,23,21,18,4,6,7,2,8,1,5,3,0,13,15,16,11,17,10,14,12,9},
		{23,25,18,26,19,20,21,22,24,5,7,0,8,1,2,3,4,6,14,16,9,17,10,11,12,13,15},
		{24,20,26,22,23,21,25,18,19,6,2,8,4,5,3,7,0,1,15,11,17,13,14,12,16,9,10},
		{25,26,19,23,21,22,18,24,20,7,8,1,5,3,4,0,6,2,16,17,10,14,12,13,9,15,11},
		{26,23,21,25,18,24,19,20,22,8,5,3,7,0,6,1,2,4,17,14,12,16,9,15,10,11,13},
	};
	static int g_R27_29Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2},
		{0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2},
		{0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5,0,2,0,5,2,0,5,2,5},
		{0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2,0,5,0,2,5,0,2,5,2},
		{0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5},
		{0,2,0,5,2,0,5,2,5,2,5,2,0,5,2,0,5,0,5,0,5,2,0,5,2,0,2},
		{0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5},
		{0,5,0,2,5,0,2,5,2,2,0,2,5,0,2,5,0,5,5,2,5,0,2,5,0,2,0},
		{0,2,0,5,2,0,5,2,5,2,5,2,0,5,2,0,5,0,5,0,5,2,0,5,2,0,2},
		{0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5},
		{0,5,0,2,5,0,2,5,2,2,0,2,5,0,2,5,0,5,5,2,5,0,2,5,0,2,0},
		{0,2,0,5,2,0,5,2,5,2,5,2,0,5,2,0,5,0,5,0,5,2,0,5,2,0,2},
		{0,5,0,2,5,0,2,5,2,2,0,2,5,0,2,5,0,5,5,2,5,0,2,5,0,2,0},
		{0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2},
		{0,2,0,5,2,0,5,2,5,5,0,5,2,0,5,2,0,2,2,5,2,0,5,2,0,5,0},
		{0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2},
		{0,5,0,2,5,0,2,5,2,5,2,5,0,2,5,0,2,0,2,0,2,5,0,2,5,0,5},
		{0,2,0,5,2,0,5,2,5,5,0,5,2,0,5,2,0,2,2,5,2,0,5,2,0,5,0},
		{0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2},
		{0,5,0,2,5,0,2,5,2,5,2,5,0,2,5,0,2,0,2,0,2,5,0,2,5,0,5},
		{0,2,0,5,2,0,5,2,5,5,0,5,2,0,5,2,0,2,2,5,2,0,5,2,0,5,0},
		{0,5,0,2,5,0,2,5,2,5,2,5,0,2,5,0,2,0,2,0,2,5,0,2,5,0,5},
	};	
	static int g_R27_34Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,4,5,8,0,9,10,11,14,2,17,18,15,19,3,21,22,6,7,23,24,12,25,13,26,16,20},
		{2,5,7,12,9,11,13,0,15,18,19,1,16,20,21,22,3,23,4,24,6,25,8,26,10,14,17},
		{3,8,12,6,14,15,0,16,10,21,1,22,13,2,17,19,20,4,25,5,7,23,24,9,11,26,18},
		{4,0,9,14,1,2,17,18,3,5,6,7,21,23,8,12,25,10,11,13,26,15,16,19,20,22,24},
		{5,9,11,15,2,18,19,1,21,7,23,4,22,24,12,25,8,13,0,26,10,16,14,20,17,3,6},
		{6,10,13,0,17,19,3,20,1,23,8,24,2,12,4,5,7,14,26,15,16,9,11,21,22,18,25},
		{7,11,0,16,18,1,20,2,22,4,24,5,3,6,25,8,12,26,9,10,13,14,15,17,19,21,23},
		{8,14,15,10,3,21,1,22,17,12,4,25,19,5,6,23,24,0,16,9,11,13,26,2,18,20,7},
		{9,2,18,21,5,7,23,4,12,11,13,0,25,26,15,16,14,19,1,20,17,22,3,24,6,8,10},
		{10,17,19,1,6,23,8,24,4,13,14,26,5,15,0,9,11,3,20,21,22,2,18,12,25,7,16},
		{11,18,1,22,7,4,24,5,25,0,26,9,8,10,16,14,15,20,2,17,19,3,21,6,23,12,13},
		{12,15,16,13,21,22,2,3,19,25,5,8,20,7,23,24,6,9,14,11,0,26,10,18,1,17,4},
		{13,19,20,2,23,24,12,6,5,26,15,10,7,16,9,11,0,21,17,22,3,18,1,25,8,4,14},
		{14,3,21,17,8,12,4,25,6,15,0,16,23,9,10,13,26,1,22,2,18,19,20,5,7,24,11},
		{15,21,22,19,12,25,5,8,23,16,9,14,24,11,13,26,10,2,3,18,1,20,17,7,4,6,0},
		{16,22,3,20,25,8,7,12,24,14,11,15,6,0,26,10,13,18,21,1,2,17,19,4,5,23,9},
		{17,6,23,4,10,13,14,26,0,19,3,20,9,21,1,2,18,8,24,12,25,5,7,15,16,11,22},
		{18,7,4,25,11,0,26,9,16,1,20,2,14,17,22,3,21,24,5,6,23,8,12,10,13,15,19},
		{19,23,24,5,13,26,15,10,9,20,21,17,11,22,2,18,1,12,6,25,8,7,4,16,14,0,3},
		{20,24,6,7,26,10,16,13,11,17,22,19,0,3,18,1,2,25,23,8,12,4,5,14,15,9,21},
		{21,12,25,23,15,16,9,14,13,22,2,3,26,18,19,20,17,5,8,7,4,24,6,11,0,10,1},
		{22,25,8,24,16,14,11,15,26,3,18,21,10,1,20,17,19,7,12,4,5,6,23,0,9,13,2},
		{23,13,26,9,19,20,21,17,2,24,12,6,18,25,5,7,4,15,10,16,14,11,0,22,3,1,8},
		{24,26,10,11,20,17,22,19,18,6,25,23,1,8,7,4,5,16,13,14,15,0,9,3,21,2,12},
		{25,16,14,26,22,3,18,21,20,8,7,12,17,4,24,6,23,11,15,0,9,10,13,1,2,19,5},
		{26,20,17,18,24,6,25,23,7,10,16,13,4,14,11,0,9,22,19,3,21,1,2,8,12,5,15},
	};
	static int g_R27_34Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
	};	
	static int g_R27_53Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,4,5,8,0,9,10,11,14,2,17,18,15,19,3,21,22,6,7,23,24,12,25,13,26,16,20},
		{2,5,7,12,9,11,13,6,15,18,19,10,16,20,21,22,0,23,17,24,3,25,1,26,8,4,14},
		{3,8,12,6,14,15,0,16,10,21,1,22,13,2,17,19,20,4,25,5,7,23,24,9,11,26,18},
		{4,0,9,14,1,2,17,18,3,5,6,7,21,23,8,12,25,10,11,13,26,15,16,19,20,22,24},
		{5,9,11,15,2,18,19,10,21,7,23,17,22,24,12,25,1,13,6,26,8,16,4,20,14,0,3},
		{6,10,13,0,17,19,3,20,1,23,8,24,2,12,4,5,7,14,26,15,16,9,11,21,22,18,25},
		{7,11,6,16,18,10,20,13,22,17,24,19,0,3,25,1,2,26,23,8,12,4,5,14,15,9,21},
		{8,14,15,10,3,21,1,22,17,12,4,25,19,5,6,23,24,0,16,9,11,13,26,2,18,20,7},
		{9,2,18,21,5,7,23,17,12,11,13,6,25,26,15,16,4,19,10,20,14,22,0,24,3,1,8},
		{10,17,19,1,6,23,8,24,4,13,14,26,5,15,0,9,11,3,20,21,22,2,18,12,25,7,16},
		{11,18,10,22,7,17,24,19,25,6,26,23,1,8,16,4,5,20,13,14,15,0,9,3,21,2,12},
		{12,15,16,13,21,22,2,0,19,25,5,1,20,7,23,24,3,9,4,11,6,26,8,18,10,14,17},
		{13,19,20,2,23,24,12,3,5,26,15,8,7,16,9,11,6,21,14,22,0,18,10,25,1,17,4},
		{14,3,21,17,8,12,4,25,6,15,0,16,23,9,10,13,26,1,22,2,18,19,20,5,7,24,11},
		{15,21,22,19,12,25,5,1,23,16,9,4,24,11,13,26,8,2,0,18,10,20,14,7,17,3,6},
		{16,22,0,20,25,1,7,2,24,4,11,5,3,6,26,8,12,18,9,10,13,14,15,17,19,21,23},
		{17,6,23,4,10,13,14,26,0,19,3,20,9,21,1,2,18,8,24,12,25,5,7,15,16,11,22},
		{18,7,17,25,11,6,26,23,16,10,20,13,4,14,22,0,9,24,19,3,21,1,2,8,12,5,15},
		{19,23,24,5,13,26,15,8,9,20,21,14,11,22,2,18,10,12,3,25,1,7,17,16,4,6,0},
		{20,24,3,7,26,8,16,12,11,14,22,15,6,0,18,10,13,25,21,1,2,17,19,4,5,23,9},
		{21,12,25,23,15,16,9,4,13,22,2,0,26,18,19,20,14,5,1,7,17,24,3,11,6,8,10},
		{22,25,1,24,16,4,11,5,26,0,18,9,8,10,20,14,15,7,2,17,19,3,21,6,23,12,13},
		{23,13,26,9,19,20,21,14,2,24,12,3,18,25,5,7,17,15,8,16,4,11,6,22,0,10,1},
		{24,26,8,11,20,14,22,15,18,3,25,21,10,1,7,17,19,16,12,4,5,6,23,0,9,13,2},
		{25,16,4,26,22,0,18,9,20,1,7,2,14,17,24,3,21,11,5,6,23,8,12,10,13,15,19},
		{26,20,14,18,24,3,25,21,7,8,16,12,17,4,11,6,23,22,15,0,9,10,13,1,2,19,5},
	};
	static int g_R27_53Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
	};	
	static int g_R27_54Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,4,6,8,0,9,10,11,14,17,2,18,15,19,3,21,22,5,7,23,24,12,25,13,26,16,20},
		{2,6,7,12,10,13,11,5,15,19,18,9,16,20,21,22,0,23,17,24,3,25,1,26,8,4,14},
		{3,8,12,5,14,0,15,16,9,1,21,22,13,2,17,19,20,4,25,6,7,23,24,10,11,26,18},
		{4,0,10,14,1,17,2,18,3,5,6,7,21,23,8,12,25,9,11,13,26,15,16,19,20,22,24},
		{5,9,13,0,17,3,19,20,1,8,23,24,2,12,4,6,7,14,26,15,16,10,11,21,22,18,25},
		{6,10,11,15,2,19,18,9,21,23,7,17,22,24,12,25,1,13,5,26,8,16,4,20,14,0,3},
		{7,11,5,16,18,20,9,13,22,24,17,19,0,3,25,1,2,26,23,8,12,4,6,14,15,10,21},
		{8,14,15,9,3,1,21,22,17,4,12,25,19,6,5,23,24,0,16,10,11,13,26,2,18,20,7},
		{9,17,19,1,5,8,23,24,4,14,13,26,6,15,0,10,11,3,20,21,22,2,18,12,25,7,16},
		{10,2,18,21,6,23,7,17,12,13,11,5,25,26,15,16,4,19,9,20,14,22,0,24,3,1,8},
		{11,18,9,22,7,24,17,19,25,26,5,23,1,8,16,4,6,20,13,14,15,0,10,3,21,2,12},
		{12,15,16,13,21,2,22,0,19,6,25,1,20,7,23,24,3,10,4,11,5,26,8,18,9,14,17},
		{13,19,20,2,23,12,24,3,6,15,26,8,7,16,10,11,5,21,14,22,0,18,9,25,1,17,4},
		{14,3,21,17,8,4,12,25,5,0,15,16,23,10,9,13,26,1,22,2,18,19,20,6,7,24,11},
		{15,21,22,19,12,6,25,1,23,10,16,4,24,11,13,26,8,2,0,18,9,20,14,7,17,3,5},
		{16,22,0,20,25,7,1,2,24,11,4,6,3,5,26,8,12,18,10,9,13,14,15,17,19,21,23},
		{17,5,23,4,9,14,13,26,0,3,19,20,10,21,1,2,18,8,24,12,25,6,7,15,16,11,22},
		{18,7,17,25,11,26,5,23,16,20,9,13,4,14,22,0,10,24,19,3,21,1,2,8,12,6,15},
		{19,23,24,6,13,15,26,8,10,21,20,14,11,22,2,18,9,12,3,25,1,7,17,16,4,5,0},
		{20,24,3,7,26,16,8,12,11,22,14,15,5,0,18,9,13,25,21,1,2,17,19,4,6,23,10},
		{21,12,25,23,15,10,16,4,13,2,22,0,26,18,19,20,14,6,1,7,17,24,3,11,5,8,9},
		{22,25,1,24,16,11,4,6,26,18,0,10,8,9,20,14,15,7,2,17,19,3,21,5,23,12,13},
		{23,13,26,10,19,21,20,14,2,12,24,3,18,25,6,7,17,15,8,16,4,11,5,22,0,9,1},
		{24,26,8,11,20,22,14,15,18,25,3,21,9,1,7,17,19,16,12,4,6,5,23,0,10,13,2},
		{25,16,4,26,22,18,0,10,20,7,1,2,14,17,24,3,21,11,6,5,23,8,12,9,13,15,19},
		{26,20,14,18,24,25,3,21,7,16,8,12,17,4,11,5,23,22,15,0,10,9,13,1,2,19,6},
	};
	static int g_R27_54Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,0,5,0,0,3,3,3,3,5,5,5,5,0,3,5,0,0,3,3,5,3,5,0,0},
		{0,5,5,0,3,0,3,3,5,5,0,0,5,5,3,3,3,3,5,3,3,0,0,0,0,5,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,3,0,3,0,0,5,5,5,5,3,3,3,3,0,5,3,0,0,5,5,3,5,3,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,3,0,0,0,3,5,0,0,3,5,3,3,0,3,5,0,5,3,5,3,5,3,5,5,5},
		{0,3,3,0,5,0,5,5,3,3,0,0,3,3,5,5,5,5,3,5,5,0,0,0,0,3,3},
		{0,3,5,0,5,0,0,3,3,3,3,5,5,5,5,0,3,5,0,0,3,3,5,3,5,0,0},
		{0,3,5,0,5,0,0,3,3,3,3,5,5,5,5,0,3,5,0,0,3,3,5,3,5,0,0},
		{0,3,0,0,5,0,3,0,3,3,5,3,0,0,5,3,0,5,5,3,0,5,3,5,3,5,5},
		{0,5,0,0,3,0,5,0,5,5,3,5,0,0,3,5,0,3,3,5,0,3,5,3,5,3,3},
		{0,5,5,0,3,0,3,3,5,5,0,0,5,5,3,3,3,3,5,3,3,0,0,0,0,5,5},
		{0,5,5,0,3,0,3,3,5,5,0,0,5,5,3,3,3,3,5,3,3,0,0,0,0,5,5},
		{0,5,3,0,3,0,0,5,5,5,5,3,3,3,3,0,5,3,0,0,5,5,3,5,3,0,0},
		{0,0,3,0,0,0,3,5,0,0,3,5,3,3,0,3,5,0,5,3,5,3,5,3,5,5,5},
		{0,3,3,0,5,0,5,5,3,3,0,0,3,3,5,5,5,5,3,5,5,0,0,0,0,3,3},
		{0,5,3,0,3,0,0,5,5,5,5,3,3,3,3,0,5,3,0,0,5,5,3,5,3,0,0},
		{0,0,5,0,0,0,5,3,0,0,5,3,5,5,0,5,3,0,3,5,3,5,3,5,3,3,3},
		{0,0,3,0,0,0,3,5,0,0,3,5,3,3,0,3,5,0,5,3,5,3,5,3,5,5,5},
		{0,3,3,0,5,0,5,5,3,3,0,0,3,3,5,5,5,5,3,5,5,0,0,0,0,3,3},
		{0,3,0,0,5,0,3,0,3,3,5,3,0,0,5,3,0,5,5,3,0,5,3,5,3,5,5},
		{0,5,0,0,3,0,5,0,5,5,3,5,0,0,3,5,0,3,3,5,0,3,5,3,5,3,3},
		{0,3,0,0,5,0,3,0,3,3,5,3,0,0,5,3,0,5,5,3,0,5,3,5,3,5,5},
		{0,5,0,0,3,0,5,0,5,5,3,5,0,0,3,5,0,3,3,5,0,3,5,3,5,3,3},
		{0,0,5,0,0,0,5,3,0,0,5,3,5,5,0,5,3,0,3,5,3,5,3,5,3,3,3},
		{0,0,5,0,0,0,5,3,0,0,5,3,5,5,0,5,3,0,3,5,3,5,3,5,3,3,3},
	};
	static int g_R27_55Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,4,5,8,0,9,10,11,14,2,17,18,15,19,3,21,22,6,7,23,24,12,25,13,26,16,20},
		{2,5,7,12,9,11,13,3,15,18,19,8,16,20,21,22,6,23,14,24,0,25,10,26,1,17,4},
		{3,8,12,6,14,15,0,16,10,21,1,22,13,2,17,19,20,4,25,5,7,23,24,9,11,26,18},
		{4,0,9,14,1,2,17,18,3,5,6,7,21,23,8,12,25,10,11,13,26,15,16,19,20,22,24},
		{5,9,11,15,2,18,19,8,21,7,23,14,22,24,12,25,10,13,3,26,1,16,17,20,4,6,0},
		{6,10,13,0,17,19,3,20,1,23,8,24,2,12,4,5,7,14,26,15,16,9,11,21,22,18,25},
		{7,11,3,16,18,8,20,12,22,14,24,15,6,0,25,10,13,26,21,1,2,17,19,4,5,23,9},
		{8,14,15,10,3,21,1,22,17,12,4,25,19,5,6,23,24,0,16,9,11,13,26,2,18,20,7},
		{9,2,18,21,5,7,23,14,12,11,13,3,25,26,15,16,17,19,8,20,4,22,6,24,0,10,1},
		{10,17,19,1,6,23,8,24,4,13,14,26,5,15,0,9,11,3,20,21,22,2,18,12,25,7,16},
		{11,18,8,22,7,14,24,15,25,3,26,21,10,1,16,17,19,20,12,4,5,6,23,0,9,13,2},
		{12,15,16,13,21,22,2,6,19,25,5,10,20,7,23,24,0,9,17,11,3,26,1,18,8,4,14},
		{13,19,20,2,23,24,12,0,5,26,15,1,7,16,9,11,3,21,4,22,6,18,8,25,10,14,17},
		{14,3,21,17,8,12,4,25,6,15,0,16,23,9,10,13,26,1,22,2,18,19,20,5,7,24,11},
		{15,21,22,19,12,25,5,10,23,16,9,17,24,11,13,26,1,2,6,18,8,20,4,7,14,0,3},
		{16,22,6,20,25,10,7,13,24,17,11,19,0,3,26,1,2,18,23,8,12,4,5,14,15,9,21},
		{17,6,23,4,10,13,14,26,0,19,3,20,9,21,1,2,18,8,24,12,25,5,7,15,16,11,22},
		{18,7,14,25,11,3,26,21,16,8,20,12,17,4,22,6,23,24,15,0,9,10,13,1,2,19,5},
		{19,23,24,5,13,26,15,1,9,20,21,4,11,22,2,18,8,12,0,25,10,7,14,16,17,3,6},
		{20,24,0,7,26,1,16,2,11,4,22,5,3,6,18,8,12,25,9,10,13,14,15,17,19,21,23},
		{21,12,25,23,15,16,9,17,13,22,2,6,26,18,19,20,4,5,10,7,14,24,0,11,3,1,8},
		{22,25,10,24,16,17,11,19,26,6,18,23,1,8,20,4,5,7,13,14,15,0,9,3,21,2,12},
		{23,13,26,9,19,20,21,4,2,24,12,0,18,25,5,7,14,15,1,16,17,11,3,22,6,8,10},
		{24,26,1,11,20,4,22,5,18,0,25,9,8,10,7,14,15,16,2,17,19,3,21,6,23,12,13},
		{25,16,17,26,22,6,18,23,20,10,7,13,4,14,24,0,9,11,19,3,21,1,2,8,12,5,15},
		{26,20,4,18,24,0,25,9,7,1,16,2,14,17,11,3,21,22,5,6,23,8,12,10,13,15,19},
	};
	static int g_R27_55Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,3,3,0,6,6,0,6,3,0,3,0,3,3,6,6,6,6,3,6,6,0,0,0,0,3,3},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,6,3,0,3,0,0,6,6,6,6,3,3,3,3,0,6,3,0,0,6,6,3,6,3,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,6,6,0,3,3,0,3,6,0,6,0,6,6,3,3,3,3,6,3,3,0,0,0,0,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,0,6,0,0,6,0,3,0,6,0,3,6,6,0,6,3,0,3,6,3,6,3,6,3,3,3},
		{0,3,6,0,6,0,0,3,3,3,3,6,6,6,6,0,3,6,0,0,3,3,6,3,6,0,0},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,3,0,0,6,3,0,0,3,6,3,3,0,0,6,3,0,6,6,3,0,6,3,6,3,6,6},
		{0,6,0,0,3,6,0,0,6,3,6,6,0,0,3,6,0,3,3,6,0,3,6,3,6,3,3},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
		{0,0,3,0,0,3,0,6,0,3,0,6,3,3,0,3,6,0,6,3,6,3,6,3,6,6,6},
	};	
	static int g_R27_58Add[27][27]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
		{1,3,5,0,8,9,10,11,14,2,15,16,17,19,4,6,7,21,22,23,24,12,25,13,26,18,20},
		{2,5,7,9,12,11,13,0,17,16,19,1,18,20,21,23,3,22,4,24,6,25,8,26,10,14,15},
		{3,0,9,1,14,2,15,16,4,5,6,7,21,23,8,10,11,12,25,13,26,17,18,19,20,22,24},
		{4,8,12,14,6,17,0,18,10,21,1,22,13,2,15,3,25,19,20,5,7,23,24,9,11,26,16},
		{5,9,11,2,17,16,19,1,21,7,23,3,22,24,12,13,0,25,8,26,10,18,14,20,15,4,6},
		{6,10,13,15,0,19,4,20,1,23,8,24,2,12,3,14,26,5,7,17,18,9,11,21,22,16,25},
		{7,11,0,16,18,1,20,2,22,3,24,5,4,6,25,26,9,8,12,10,13,14,17,15,19,21,23},
		{8,14,17,4,10,21,1,22,15,12,3,25,19,5,6,0,18,23,24,9,11,13,26,2,16,20,7},
		{9,2,16,5,21,7,23,3,12,11,13,0,25,26,17,19,1,18,14,20,15,22,4,24,6,8,10},
		{10,15,19,6,1,23,8,24,3,13,14,26,5,17,0,4,20,9,11,21,22,2,16,12,25,7,18},
		{11,16,1,7,22,3,24,5,25,0,26,9,8,10,18,20,2,14,17,15,19,4,21,6,23,12,13},
		{12,17,18,21,13,22,2,4,19,25,5,8,20,7,23,9,14,24,6,11,0,26,10,16,1,15,3},
		{13,19,20,23,2,24,12,6,5,26,17,10,7,18,9,21,15,11,0,22,4,16,1,25,8,3,14},
		{14,4,21,8,15,12,3,25,6,17,0,18,23,9,10,1,22,13,26,2,16,19,20,5,7,24,11},
		{15,6,23,10,3,13,14,26,0,19,4,20,9,21,1,8,24,2,16,12,25,5,7,17,18,11,22},
		{16,7,3,11,25,0,26,9,18,1,20,2,14,15,22,24,5,4,21,6,23,8,12,10,13,17,19},
		{17,21,22,12,19,25,5,8,23,18,9,14,24,11,13,2,4,26,10,16,1,20,15,7,3,6,0},
		{18,22,4,25,20,8,7,12,24,14,11,17,6,0,26,16,21,10,13,1,2,15,19,3,5,23,9},
		{19,23,24,13,5,26,17,10,9,20,21,15,11,22,2,12,6,16,1,25,8,7,3,18,14,0,4},
		{20,24,6,26,7,10,18,13,11,15,22,19,0,4,16,25,23,1,2,8,12,3,5,14,17,9,21},
		{21,12,25,17,23,18,9,14,13,22,2,4,26,16,19,5,8,20,15,7,3,24,6,11,0,10,1},
		{22,25,8,18,24,14,11,17,26,4,16,21,10,1,20,7,12,15,19,3,5,6,23,0,9,13,2},
		{23,13,26,19,9,20,21,15,2,24,12,6,16,25,5,17,10,7,3,18,14,11,0,22,4,1,8},
		{24,26,10,20,11,15,22,19,16,6,25,23,1,8,7,18,13,3,5,14,17,0,9,4,21,2,12},
		{25,18,14,22,26,4,16,21,20,8,7,12,15,3,24,11,17,6,23,0,9,10,13,1,2,19,5},
		{26,20,15,24,16,6,25,23,7,10,18,13,3,14,11,22,19,0,9,4,21,1,2,8,12,5,17},
	};
	static int g_R27_58Mul[27][27]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,6,0,4,0,6,4,4,0,0,6,4,6,4,6,4,6,4,6,6,6},
		{0,6,0,4,0,6,0,0,6,4,6,6,0,0,4,4,4,6,0,6,0,4,6,4,6,4,4},
		{0,0,6,0,0,6,0,4,0,6,0,4,6,6,0,0,4,6,4,6,4,6,4,6,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,4,4,0,0,0,6,6,6,6,4,4,4,4,4,0,0,6,0,6,6,4,6,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,6,0,4,0,0,4,6,4,4,0,0,6,6,6,4,0,4,0,6,4,6,4,6,6},
		{0,0,4,0,0,4,0,6,0,4,0,6,4,4,0,0,6,4,6,4,6,4,6,4,6,6,6},
		{0,6,6,4,0,4,0,4,6,0,6,0,6,6,4,4,6,4,4,4,4,0,0,0,0,6,6},
		{0,0,4,0,0,4,0,6,0,4,0,6,4,4,0,0,6,4,6,4,6,4,6,4,6,6,6},
		{0,4,4,6,0,6,0,6,4,0,4,0,4,4,6,6,4,6,6,6,6,0,0,0,0,4,4},
		{0,6,0,4,0,6,0,0,6,4,6,6,0,0,4,4,4,6,0,6,0,4,6,4,6,4,4},
		{0,6,0,4,0,6,0,0,6,4,6,6,0,0,4,4,4,6,0,6,0,4,6,4,6,4,4},
		{0,0,6,0,0,6,0,4,0,6,0,4,6,6,0,0,4,6,4,6,4,6,4,6,4,4,4},
		{0,0,6,0,0,6,0,4,0,6,0,4,6,6,0,0,4,6,4,6,4,6,4,6,4,4,4},
		{0,4,6,6,0,0,0,4,4,4,4,6,6,6,6,6,0,0,4,0,4,4,6,4,6,0,0},
		{0,6,4,4,0,0,0,6,6,6,6,4,4,4,4,4,0,0,6,0,6,6,4,6,4,0,0},
		{0,4,0,6,0,4,0,0,4,6,4,4,0,0,6,6,6,4,0,4,0,6,4,6,4,6,6},
		{0,6,4,4,0,0,0,6,6,6,6,4,4,4,4,4,0,0,6,0,6,6,4,6,4,0,0},
		{0,4,0,6,0,4,0,0,4,6,4,4,0,0,6,6,6,4,0,4,0,6,4,6,4,6,6},
		{0,6,6,4,0,4,0,4,6,0,6,0,6,6,4,4,6,4,4,4,4,0,0,0,0,6,6},
		{0,4,4,6,0,6,0,6,4,0,4,0,4,4,6,6,4,6,6,6,6,0,0,0,0,4,4},
		{0,6,6,4,0,4,0,4,6,0,6,0,6,6,4,4,6,4,4,4,4,0,0,0,0,6,6},
		{0,4,4,6,0,6,0,6,4,0,4,0,4,4,6,6,4,6,6,6,6,0,0,0,0,4,4},
		{0,4,6,6,0,0,0,4,4,4,4,6,6,6,6,6,0,0,4,0,4,4,6,4,6,0,0},
		{0,4,6,6,0,0,0,4,4,4,4,6,6,6,6,6,0,0,4,0,4,4,6,4,6,0,0},
	};	
	if(i==6)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_6Add[0][0],&g_R27_6Mul[0][0],0);
		return r;
	}	
	if(i==9)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_9Add[0][0],&g_R27_9Mul[0][0],0);
		return r;
	}	
	if(i==14){
		ZmodnZ* r9=new ZmodnZ(1,9);
		ZmodnZ* r3=new ZmodnZ(1,3);
		DecompositionRing* r= new DecompositionRing(r9,r3);
		r->m_flag=1;		
		return r;
	}
	if(i==12)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_12Add[0][0],&g_R27_12Mul[0][0],0);
		return r;
	}	
	if(i==22)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_22Add[0][0],&g_R27_22Mul[0][0],0);
		return r;
	}
	if(i==29)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_29Add[0][0],&g_R27_29Mul[0][0],0);
		return r;
	}	
	if(i==34)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_34Add[0][0],&g_R27_34Mul[0][0],0);
		return r;
	}	
	if(i==53)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_53Add[0][0],&g_R27_53Mul[0][0],0);
		return r;
	}
	if(i==54)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_54Add[0][0],&g_R27_54Mul[0][0],0);
		return r;
	}
	if(i==55)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_55Add[0][0],&g_R27_55Mul[0][0],0);
		return r;
	}	
	if(i==58)
	{
		FiniteRing* r=new FiniteRing(27,&g_R27_58Add[0][0],&g_R27_58Mul[0][0],0);
		return r;
	}	
	return NULL;	
}	

IRing* FiniteRing::newR8(int i){
/* 	static int g_C2C4Mul_2[8][8]={
		{0,1,2,3,4,5,6,7},
		{1,4,7,2,5,0,3,6},
		{2,7,4,1,6,3,0,5},
		{3,2,1,0,7,6,5,4},
		{4,5,6,7,0,1,2,3},
		{5,0,3,6,1,4,7,2},
		{6,3,0,5,2,7,4,1},
		{7,6,5,4,3,2,1,0}
	};	
	static int g_Z4F2Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1},
		{0,0,2,2,4,4,6,6},
		{0,1,2,3,4,5,6,7},
		{0,0,4,4,0,0,4,4},
		{0,1,4,5,0,1,4,5},
		{0,0,6,6,4,4,2,2},
		{0,1,6,7,4,5,2,3},
	}; */
	static int g_R8_24Add[8][8]={
		{0,1,2,3,4,5,6,7},
		{1,0,3,2,5,4,7,6},
		{2,3,4,5,6,7,0,1},
		{3,2,5,4,7,6,1,0},
		{4,5,6,7,0,1,2,3},
		{5,4,7,6,1,0,3,2},
		{6,7,0,1,2,3,4,5},
		{7,6,1,0,3,2,5,4}
	};	
	static int g_R8_6Mul[8][8]={
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}, 
		 {0,0,0,0,0,0,0,0}, 
		 {0,4,0,4,0,4,0,4}
	};	
	static int g_R8_8Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,0,4,4,0,0,4,4}
	};	
	static int g_R8_9Mul[8][8]={
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0},
		 {0,0,0,0,0,0,0,0},
		 {0,4,4,0,0,4,4,0}
	};	
	static int g_R8_12Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4},
		{0,0,4,4,0,0,4,4},
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4},
		{0,0,4,4,0,0,4,4}
	};	
	static int g_R8_18Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,0,4,4,0,0,4,4},
		{0,4,0,4,0,4,0,4},
		{0,0,0,0,0,0,0,0},
		{0,4,4,0,0,4,4,0},
		{0,0,4,4,0,0,4,4},
		{0,4,0,4,0,4,0,4}
	};	
	static int g_R8_22Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,4,1,5,0,4,1,5},
		{0,1,2,3,4,5,6,7},
		{0,5,3,6,4,1,7,2},
		{0,0,4,4,0,0,4,4},
		{0,4,5,1,0,4,5,1},
		{0,1,6,7,4,5,2,3},
		{0,5,7,2,4,1,3,6}
	};
	static int g_F8Add[8][8]={
	  {0, 1, 2, 3, 4, 5, 6, 7},
	  {1, 0, 3, 2, 5, 4, 7, 6},
	  {2, 3, 0, 1, 6, 7, 4, 5},
	  {3, 2, 1, 0, 7, 6, 5, 4},
	  {4, 5, 6, 7, 0, 1, 2, 3},
	  {5, 4, 7, 6, 1, 0, 3, 2},
	  {6, 7, 4, 5, 2, 3, 0, 1},
	  {7, 6, 5, 4, 3, 2, 1, 0}
	};	
	static int g_R8_39Mul[8][8]={
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,0,0,1,1},
		{0,0,1,1,0,0,1,1},
		{0,0,1,1,1,1,0,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,1,1,1,1},
		{0,0,0,0,1,1,1,1},
	};	
	if(i==6)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_6Mul[0][0],0);
		return r;
	}	
	if(i==7)//R8_7:=DirectSum(SmallRing(4,1),SmallRing(2,2));;
	{
		ZmodnZ* r4=new ZmodnZ(4,16);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r4,r2);
		r->m_flag=1;
		return r;
	}	
	if(i==8)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_8Mul[0][0],0);
		return r;
	}	
	if(i==9)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_9Mul[0][0],0);
		return r;
	}	
	if(i==12)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_12Mul[0][0],0);
		return r;
	}	
	if(i==14)//R8_14:=DirectSum(SmallRing(4,3),SmallRing(2,2));;R8_14:=DirectSum(ZmodnZ(2),ZmodnZ(4));;
	{
		//不是环FiniteRing* r=new FiniteRing(8,g_C2C4Add,&g_Z4F2Mul[0][0],0);
		ZmodnZ* r4=new ZmodnZ(1,4);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r4,r2);
		r->m_flag=1;		
		return r;
	}
	if(i==17)//R8_17:=DirectSum(SmallRing(4,2),SmallRing(2,2));;
	{
		ZmodnZ* r4=new ZmodnZ(2,8);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r4,r2);
		r->m_flag=1;
		return r;
	}	
	if(i==18)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_18Mul[0][0],0);
		return r;
	}	
	if(i==22)
	{
		FiniteRing* r=new FiniteRing(8,&g_R8_24Add[0][0],&g_R8_22Mul[0][0],0);
		return r;
	}	
	if(i==39)
	{
		FiniteRing* r=new FiniteRing(8,&g_F8Add[0][0],&g_R8_39Mul[0][0],0);
		return r;
	}		
	return NULL;
}

IRing* FiniteRing::newR16(int i){
	static int g_R16_6Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1},
		{3,2,5,4,7,6,9,8,11,10,13,12,15,14,1,0},
		{4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3},
		{5,4,7,6,9,8,11,10,13,12,15,14,1,0,3,2},
		{6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5},
		{7,6,9,8,11,10,13,12,15,14,1,0,3,2,5,4},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9},
		{11,10,13,12,15,14,1,0,3,2,5,4,7,6,9,8},
		{12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11},
		{13,12,15,14,1,0,3,2,5,4,7,6,9,8,11,10},
		{14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13},
		{15,14,1,0,3,2,5,4,7,6,9,8,11,10,13,12},
	};
	static int g_R16_6Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,0,4,4,8,8,12,12,0,0,4,4,8,8,12,12},
		{0,1,4,5,8,9,12,13,0,1,4,5,8,9,12,13},
		{0,0,6,6,12,12,2,2,8,8,14,14,4,4,10,10},
		{0,1,6,7,12,13,2,3,8,9,14,15,4,5,10,11},
		{0,0,8,8,0,0,8,8,0,0,8,8,0,0,8,8},
		{0,1,8,9,0,1,8,9,0,1,8,9,0,1,8,9},
		{0,0,10,10,4,4,14,14,8,8,2,2,12,12,6,6},
		{0,1,10,11,4,5,14,15,8,9,2,3,12,13,6,7},
		{0,0,12,12,8,8,4,4,0,0,12,12,8,8,4,4},
		{0,1,12,13,8,9,4,5,0,1,12,13,8,9,4,5},
		{0,0,14,14,12,12,10,10,8,8,6,6,4,4,2,2},
		{0,1,14,15,12,13,10,11,8,9,6,7,4,5,2,3},
	};	
	static int g_R16_13Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1},
		{3,2,5,4,7,6,9,8,11,10,13,12,15,14,1,0},
		{4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3},
		{5,4,7,6,9,8,11,10,13,12,15,14,1,0,3,2},
		{6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5},
		{7,6,9,8,11,10,13,12,15,14,1,0,3,2,5,4},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9},
		{11,10,13,12,15,14,1,0,3,2,5,4,7,6,9,8},
		{12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11},
		{13,12,15,14,1,0,3,2,5,4,7,6,9,8,11,10},
		{14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13},
		{15,14,1,0,3,2,5,4,7,6,9,8,11,10,13,12},
	};
	static int g_R16_13Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
	};	
	static int g_R16_14Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1},
		{3,2,5,4,7,6,9,8,11,10,13,12,15,14,1,0},
		{4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3},
		{5,4,7,6,9,8,11,10,13,12,15,14,1,0,3,2},
		{6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5},
		{7,6,9,8,11,10,13,12,15,14,1,0,3,2,5,4},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9},
		{11,10,13,12,15,14,1,0,3,2,5,4,7,6,9,8},
		{12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11},
		{13,12,15,14,1,0,3,2,5,4,7,6,9,8,11,10},
		{14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13},
		{15,14,1,0,3,2,5,4,7,6,9,8,11,10,13,12},
	};
	static int g_R16_14Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,4,4,8,8,12,12,0,0,4,4,8,8,12,12},
		{0,1,4,5,8,9,12,13,0,1,4,5,8,9,12,13},
		{0,0,8,8,0,0,8,8,0,0,8,8,0,0,8,8},
		{0,1,8,9,0,1,8,9,0,1,8,9,0,1,8,9},
		{0,0,12,12,8,8,4,4,0,0,12,12,8,8,4,4},
		{0,1,12,13,8,9,4,5,0,1,12,13,8,9,4,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,4,4,8,8,12,12,0,0,4,4,8,8,12,12},
		{0,1,4,5,8,9,12,13,0,1,4,5,8,9,12,13},
		{0,0,8,8,0,0,8,8,0,0,8,8,0,0,8,8},
		{0,1,8,9,0,1,8,9,0,1,8,9,0,1,8,9},
		{0,0,12,12,8,8,4,4,0,0,12,12,8,8,4,4},
		{0,1,12,13,8,9,4,5,0,1,12,13,8,9,4,5},
	};	
	static int g_R16_15Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,6,7,8,9,10,11,12,13,4,5,14,15,0,1},
		{3,2,7,6,9,8,11,10,13,12,5,4,15,14,1,0},
		{4,5,8,9,0,1,12,13,2,3,14,15,6,7,10,11},
		{5,4,9,8,1,0,13,12,3,2,15,14,7,6,11,10},
		{6,7,10,11,12,13,4,5,14,15,8,9,0,1,2,3},
		{7,6,11,10,13,12,5,4,15,14,9,8,1,0,3,2},
		{8,9,12,13,2,3,14,15,6,7,0,1,10,11,4,5},
		{9,8,13,12,3,2,15,14,7,6,1,0,11,10,5,4},
		{10,11,4,5,14,15,8,9,0,1,12,13,2,3,6,7},
		{11,10,5,4,15,14,9,8,1,0,13,12,3,2,7,6},
		{12,13,14,15,6,7,0,1,10,11,2,3,4,5,8,9},
		{13,12,15,14,7,6,1,0,11,10,3,2,5,4,9,8},
		{14,15,0,1,10,11,2,3,4,5,6,7,8,9,12,13},
		{15,14,1,0,11,10,3,2,5,4,7,6,9,8,13,12},
	};
	static int g_R16_15Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,4,4,0,0,0,0,4,4,4,4,0,0,4,4},
		{0,1,4,5,0,1,0,1,4,5,4,5,0,1,4,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,4,4,0,0,0,0,4,4,4,4,0,0,4,4},
		{0,1,4,5,0,1,0,1,4,5,4,5,0,1,4,5},
		{0,0,4,4,0,0,0,0,4,4,4,4,0,0,4,4},
		{0,1,4,5,0,1,0,1,4,5,4,5,0,1,4,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,4,4,0,0,0,0,4,4,4,4,0,0,4,4},
		{0,1,4,5,0,1,0,1,4,5,4,5,0,1,4,5},
	};
	static int g_R16_28Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,4,5,0,6,8,9,3,10,12,13,7,14,15,11},
		{2,4,0,6,1,8,3,10,5,12,7,14,9,15,11,13},
		{3,5,6,7,8,9,10,11,12,13,14,2,15,4,0,1},
		{4,0,1,8,2,3,5,12,6,7,9,15,10,11,13,14},
		{5,6,8,9,3,10,12,13,7,14,15,4,11,0,1,2},
		{6,8,3,10,5,12,7,14,9,15,11,0,13,1,2,4},
		{7,9,10,11,12,13,14,2,15,4,0,6,1,8,3,5},
		{8,3,5,12,6,7,9,15,10,11,13,1,14,2,4,0},
		{9,10,12,13,7,14,15,4,11,0,1,8,2,3,5,6},
		{10,12,7,14,9,15,11,0,13,1,2,3,4,5,6,8},
		{11,13,14,2,15,4,0,6,1,8,3,10,5,12,7,9},
		{12,7,9,15,10,11,13,1,14,2,4,5,0,6,8,3},
		{13,14,15,4,11,0,1,8,2,3,5,12,6,7,9,10},
		{14,15,11,0,13,1,2,3,4,5,6,7,8,9,10,12},
		{15,11,13,1,14,2,4,5,0,6,8,9,3,10,12,7},
	};
	static int g_R16_28Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_29Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,8,9,10,11,12,13,14,15,2,3,0,1},
		{5,6,7,4,9,10,11,8,13,14,15,12,3,0,1,2},
		{6,7,4,5,10,11,8,9,14,15,12,13,0,1,2,3},
		{7,4,5,6,11,8,9,10,15,12,13,14,1,2,3,0},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,2,3,0,1,6,7,4,5,10,11,8,9},
		{13,14,15,12,3,0,1,2,7,4,5,6,11,8,9,10},
		{14,15,12,13,0,1,2,3,4,5,6,7,8,9,10,11},
		{15,12,13,14,1,2,3,0,5,6,7,4,9,10,11,8},
	};
	static int g_R16_29Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
	};	
	static int g_R16_30Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,4,5,3,6,7,0,9,10,12,13,11,14,15,8},
		{2,4,3,6,5,7,0,1,10,12,11,14,13,15,8,9},
		{3,5,6,0,7,1,2,4,11,13,14,8,15,9,10,12},
		{4,3,5,7,6,0,1,2,12,11,13,15,14,8,9,10},
		{5,6,7,1,0,2,4,3,13,14,15,9,8,10,12,11},
		{6,7,0,2,1,4,3,5,14,15,8,10,9,12,11,13},
		{7,0,1,4,2,3,5,6,15,8,9,12,10,11,13,14},
		{8,9,10,11,12,13,14,15,3,5,6,0,7,1,2,4},
		{9,10,12,13,11,14,15,8,5,6,7,1,0,2,4,3},
		{10,12,11,14,13,15,8,9,6,7,0,2,1,4,3,5},
		{11,13,14,8,15,9,10,12,0,1,2,3,4,5,6,7},
		{12,11,13,15,14,8,9,10,7,0,1,4,2,3,5,6},
		{13,14,15,9,8,10,12,11,1,2,4,5,3,6,7,0},
		{14,15,8,10,9,12,11,13,2,4,3,6,5,7,0,1},
		{15,8,9,12,10,11,13,14,4,3,5,7,6,0,1,2},
	};
	static int g_R16_30Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,3,0,6,2,3,6,0,2,3,0,6,2,3,6},
		{0,3,0,0,3,3,0,3,0,3,0,0,3,3,0,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,3,0,2,6,3,2,0,6,3,0,2,6,3,2},
		{0,2,3,0,6,2,3,6,0,2,3,0,6,2,3,6},
		{0,3,0,0,3,3,0,3,0,3,0,0,3,3,0,3},
		{0,6,3,0,2,6,3,2,0,6,3,0,2,6,3,2},
		{0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3},
		{0,2,3,0,6,2,3,6,3,6,0,3,2,6,0,2},
		{0,3,0,0,3,3,0,3,3,0,3,3,0,0,3,0},
		{0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3},
		{0,6,3,0,2,6,3,2,3,2,0,3,6,2,0,6},
		{0,2,3,0,6,2,3,6,3,6,0,3,2,6,0,2},
		{0,3,0,0,3,3,0,3,3,0,3,3,0,0,3,0},
		{0,6,3,0,2,6,3,2,3,2,0,3,6,2,0,6},
	};	
	static int g_R16_31Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,8,9,10,11,12,13,14,15,2,3,0,1},
		{5,6,7,4,9,10,11,8,13,14,15,12,3,0,1,2},
		{6,7,4,5,10,11,8,9,14,15,12,13,0,1,2,3},
		{7,4,5,6,11,8,9,10,15,12,13,14,1,2,3,0},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,2,3,0,1,6,7,4,5,10,11,8,9},
		{13,14,15,12,3,0,1,2,7,4,5,6,11,8,9,10},
		{14,15,12,13,0,1,2,3,4,5,6,7,8,9,10,11},
		{15,12,13,14,1,2,3,0,5,6,7,4,9,10,11,8},
	};
	static int g_R16_31Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_32Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,4,7,8,6,9,13,14,0,12,10,15,5,11,2},
		{2,4,6,8,9,10,12,14,0,15,7,3,13,11,1,5},
		{3,7,8,13,14,9,0,5,11,1,15,12,2,6,10,4},
		{4,8,9,14,0,12,15,11,1,2,13,7,5,10,3,6},
		{5,6,10,9,12,3,7,0,15,13,8,4,14,1,2,11},
		{6,9,12,0,15,7,13,1,2,5,14,8,11,3,4,10},
		{7,13,14,5,11,0,1,6,10,3,2,15,4,9,12,8},
		{8,14,0,11,1,15,2,10,3,4,5,13,6,12,7,9},
		{9,0,15,1,2,13,5,3,4,6,11,14,10,7,8,12},
		{10,12,7,15,13,8,14,2,5,11,0,9,1,4,6,3},
		{11,10,3,12,7,4,8,15,13,14,9,6,0,2,5,1},
		{12,15,13,2,5,14,11,4,6,10,1,0,3,8,9,7},
		{13,5,11,6,10,1,3,9,12,7,4,2,8,0,15,14},
		{14,11,1,10,3,2,4,12,7,8,6,5,9,15,13,0},
		{15,2,5,4,6,11,10,8,9,12,3,1,7,14,0,13},
	};
	static int g_R16_32Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,2,5,6,10,11,3,12,7,8,4,1,9,13,14,15},
		{0,3,6,13,0,3,13,6,3,6,0,6,3,0,13,13},
		{0,4,10,0,13,4,0,4,10,4,13,10,10,0,13,13},
		{0,5,11,3,4,1,6,9,12,7,10,2,8,13,14,15},
		{0,6,3,13,0,6,13,3,6,3,0,3,6,0,13,13},
		{0,7,12,6,4,9,3,1,11,5,10,8,2,13,15,14},
		{0,8,7,3,10,12,6,11,5,2,4,9,1,13,15,14},
		{0,9,8,6,4,7,3,5,2,1,10,12,11,13,15,14},
		{0,10,4,0,13,10,0,10,4,10,13,4,4,0,13,13},
		{0,11,1,6,10,2,3,8,9,12,4,5,7,13,14,15},
		{0,12,9,3,10,8,6,2,1,11,4,7,5,13,15,14},
		{0,13,13,0,0,13,0,13,13,13,0,13,13,0,0,0},
		{0,14,14,13,13,14,13,15,15,15,13,14,15,0,0,0},
		{0,15,15,13,13,15,13,14,14,14,13,15,14,0,0,0},
	};	
	static int g_R16_33Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,4,5,0,6,8,9,3,10,12,13,7,14,15,11},
		{2,4,0,6,1,8,3,10,5,12,7,14,9,15,11,13},
		{3,5,6,7,8,9,10,11,12,13,14,2,15,4,0,1},
		{4,0,1,8,2,3,5,12,6,7,9,15,10,11,13,14},
		{5,6,8,9,3,10,12,13,7,14,15,4,11,0,1,2},
		{6,8,3,10,5,12,7,14,9,15,11,0,13,1,2,4},
		{7,9,10,11,12,13,14,2,15,4,0,6,1,8,3,5},
		{8,3,5,12,6,7,9,15,10,11,13,1,14,2,4,0},
		{9,10,12,13,7,14,15,4,11,0,1,8,2,3,5,6},
		{10,12,7,14,9,15,11,0,13,1,2,3,4,5,6,8},
		{11,13,14,2,15,4,0,6,1,8,3,10,5,12,7,9},
		{12,7,9,15,10,11,13,1,14,2,4,5,0,6,8,3},
		{13,14,15,4,11,0,1,8,2,3,5,12,6,7,9,10},
		{14,15,11,0,13,1,2,3,4,5,6,7,8,9,10,12},
		{15,11,13,1,14,2,4,5,0,6,8,9,3,10,12,7},
	};
	static int g_R16_33Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
	};	
	static int g_R16_34Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,7,2,8,9,3,5,6,13,14,15,10,11,12},
		{2,4,6,10,9,11,12,13,14,15,5,0,3,8,1,7},
		{3,7,10,0,13,6,5,1,9,8,2,12,11,4,15,14},
		{4,2,9,13,6,14,15,10,11,12,8,1,7,5,0,3},
		{5,8,11,6,14,3,0,9,7,1,12,10,2,15,13,4},
		{6,9,12,5,15,0,3,8,1,7,11,2,10,14,4,13},
		{7,3,13,1,10,9,8,0,6,5,4,15,14,2,12,11},
		{8,5,14,9,11,7,1,6,3,0,15,13,4,12,10,2},
		{9,6,15,8,12,1,7,5,0,3,14,4,13,11,2,10},
		{10,13,5,2,8,12,11,4,15,14,6,3,0,9,7,1},
		{11,14,0,12,1,10,2,15,13,4,3,5,6,7,8,9},
		{12,15,3,11,7,2,10,14,4,13,0,6,5,1,9,8},
		{13,10,8,4,5,15,14,2,12,11,9,7,1,6,3,0},
		{14,11,1,15,0,13,4,12,10,2,7,8,9,3,5,6},
		{15,12,7,14,3,4,13,11,2,10,1,9,8,0,6,5},
	};
	static int g_R16_34Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,3,0,0,3,3,3,0,0,0,3,3,3},
		{0,3,5,0,6,3,3,3,0,0,5,6,6,6,5,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,5,0,5,3,3,0,3,3,5,6,6,5,6,6},
		{0,0,3,0,3,0,0,0,0,0,3,3,3,3,3,3},
		{0,0,3,0,3,0,0,0,0,0,3,3,3,3,3,3},
		{0,3,0,0,3,0,0,3,3,3,0,0,0,3,3,3},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,5,0,6,3,3,3,0,0,5,6,6,6,5,5},
		{0,3,6,0,5,3,3,3,0,0,6,5,5,5,6,6},
		{0,3,6,0,5,3,3,3,0,0,6,5,5,5,6,6},
		{0,0,5,0,5,3,3,0,3,3,5,6,6,5,6,6},
		{0,0,6,0,6,3,3,0,3,3,6,5,5,6,5,5},
		{0,0,6,0,6,3,3,0,3,3,6,5,5,6,5,5},
	};	
	// static int g_R16_70Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,3,5,7,8,9,10,0,6,13,4,14,15,2,12,11},
		// {2,5,6,9,11,10,12,13,14,4,15,3,0,8,7,1},
		// {3,7,9,0,6,13,4,1,10,2,8,12,11,5,15,14},
		// {4,8,11,6,0,14,3,10,1,12,7,2,9,15,5,13},
		// {5,9,10,13,14,4,15,2,12,8,11,7,1,6,0,3},
		// {6,10,12,4,3,15,0,8,7,11,1,9,2,14,13,5},
		// {7,0,13,1,10,2,8,3,4,5,6,15,14,9,11,12},
		// {8,6,14,10,1,12,7,4,3,15,0,5,13,11,9,2},
		// {9,13,4,2,12,8,11,5,15,6,14,0,3,10,1,7},
		// {10,4,15,8,7,11,1,6,0,14,3,13,5,12,2,9},
		// {11,14,3,12,2,7,9,15,5,0,13,6,4,1,10,8},
		// {12,15,0,11,9,1,2,14,13,3,5,4,6,7,8,10},
		// {13,2,8,5,15,6,14,9,11,10,12,1,7,4,3,0},
		// {14,12,7,15,5,0,13,11,9,1,2,10,8,3,4,6},
		// {15,11,1,14,13,3,5,12,2,7,9,8,10,0,6,4},
	// };
	// static int g_R16_70Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		// {0,4,6,0,0,3,0,4,4,6,4,6,6,3,3,3},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,6,3,0,0,4,0,6,6,3,6,3,3,4,4,4},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		// {0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		// {0,4,6,0,0,3,0,4,4,6,4,6,6,3,3,3},
		// {0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		// {0,4,6,0,0,3,0,4,4,6,4,6,6,3,3,3},
		// {0,4,6,0,0,3,0,4,4,6,4,6,6,3,3,3},
		// {0,6,3,0,0,4,0,6,6,3,6,3,3,4,4,4},
		// {0,6,3,0,0,4,0,6,6,3,6,3,3,4,4,4},
		// {0,6,3,0,0,4,0,6,6,3,6,3,3,4,4,4},
	// };
	static int g_R16_118Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,10,9,14,13,12,0,15,3,2,1,6,5,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,13,12,15,3,2,1,7,6,5,4,10,9,8,0},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,3,2,7,6,5,4,11,10,9,8,13,12,0,1},
		{15,7,6,5,11,10,9,8,14,13,12,0,3,2,1,4},
	};
	static int g_R16_118Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
	};	
	static int g_R16_119Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,9,10,7,11,12,0,14,3,13,15,2,8},
		{2,5,4,8,10,9,12,13,7,14,0,15,11,3,1,6},
		{3,6,8,0,7,12,1,4,2,11,13,9,5,10,15,14},
		{4,9,10,7,0,14,11,3,13,1,2,6,15,8,5,12},
		{5,10,9,12,14,0,13,15,11,2,1,8,3,6,4,7},
		{6,7,12,1,11,13,4,9,5,3,15,0,10,14,8,2},
		{7,11,13,4,3,15,9,0,10,6,8,1,14,2,12,5},
		{8,12,7,2,13,11,5,10,4,15,3,14,9,0,6,1},
		{9,0,14,11,1,2,3,6,15,4,5,7,8,12,10,13},
		{10,14,0,13,2,1,15,8,3,5,4,12,6,7,9,11},
		{11,3,15,9,6,8,0,1,14,7,12,4,2,5,13,10},
		{12,13,11,5,15,3,10,14,9,8,6,2,0,1,7,4},
		{13,15,3,10,8,6,14,2,0,12,7,5,1,4,11,9},
		{14,2,1,15,5,4,8,12,6,10,9,13,7,11,0,3},
		{15,8,6,14,12,7,2,5,1,13,11,10,4,9,3,0},
	};
	static int g_R16_119Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,2,1,7,4,5,13,3,11,10,9,8,15,6,14,12},
		{0,3,3,0,0,0,3,0,3,3,3,3,0,3,0,0},
		{0,4,4,0,0,0,4,0,4,4,4,4,0,4,0,0},
		{0,5,5,4,0,0,14,4,14,5,5,14,4,14,0,4},
		{0,6,8,3,4,5,1,7,2,11,13,9,12,10,14,15},
		{0,7,7,0,0,0,7,0,7,7,7,7,0,7,0,0},
		{0,8,6,7,4,5,10,3,9,13,11,2,15,1,14,12},
		{0,9,10,3,4,5,11,7,13,1,2,6,12,8,14,15},
		{0,10,9,7,4,5,8,3,6,2,1,13,15,11,14,12},
		{0,11,13,3,4,5,9,7,10,6,8,1,12,2,14,15},
		{0,12,12,4,0,0,15,4,15,12,12,15,4,15,0,4},
		{0,13,11,7,4,5,2,3,1,8,6,10,15,9,14,12},
		{0,14,14,4,0,0,5,4,5,14,14,5,4,5,0,4},
		{0,15,15,4,0,0,12,4,12,15,15,12,4,12,0,4},
	};	
	static int g_R16_120Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,7,2,3,4,13,11,12,9,10,8,15,14},
		{2,5,4,9,10,7,11,12,14,8,0,13,1,15,3,6},
		{3,6,9,0,8,11,1,13,4,2,14,5,15,7,10,12},
		{4,7,10,8,0,12,13,1,3,14,2,15,5,6,9,11},
		{5,2,7,11,12,4,9,10,15,13,1,8,0,14,6,3},
		{6,3,11,1,13,9,0,8,7,5,15,2,14,4,12,10},
		{7,4,12,13,1,10,8,0,6,15,5,14,2,3,11,9},
		{8,13,14,4,3,15,7,6,0,10,9,12,11,1,2,5},
		{9,11,8,2,14,13,5,15,10,4,3,7,6,12,0,1},
		{10,12,0,14,2,1,15,5,9,3,4,6,7,11,8,13},
		{11,9,13,5,15,8,2,14,12,7,6,4,3,10,1,0},
		{12,10,1,15,5,0,14,2,11,6,7,3,4,9,13,8},
		{13,8,15,7,6,14,4,3,1,12,11,10,9,0,5,2},
		{14,15,3,10,9,6,12,11,2,0,8,1,13,5,4,7},
		{15,14,6,12,11,3,10,9,5,1,13,0,8,2,7,4},
	};
	static int g_R16_120Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,4,0,8,8,3,4,0,4,3,8,8,0,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,4,0,8,8,3,4,0,4,3,8,8,0,3},
		{0,8,4,4,0,3,3,8,4,0,4,8,3,3,0,8},
		{0,3,4,4,0,8,8,3,4,0,4,3,8,8,0,3},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,4,4,0,3,3,8,4,0,4,8,3,3,0,8},
		{0,3,4,4,0,8,8,3,4,0,4,3,8,8,0,3},
		{0,8,4,4,0,3,3,8,4,0,4,8,3,3,0,8},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,8,4,4,0,3,3,8,4,0,4,8,3,3,0,8},
	};	
	static int g_R16_121Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,4,6,7,8,0,10,11,12,2,13,14,5,15,9},
		{2,4,0,7,1,9,10,3,12,5,6,14,8,15,11,13},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,7,1,10,3,12,2,6,14,8,0,15,11,9,13,5},
		{5,8,9,11,12,0,13,14,1,2,15,3,4,6,7,10},
		{6,0,10,1,2,13,3,4,5,15,7,8,9,11,12,14},
		{7,10,3,2,6,14,4,0,15,11,1,9,13,12,5,8},
		{8,11,12,13,14,1,5,15,3,4,9,6,7,0,10,2},
		{9,12,5,14,8,2,15,11,4,0,13,7,1,10,3,6},
		{10,2,6,4,0,15,7,1,9,13,3,12,5,14,8,11},
		{11,13,14,5,15,3,8,9,6,7,12,0,10,1,2,4},
		{12,14,8,15,11,4,9,13,7,1,5,10,3,2,6,0},
		{13,5,15,8,9,6,11,12,0,10,14,1,2,3,4,7},
		{14,15,11,9,13,7,12,5,10,3,8,2,6,4,0,1},
		{15,9,13,12,5,10,14,8,2,6,11,4,0,7,1,3},
	};
	static int g_R16_121Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,3,3,3,3,0,0,0,3,3,0},
		{0,0,5,0,5,3,0,5,3,11,5,3,11,3,11,11},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,11,0,5,3,3,11,0,5,5,3,11,0,5,11},
		{0,0,3,0,3,0,0,3,0,3,3,0,3,0,3,3},
		{0,3,3,0,0,0,3,3,3,3,0,0,0,3,3,0},
		{0,0,5,0,5,3,0,5,3,11,5,3,11,3,11,11},
		{0,3,0,0,3,0,3,0,3,0,3,0,3,3,0,3},
		{0,0,11,0,11,3,0,11,3,5,11,3,5,3,5,5},
		{0,3,11,0,5,3,3,11,0,5,5,3,11,0,5,11},
		{0,0,3,0,3,0,0,3,0,3,3,0,3,0,3,3},
		{0,3,5,0,11,3,3,5,0,11,11,3,5,0,11,5},
		{0,3,0,0,3,0,3,0,3,0,3,0,3,3,0,3},
		{0,0,11,0,11,3,0,11,3,5,11,3,5,3,5,5},
		{0,3,5,0,11,3,3,5,0,11,11,3,5,0,11,5},
	};	
	static int g_R16_122Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,7,9,8,0,13,12,11,14,2,3,15,10},
		{2,5,0,10,9,1,11,12,14,4,3,6,7,15,8,13},
		{3,6,10,0,8,11,1,13,4,14,2,5,15,7,9,12},
		{4,7,9,8,0,12,13,1,3,2,14,15,5,6,10,11},
		{5,9,1,11,12,4,14,2,15,7,6,8,0,10,13,3},
		{6,8,11,1,13,14,4,3,7,15,5,9,10,0,12,2},
		{7,0,12,13,1,2,3,4,6,5,15,10,9,8,11,14},
		{8,13,14,4,3,15,7,6,0,10,9,12,11,1,2,5},
		{9,12,4,14,2,7,15,5,10,0,8,13,1,11,3,6},
		{10,11,3,2,14,6,5,15,9,8,0,1,13,12,4,7},
		{11,14,6,5,15,8,9,10,12,13,1,4,3,2,7,0},
		{12,2,7,15,5,0,10,9,11,1,13,3,4,14,6,8},
		{13,3,15,7,6,10,0,8,1,11,12,2,14,4,5,9},
		{14,15,8,9,10,13,12,11,2,3,4,7,6,5,0,1},
		{15,10,13,12,11,3,2,14,5,6,7,0,8,9,1,4},
	};
	static int g_R16_122Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,4,0,8,8,3,4,4,0,3,8,8,0,3},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,4,0,3,8,3,4,0,4,8,3,8,4,8},
		{0,8,4,4,0,3,3,8,4,4,0,8,3,3,0,8},
		{0,3,4,4,0,8,8,3,4,4,0,3,8,8,0,3},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,8,0,4,0,8,3,8,4,0,4,3,8,3,4,3},
		{0,3,0,4,0,3,8,3,4,0,4,8,3,8,4,8},
		{0,8,4,4,0,3,3,8,4,4,0,8,3,3,0,8},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,8,0,4,0,8,3,8,4,0,4,3,8,3,4,3},
	};	
	static int g_R16_123Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,6,9,8,11,10,12,0,15,13,7,5,2,3,14},
		{2,6,4,11,10,9,8,14,13,7,0,15,3,1,5,12},
		{3,9,11,4,15,6,7,13,14,8,12,10,2,5,1,0},
		{4,8,10,15,0,7,13,5,1,14,2,12,11,6,9,3},
		{5,11,9,6,7,4,15,0,12,10,14,8,1,3,2,13},
		{6,10,8,7,13,15,0,3,2,12,1,14,9,4,11,5},
		{7,12,14,13,5,0,3,4,11,2,9,1,8,15,10,6},
		{8,0,13,14,1,12,2,11,4,3,6,5,7,10,15,9},
		{9,15,7,8,14,10,12,2,3,0,5,13,6,11,4,1},
		{10,13,0,12,2,14,1,9,6,5,4,3,15,8,7,11},
		{11,7,15,10,12,8,14,1,5,13,3,0,4,9,6,2},
		{12,5,3,2,11,1,9,8,7,6,15,4,0,14,13,10},
		{13,2,1,5,6,3,4,15,10,11,8,9,14,0,12,7},
		{14,3,5,1,9,2,11,10,15,4,7,6,13,12,0,8},
		{15,14,12,0,3,13,5,6,9,1,11,2,10,7,8,4},
	};
	static int g_R16_123Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,8,4,10,6,2,15,14,7,12,11,13,9,1},
		{0,7,3,10,4,1,13,8,5,9,15,12,11,6,14,2},
		{0,8,10,15,4,7,6,5,1,9,2,11,12,13,14,3},
		{0,4,4,4,0,4,0,4,4,0,4,0,0,0,0,4},
		{0,2,8,7,4,3,13,15,10,14,1,11,12,6,9,5},
		{0,13,6,6,0,13,4,13,13,4,6,0,0,4,4,6},
		{0,10,1,5,4,15,13,3,2,14,8,11,12,6,9,7},
		{0,15,7,1,4,2,6,10,3,14,5,12,11,13,9,8},
		{0,14,14,9,0,9,0,9,14,4,14,4,4,0,4,9},
		{0,5,15,2,4,8,13,1,7,9,3,12,11,6,14,10},
		{0,11,12,11,0,12,4,12,11,0,12,4,4,4,0,11},
		{0,12,11,12,0,11,4,11,12,0,11,4,4,4,0,12},
		{0,6,13,13,0,6,4,6,6,4,13,0,0,4,4,13},
		{0,9,9,14,0,14,0,14,9,4,9,4,4,0,4,14},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
	};	
	static int g_R16_124Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,6,8,7,10,9,0,14,11,15,2,5,3,13,12},
		{2,6,4,12,9,13,7,11,5,0,3,1,14,15,10,8},
		{3,8,12,4,14,11,5,13,7,10,2,15,9,1,0,6},
		{4,7,9,14,0,15,11,1,13,2,12,6,10,8,3,5},
		{5,10,13,11,15,4,3,12,2,8,7,14,1,9,6,0},
		{6,9,7,5,11,3,0,2,10,1,8,4,13,12,15,14},
		{7,0,11,13,1,12,2,4,3,6,5,9,15,14,8,10},
		{8,14,5,7,13,2,10,3,0,15,6,12,11,4,1,9},
		{9,11,0,10,2,8,1,6,15,4,14,7,3,5,12,13},
		{10,15,3,2,12,7,8,5,6,14,0,13,4,11,9,1},
		{11,2,1,15,6,14,4,9,12,7,13,0,8,10,5,3},
		{12,5,14,9,10,1,13,15,11,3,4,8,0,6,2,7},
		{13,3,15,1,8,9,12,14,4,5,11,10,6,0,7,2},
		{14,13,10,0,3,6,15,8,1,12,9,5,2,7,4,11},
		{15,12,8,6,5,0,14,10,9,13,1,3,7,2,11,4},
	};
	static int g_R16_124Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,7,4,9,11,14,13,15,10,6,12,8,1,2},
		{0,5,3,9,4,7,11,15,8,14,12,6,10,13,2,1},
		{0,7,9,14,4,15,6,1,8,2,10,11,12,13,3,5},
		{0,4,4,4,0,4,0,4,0,4,0,0,0,0,4,4},
		{0,9,7,15,4,14,6,2,13,1,12,11,10,8,5,3},
		{0,11,11,6,0,6,0,11,4,11,4,0,4,4,6,6},
		{0,14,15,1,4,2,11,3,13,5,10,6,12,8,7,9},
		{0,13,8,8,0,13,4,13,4,8,0,4,0,4,8,13},
		{0,15,14,2,4,1,11,5,8,3,12,6,10,13,9,7},
		{0,10,12,10,0,12,4,10,0,12,4,4,4,0,10,12},
		{0,6,6,11,0,11,0,6,4,6,4,0,4,4,11,11},
		{0,12,10,12,0,10,4,12,0,10,4,4,4,0,12,10},
		{0,8,13,13,0,8,4,8,4,13,0,4,0,4,13,8},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,2,1,5,4,3,6,9,13,7,12,11,10,8,15,14},
	};	
	static int g_R16_126Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,6,2,8,3,9,5,7,12,13,10,11,15,14},
		{2,4,5,7,8,10,9,11,12,13,0,14,1,15,3,6},
		{3,6,7,0,9,11,1,2,13,4,14,5,15,8,10,12},
		{4,2,8,9,5,12,7,13,10,11,1,15,0,14,6,3},
		{5,8,10,11,12,0,13,14,1,15,2,3,4,6,7,9},
		{6,3,9,1,7,13,0,4,11,2,15,8,14,5,12,10},
		{7,9,11,2,13,14,4,5,15,8,3,10,6,12,0,1},
		{8,5,12,13,10,1,11,15,0,14,4,6,2,3,9,7},
		{9,7,13,4,11,15,2,8,14,5,6,12,3,10,1,0},
		{10,12,0,14,1,2,15,3,4,6,5,7,8,9,11,13},
		{11,13,14,5,15,3,8,10,6,12,7,0,9,1,2,4},
		{12,10,1,15,0,4,14,6,2,3,8,9,5,7,13,11},
		{13,11,15,8,14,6,5,12,3,10,9,1,7,0,4,2},
		{14,15,3,10,6,7,12,0,9,1,11,2,13,4,5,8},
		{15,14,6,12,3,9,10,1,7,0,13,4,11,2,8,5},
	};
	static int g_R16_126Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
	};	
	static int g_R16_127Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,10,2,14,13,5,4,15,3,9,8,6,12,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,13,5,15,3,9,8,7,6,12,0,10,2,1,4},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,3,9,7,6,12,0,11,10,2,1,13,5,4,8},
		{15,7,6,12,11,10,2,1,14,13,5,4,3,9,8,0},
	};
	static int g_R16_127Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
	};	
	static int g_R16_128Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		{2,5,3,10,11,7,12,13,14,15,0,6,4,1,9,8},
		{3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		{4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		{5,2,7,13,14,3,15,10,11,12,1,9,8,0,6,4},
		{6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		{7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		{8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		{9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		{10,13,0,2,12,1,11,5,15,14,3,4,6,7,8,9},
		{11,14,6,12,2,9,10,15,5,13,4,3,0,8,7,1},
		{12,15,4,11,10,8,2,14,13,5,6,0,3,9,1,7},
		{13,10,1,5,15,0,14,2,12,11,7,8,9,3,4,6},
		{14,11,9,15,5,6,13,12,2,10,8,7,1,4,3,0},
		{15,12,8,14,13,4,5,11,10,2,9,1,7,6,0,3},
	};
	static int g_R16_128Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
	};	
	static int g_R16_130Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,14,15,12,11,8,9,10,5,6,7,4,3,0,1,2},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,12,13,14,9,10,11,8,7,4,5,6,1,2,3,0},
	};
	static int g_R16_130Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
	};	
	static int g_R16_131Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,14,15,12,11,8,9,10,5,6,7,4,3,0,1,2},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,12,13,14,9,10,11,8,7,4,5,6,1,2,3,0},
	};
	static int g_R16_131Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
	};	
	static int g_R16_132Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,8,9,10,11,6,7,4,5,2,3,0,1},
		{13,14,15,12,9,10,11,8,7,4,5,6,3,0,1,2},
		{14,15,12,13,10,11,8,9,4,5,6,7,0,1,2,3},
		{15,12,13,14,11,8,9,10,5,6,7,4,1,2,3,0},
	};
	static int g_R16_132Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
	};	
	static int g_R16_133Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,8,9,10,11,6,7,4,5,2,3,0,1},
		{13,14,15,12,9,10,11,8,7,4,5,6,3,0,1,2},
		{14,15,12,13,10,11,8,9,4,5,6,7,0,1,2,3},
		{15,12,13,14,11,8,9,10,5,6,7,4,1,2,3,0},
	};
	static int g_R16_133Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
	};	
	static int g_R16_134Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,14,15,12,11,8,9,10,5,6,7,4,3,0,1,2},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,12,13,14,9,10,11,8,7,4,5,6,1,2,3,0},
	};
	static int g_R16_134Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
	};
	static int g_R16_135Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,14,15,12,11,8,9,10,5,6,7,4,3,0,1,2},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,12,13,14,9,10,11,8,7,4,5,6,1,2,3,0},
	};
	static int g_R16_135Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_136Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,14,15,12,11,8,9,10,5,6,7,4,3,0,1,2},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,12,13,14,9,10,11,8,7,4,5,6,1,2,3,0},
	};
	static int g_R16_136Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,2,0,2,8,10,8,10,2,0,2,0,10,8,10,8},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,2,0,2,8,10,8,10,2,0,2,0,10,8,10,8},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,2,0,2,10,8,10,8,2,0,2,0,8,10,8,10},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,2,0,2,10,8,10,8,2,0,2,0,8,10,8,10},
	};	
	static int g_R16_137Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3},
		{13,14,15,12,9,10,11,8,5,6,7,4,1,2,3,0},
		{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1},
		{15,12,13,14,11,8,9,10,7,4,5,6,3,0,1,2},
	};
	static int g_R16_137Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
	};	
	static int g_R16_138Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,6,7,4,3,0,1,2,13,14,15,12,11,8,9,10},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,4,5,6,1,2,3,0,15,12,13,14,9,10,11,8},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,10,11,8,9,6,7,4,5,0,1,2,3},
		{13,14,15,12,11,8,9,10,7,4,5,6,1,2,3,0},
		{14,15,12,13,8,9,10,11,4,5,6,7,2,3,0,1},
		{15,12,13,14,9,10,11,8,5,6,7,4,3,0,1,2},
	};
	static int g_R16_138Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
	};	
	static int g_R16_139Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,8,9,10,11,6,7,4,5,2,3,0,1},
		{13,14,15,12,9,10,11,8,7,4,5,6,3,0,1,2},
		{14,15,12,13,10,11,8,9,4,5,6,7,0,1,2,3},
		{15,12,13,14,11,8,9,10,5,6,7,4,1,2,3,0},
	};
	static int g_R16_139Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_140Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,2,3,0,1,6,7,4,5},
		{9,10,11,8,13,14,15,12,3,0,1,2,7,4,5,6},
		{10,11,8,9,14,15,12,13,0,1,2,3,4,5,6,7},
		{11,8,9,10,15,12,13,14,1,2,3,0,5,6,7,4},
		{12,13,14,15,8,9,10,11,6,7,4,5,2,3,0,1},
		{13,14,15,12,9,10,11,8,7,4,5,6,3,0,1,2},
		{14,15,12,13,10,11,8,9,4,5,6,7,0,1,2,3},
		{15,12,13,14,11,8,9,10,5,6,7,4,1,2,3,0},
	};
	static int g_R16_140Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
	};
	static int g_R16_141Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_141Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
	};	
	static int g_R16_142Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,3,2,14,6,5,0,15,10,9,1,13,12,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,6,5,15,10,9,1,7,13,12,4,3,2,8,0},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,10,9,7,13,12,4,11,3,2,8,6,5,0,1},
		{15,7,13,12,11,3,2,8,14,6,5,0,10,9,1,4},
	};
	static int g_R16_142Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
	};	
	static int g_R16_143Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_143Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_144Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,10,9,14,13,12,0,15,3,2,1,6,5,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,13,12,15,3,2,1,7,6,5,4,10,9,8,0},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,3,2,7,6,5,4,11,10,9,8,13,12,0,1},
		{15,7,6,5,11,10,9,8,14,13,12,0,3,2,1,4},
	};
	static int g_R16_144Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
	};	
	static int g_R16_145Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,10,2,14,13,5,4,15,3,9,8,6,12,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,13,5,15,3,9,8,7,6,12,0,10,2,1,4},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,3,9,7,6,12,0,11,10,2,1,13,5,4,8},
		{15,7,6,12,11,10,2,1,14,13,5,4,3,9,8,0},
	};
	static int g_R16_145Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
	};	
	static int g_R16_146Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,10,9,14,13,12,0,15,3,2,1,6,5,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,13,12,15,3,2,1,7,6,5,4,10,9,8,0},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,3,2,7,6,5,4,11,10,9,8,13,12,0,1},
		{15,7,6,5,11,10,9,8,14,13,12,0,3,2,1,4},
	};
	static int g_R16_146Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_147Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,6,7,8,9,10,5,0,3,14,13,15,12,2,11},
		{2,6,4,11,10,12,8,13,14,15,0,5,3,9,1,7},
		{3,7,11,0,5,4,13,1,9,8,12,2,10,6,15,14},
		{4,8,10,5,0,3,14,9,1,7,2,12,11,15,6,13},
		{5,9,12,4,3,0,15,8,7,1,11,10,2,14,13,6},
		{6,10,8,13,14,15,0,12,2,11,1,9,7,3,4,5},
		{7,5,13,1,9,8,12,4,3,0,15,6,14,10,11,2},
		{8,0,14,9,1,7,2,3,4,5,6,15,13,11,10,12},
		{9,3,15,8,7,1,11,0,5,4,13,14,6,2,12,10},
		{10,14,0,12,2,11,1,15,6,13,4,3,5,7,8,9},
		{11,13,5,2,12,10,9,6,15,14,3,4,0,8,7,1},
		{12,15,3,10,11,2,7,14,13,6,5,0,4,1,9,8},
		{13,12,9,6,15,14,3,10,11,2,7,8,1,0,5,4},
		{14,2,1,15,6,13,4,11,10,12,8,7,9,5,0,3},
		{15,11,7,14,13,6,5,2,12,10,9,1,8,4,3,0},
	};
	static int g_R16_147Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		{0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		{0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		{0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		{0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		{0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
	};	
	static int g_R16_148Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		{2,5,3,10,11,7,12,13,14,15,0,6,4,1,9,8},
		{3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		{4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		{5,2,7,13,14,3,15,10,11,12,1,9,8,0,6,4},
		{6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		{7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		{8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		{9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		{10,13,0,2,12,1,11,5,15,14,3,4,6,7,8,9},
		{11,14,6,12,2,9,10,15,5,13,4,3,0,8,7,1},
		{12,15,4,11,10,8,2,14,13,5,6,0,3,9,1,7},
		{13,10,1,5,15,0,14,2,12,11,7,8,9,3,4,6},
		{14,11,9,15,5,6,13,12,2,10,8,7,1,4,3,0},
		{15,12,8,14,13,4,5,11,10,2,9,1,7,6,0,3},
	};
	static int g_R16_148Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
	};	
	// static int g_R16_149Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,4,6,7,8,9,10,5,0,3,14,13,15,12,2,11},
		// {2,6,0,11,10,12,1,13,14,15,4,3,5,7,8,9},
		// {3,7,11,0,5,4,13,1,9,8,12,2,10,6,15,14},
		// {4,8,10,5,0,3,14,9,1,7,2,12,11,15,6,13},
		// {5,9,12,4,3,0,15,8,7,1,11,10,2,14,13,6},
		// {6,10,1,13,14,15,4,12,2,11,8,7,9,5,0,3},
		// {7,5,13,1,9,8,12,4,3,0,15,6,14,10,11,2},
		// {8,0,14,9,1,7,2,3,4,5,6,15,13,11,10,12},
		// {9,3,15,8,7,1,11,0,5,4,13,14,6,2,12,10},
		// {10,14,4,12,2,11,8,15,6,13,0,5,3,9,1,7},
		// {11,13,3,2,12,10,7,6,15,14,5,0,4,1,9,8},
		// {12,15,5,10,11,2,9,14,13,6,3,4,0,8,7,1},
		// {13,12,7,6,15,14,5,10,11,2,9,1,8,4,3,0},
		// {14,2,8,15,6,13,0,11,10,12,1,9,7,3,4,5},
		// {15,11,9,14,13,6,3,2,12,10,7,8,1,0,5,4},
	// };
	// static int g_R16_149Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		// {0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		// {0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		// {0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		// {0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		// {0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		// {0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		// {0,4,3,0,0,0,5,4,4,4,3,3,3,5,5,5},
		// {0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		// {0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
		// {0,5,4,0,0,0,3,5,5,5,4,4,4,3,3,3},
	// };	
/* 	static int g_R16_152Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3},
		{5,4,7,6,9,8,11,10,13,12,15,14,1,0,3,2},
		{6,7,4,5,10,11,8,9,14,15,12,13,2,3,0,1},
		{7,6,5,4,11,10,9,8,15,14,13,12,3,2,1,0},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11},
		{13,12,15,14,1,0,3,2,5,4,7,6,9,8,11,10},
		{14,15,12,13,2,3,0,1,6,7,4,5,10,11,8,9},
		{15,14,13,12,3,2,1,0,7,6,5,4,11,10,9,8},
	};
	static int g_R16_152Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
		{0,0,8,8,8,8,0,0,0,0,8,8,8,8,0,0},
	};	 */
/* 	static int g_R16_153Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,7,2,8,9,3,5,6,13,14,15,10,11,12},
		{2,4,5,10,8,11,12,13,14,15,6,0,3,9,1,7},
		{3,7,10,0,13,6,5,1,9,8,2,12,11,4,15,14},
		{4,2,8,13,5,14,15,10,11,12,9,1,7,6,0,3},
		{5,8,11,6,14,0,3,9,1,7,12,2,10,15,4,13},
		{6,9,12,5,15,3,0,8,7,1,11,10,2,14,13,4},
		{7,3,13,1,10,9,8,0,6,5,4,15,14,2,12,11},
		{8,5,14,9,11,1,7,6,0,3,15,4,13,12,2,10},
		{9,6,15,8,12,7,1,5,3,0,14,13,4,11,10,2},
		{10,13,6,2,9,12,11,4,15,14,5,3,0,8,7,1},
		{11,14,0,12,1,2,10,15,4,13,3,5,6,7,8,9},
		{12,15,3,11,7,10,2,14,13,4,0,6,5,1,9,8},
		{13,10,9,4,6,15,14,2,12,11,8,7,1,5,3,0},
		{14,11,1,15,0,4,13,12,2,10,7,8,9,3,5,6},
		{15,12,7,14,3,13,4,11,10,2,1,9,8,0,6,5},
	};
	static int g_R16_153Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,5,6,0,3,0,0,5,5,5,6,6,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,5,0,3,0,0,6,6,6,5,5,5,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,5,6,0,3,0,0,5,5,5,6,6,6,3,3,3},
		{0,5,6,0,3,0,0,5,5,5,6,6,6,3,3,3},
		{0,5,6,0,3,0,0,5,5,5,6,6,6,3,3,3},
		{0,6,5,0,3,0,0,6,6,6,5,5,5,3,3,3},
		{0,6,5,0,3,0,0,6,6,6,5,5,5,3,3,3},
		{0,6,5,0,3,0,0,6,6,6,5,5,5,3,3,3},
	};	
	static int g_R16_155Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,6,7,8,9,10,5,0,3,14,13,15,12,2,11},
		{2,6,0,11,10,12,1,13,14,15,4,3,5,7,8,9},
		{3,7,11,0,5,4,13,1,9,8,12,2,10,6,15,14},
		{4,8,10,5,0,3,14,9,1,7,2,12,11,15,6,13},
		{5,9,12,4,3,0,15,8,7,1,11,10,2,14,13,6},
		{6,10,1,13,14,15,4,12,2,11,8,7,9,5,0,3},
		{7,5,13,1,9,8,12,4,3,0,15,6,14,10,11,2},
		{8,0,14,9,1,7,2,3,4,5,6,15,13,11,10,12},
		{9,3,15,8,7,1,11,0,5,4,13,14,6,2,12,10},
		{10,14,4,12,2,11,8,15,6,13,0,5,3,9,1,7},
		{11,13,3,2,12,10,7,6,15,14,5,0,4,1,9,8},
		{12,15,5,10,11,2,9,14,13,6,3,4,0,8,7,1},
		{13,12,7,6,15,14,5,10,11,2,9,1,8,4,3,0},
		{14,2,8,15,6,13,0,11,10,12,1,9,7,3,4,5},
		{15,11,9,14,13,6,3,2,12,10,7,8,1,0,5,4},
	};
	static int g_R16_155Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,0,0,0,0,3,3,3,3,0,0,0,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,5,0,0,0,5,0,0,0,5,5,5,5,5,5},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,5,0,0,0,4,3,3,3,5,5,5,4,4,4},
		{0,3,0,0,0,0,3,3,3,3,0,0,0,3,3,3},
		{0,3,0,0,0,0,3,3,3,3,0,0,0,3,3,3},
		{0,3,0,0,0,0,3,3,3,3,0,0,0,3,3,3},
		{0,0,5,0,0,0,5,0,0,0,5,5,5,5,5,5},
		{0,0,5,0,0,0,5,0,0,0,5,5,5,5,5,5},
		{0,0,5,0,0,0,5,0,0,0,5,5,5,5,5,5},
	};	 */
	static int g_R16_156Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,2,3,0,1,12,13,14,15,10,11,8,9},
		{5,4,7,6,3,2,1,0,13,12,15,14,11,10,9,8},
		{6,7,4,5,0,1,2,3,14,15,12,13,8,9,10,11},
		{7,6,5,4,1,0,3,2,15,14,13,12,9,8,11,10},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,10,11,8,9,4,5,6,7,2,3,0,1},
		{13,12,15,14,11,10,9,8,5,4,7,6,3,2,1,0},
		{14,15,12,13,8,9,10,11,6,7,4,5,0,1,2,3},
		{15,14,13,12,9,8,11,10,7,6,5,4,1,0,3,2},
	};
	static int g_R16_156Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};
	// static int g_R16_159Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		// {2,5,6,10,11,9,12,13,14,15,4,3,0,8,7,1},
		// {3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		// {4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		// {5,2,9,13,14,6,15,10,11,12,8,7,1,4,3,0},
		// {6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		// {7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		// {8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		// {9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		// {10,13,4,2,12,8,11,5,15,14,6,0,3,9,1,7},
		// {11,14,3,12,2,7,10,15,5,13,0,6,4,1,9,8},
		// {12,15,0,11,10,1,2,14,13,5,3,4,6,7,8,9},
		// {13,10,8,5,15,4,14,2,12,11,9,1,7,6,0,3},
		// {14,11,7,15,5,3,13,12,2,10,1,9,8,0,6,4},
		// {15,12,1,14,13,0,5,11,10,2,7,8,9,3,4,6},
	// };
	// static int g_R16_159Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		// {0,6,4,0,0,3,0,6,6,6,4,4,4,3,3,3},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,4,0,0,0,4,0,4,4,4,0,0,0,4,4,4},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		// {0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		// {0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		// {0,6,4,0,0,3,0,6,6,6,4,4,4,3,3,3},
		// {0,6,4,0,0,3,0,6,6,6,4,4,4,3,3,3},
		// {0,6,4,0,0,3,0,6,6,6,4,4,4,3,3,3},
		// {0,4,0,0,0,4,0,4,4,4,0,0,0,4,4,4},
		// {0,4,0,0,0,4,0,4,4,4,0,0,0,4,4,4},
		// {0,4,0,0,0,4,0,4,4,4,0,0,0,4,4,4},
	// };	
/* 	static int g_R16_160Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,7,2,8,9,3,5,6,13,14,15,10,11,12},
		{2,4,6,10,9,11,12,13,14,15,5,3,0,8,7,1},
		{3,7,10,0,13,6,5,1,9,8,2,12,11,4,15,14},
		{4,2,9,13,6,14,15,10,11,12,8,7,1,5,3,0},
		{5,8,11,6,14,0,3,9,1,7,12,2,10,15,4,13},
		{6,9,12,5,15,3,0,8,7,1,11,10,2,14,13,4},
		{7,3,13,1,10,9,8,0,6,5,4,15,14,2,12,11},
		{8,5,14,9,11,1,7,6,0,3,15,4,13,12,2,10},
		{9,6,15,8,12,7,1,5,3,0,14,13,4,11,10,2},
		{10,13,5,2,8,12,11,4,15,14,6,0,3,9,1,7},
		{11,14,3,12,7,2,10,15,4,13,0,6,5,1,9,8},
		{12,15,0,11,1,10,2,14,13,4,3,5,6,7,8,9},
		{13,10,8,4,5,15,14,2,12,11,9,1,7,6,0,3},
		{14,11,7,15,3,4,13,12,2,10,1,9,8,0,6,5},
		{15,12,1,14,0,13,4,11,10,2,7,8,9,3,5,6},
	};
	static int g_R16_160Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,5,0,0,5,0,0,5,5,5,0,0,0,5,5,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,6,3,0,5,0,0,6,6,6,3,3,3,5,5,5},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,5,0,0,5,0,0,5,5,5,0,0,0,5,5,5},
		{0,5,0,0,5,0,0,5,5,5,0,0,0,5,5,5},
		{0,5,0,0,5,0,0,5,5,5,0,0,0,5,5,5},
		{0,6,3,0,5,0,0,6,6,6,3,3,3,5,5,5},
		{0,6,3,0,5,0,0,6,6,6,3,3,3,5,5,5},
		{0,6,3,0,5,0,0,6,6,6,3,3,3,5,5,5},
	};	 */
	// static int g_R16_162Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,0,5,6,7,2,3,4,13,11,12,9,10,8,15,14},
		// {2,5,3,9,10,6,11,12,14,0,8,1,13,15,4,7},
		// {3,6,9,0,8,11,1,13,4,2,14,5,15,7,10,12},
		// {4,7,10,8,0,12,13,1,3,14,2,15,5,6,9,11},
		// {5,2,6,11,12,3,9,10,15,1,13,0,8,14,7,4},
		// {6,3,11,1,13,9,0,8,7,5,15,2,14,4,12,10},
		// {7,4,12,13,1,10,8,0,6,15,5,14,2,3,11,9},
		// {8,13,14,4,3,15,7,6,0,10,9,12,11,1,2,5},
		// {9,11,0,2,14,1,5,15,10,3,4,6,7,12,8,13},
		// {10,12,8,14,2,13,15,5,9,4,3,7,6,11,0,1},
		// {11,9,1,5,15,0,2,14,12,6,7,3,4,10,13,8},
		// {12,10,13,15,5,8,14,2,11,7,6,4,3,9,1,0},
		// {13,8,15,7,6,14,4,3,1,12,11,10,9,0,5,2},
		// {14,15,4,10,9,7,12,11,2,8,0,13,1,5,3,6},
		// {15,14,7,12,11,4,10,9,5,13,1,8,0,2,6,3},
	// };
	// static int g_R16_162Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		// {0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,8,4,0,0,3,8,8,0,4,4,3,3,8,4,3},
		// {0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		// {0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		// {0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		// {0,8,4,0,0,3,8,8,0,4,4,3,3,8,4,3},
		// {0,8,4,0,0,3,8,8,0,4,4,3,3,8,4,3},
		// {0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		// {0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		// {0,8,4,0,0,3,8,8,0,4,4,3,3,8,4,3},
	// };
/* 	static int g_R16_163Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		{2,5,4,10,11,8,12,13,14,15,6,0,3,9,1,7},
		{3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		{4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		{5,2,8,13,14,4,15,10,11,12,9,1,7,6,0,3},
		{6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		{7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		{8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		{9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		{10,13,6,2,12,9,11,5,15,14,4,3,0,8,7,1},
		{11,14,0,12,2,1,10,15,5,13,3,4,6,7,8,9},
		{12,15,3,11,10,7,2,14,13,5,0,6,4,1,9,8},
		{13,10,9,5,15,6,14,2,12,11,8,7,1,4,3,0},
		{14,11,1,15,5,0,13,12,2,10,7,8,9,3,4,6},
		{15,12,7,14,13,3,5,11,10,2,1,9,8,0,6,4},
	};
	static int g_R16_163Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,6,0,0,4,0,3,3,3,6,6,6,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,3,0,0,3,0,0,0,0,3,3,3,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,6,0,0,4,0,3,3,3,6,6,6,4,4,4},
		{0,3,6,0,0,4,0,3,3,3,6,6,6,4,4,4},
		{0,3,6,0,0,4,0,3,3,3,6,6,6,4,4,4},
		{0,0,3,0,0,3,0,0,0,0,3,3,3,3,3,3},
		{0,0,3,0,0,3,0,0,0,0,3,3,3,3,3,3},
		{0,0,3,0,0,3,0,0,0,0,3,3,3,3,3,3},
	}; */
	static int g_R16_165Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		{2,5,6,10,11,9,12,13,14,15,4,3,0,8,7,1},
		{3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		{4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		{5,2,9,13,14,6,15,10,11,12,8,7,1,4,3,0},
		{6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		{7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		{8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		{9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		{10,13,4,2,12,8,11,5,15,14,6,0,3,9,1,7},
		{11,14,3,12,2,7,10,15,5,13,0,6,4,1,9,8},
		{12,15,0,11,10,1,2,14,13,5,3,4,6,7,8,9},
		{13,10,8,5,15,4,14,2,12,11,9,1,7,6,0,3},
		{14,11,7,15,5,3,13,12,2,10,1,9,8,0,6,4},
		{15,12,1,14,13,0,5,11,10,2,7,8,9,3,4,6},
	};
	static int g_R16_165Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,0,4,0,0,4,0,0,0,0,4,4,4,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,0,3,0,3,3,3,0,0,0,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,0,4,0,0,4,0,0,0,0,4,4,4,4,4,4},
		{0,0,4,0,0,4,0,0,0,0,4,4,4,4,4,4},
		{0,0,4,0,0,4,0,0,0,0,4,4,4,4,4,4},
		{0,3,0,0,0,3,0,3,3,3,0,0,0,3,3,3},
		{0,3,0,0,0,3,0,3,3,3,0,0,0,3,3,3},
		{0,3,0,0,0,3,0,3,3,3,0,0,0,3,3,3},
	};		
/* 	static int g_R16_167Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,7,2,3,4,13,11,12,9,10,8,15,14},
		{2,5,3,9,10,6,11,12,14,0,8,1,13,15,4,7},
		{3,6,9,0,8,11,1,13,4,2,14,5,15,7,10,12},
		{4,7,10,8,0,12,13,1,3,14,2,15,5,6,9,11},
		{5,2,6,11,12,3,9,10,15,1,13,0,8,14,7,4},
		{6,3,11,1,13,9,0,8,7,5,15,2,14,4,12,10},
		{7,4,12,13,1,10,8,0,6,15,5,14,2,3,11,9},
		{8,13,14,4,3,15,7,6,0,10,9,12,11,1,2,5},
		{9,11,0,2,14,1,5,15,10,3,4,6,7,12,8,13},
		{10,12,8,14,2,13,15,5,9,4,3,7,6,11,0,1},
		{11,9,1,5,15,0,2,14,12,6,7,3,4,10,13,8},
		{12,10,13,15,5,8,14,2,11,7,6,4,3,9,1,0},
		{13,8,15,7,6,14,4,3,1,12,11,10,9,0,5,2},
		{14,15,4,10,9,7,12,11,2,8,0,13,1,5,3,6},
		{15,14,7,12,11,4,10,9,5,13,1,8,0,2,6,3},
	};
	static int g_R16_167Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,8,0,0,0,8,8,8,0,0,0,8,8,8,0,8},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,8,0,0,0,8,8,8,0,0,0,8,8,8,0,8},
		{0,8,0,0,0,8,8,8,0,0,0,8,8,8,0,8},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,4,4,0,0,0,4,4,0,4,4,0,0,4,4,0},
		{0,8,0,0,0,8,8,8,0,0,0,8,8,8,0,8},
	};	
	static int g_R16_168Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,7,8,9,10,6,0,14,3,13,15,12,2,11},
		{2,5,0,11,9,1,12,13,14,4,15,3,6,7,8,10},
		{3,7,11,0,6,13,4,1,10,12,8,2,9,5,15,14},
		{4,8,9,6,0,14,3,10,1,2,7,12,11,15,5,13},
		{5,9,1,13,14,4,15,12,2,8,11,7,10,6,0,3},
		{6,10,12,4,3,15,0,8,7,11,1,9,2,14,13,5},
		{7,6,13,1,10,12,8,4,3,15,0,5,14,9,11,2},
		{8,0,14,10,1,2,7,3,4,5,6,15,13,11,9,12},
		{9,14,4,12,2,8,11,15,5,0,13,6,3,10,1,7},
		{10,3,15,8,7,11,1,0,6,13,4,14,5,2,12,9},
		{11,13,3,2,12,7,9,5,15,6,14,0,4,1,10,8},
		{12,15,6,9,11,10,2,14,13,3,5,4,0,8,7,1},
		{13,12,7,5,15,6,14,9,11,10,2,1,8,4,3,0},
		{14,2,8,15,5,0,13,11,9,1,12,10,7,3,4,6},
		{15,11,10,14,13,3,5,2,12,7,9,8,1,0,6,4},
	};
	static int g_R16_168Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,0,6,0,0,6,0,0,0,6,0,6,6,6,6,6},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,0,6,0,0,6,0,0,0,6,0,6,6,6,6,6},
		{0,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0},
		{0,0,6,0,0,6,0,0,0,6,0,6,6,6,6,6},
		{0,0,6,0,0,6,0,0,0,6,0,6,6,6,6,6},
		{0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,4,3,4,4,6,6,6},
	}; */
	static int g_R16_169Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,6,0,3,8,10,11,14,5,12,13,2,15,9,7},
		{2,6,0,12,10,13,1,14,15,11,4,9,3,5,7,8},
		{3,0,12,4,1,9,2,15,5,14,6,7,10,11,8,13},
		{4,3,10,1,0,14,12,13,9,8,2,15,6,7,5,11},
		{5,8,13,9,14,0,15,10,1,3,7,12,11,2,4,6},
		{6,10,1,2,12,15,4,9,7,13,3,5,0,8,11,14},
		{7,11,14,15,13,10,9,0,12,6,5,1,8,4,2,3},
		{8,14,15,5,9,1,7,12,4,0,11,2,13,6,3,10},
		{9,5,11,14,8,3,13,6,0,4,15,10,7,12,1,2},
		{10,12,4,6,2,7,3,5,11,15,0,8,1,14,13,9},
		{11,13,9,7,15,12,5,1,2,10,8,4,14,3,6,0},
		{12,2,3,10,6,11,0,8,13,7,1,14,4,9,15,5},
		{13,15,5,11,7,2,8,4,6,12,14,3,9,0,10,1},
		{14,9,7,8,5,4,11,2,3,1,13,6,15,10,0,12},
		{15,7,8,13,11,6,14,3,10,2,9,0,5,1,12,4},
	};
	static int g_R16_169Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,5,1,4,5,9,4,9,8,14,1,8,0,14,3},
		{0,7,4,7,0,0,13,4,7,7,4,13,13,4,0,13},
		{0,1,5,3,4,5,8,4,8,9,14,3,9,0,14,1},
		{0,4,0,4,0,0,4,0,4,4,0,4,4,0,0,4},
		{0,4,4,4,0,0,0,4,4,4,4,0,0,4,0,0},
		{0,15,14,11,4,5,12,0,6,12,5,15,6,4,14,11},
		{0,7,0,7,0,0,7,0,7,7,0,7,7,0,0,7},
		{0,1,14,3,4,5,9,0,8,9,5,1,8,4,14,3},
		{0,3,14,1,4,5,8,0,9,8,5,3,9,4,14,1},
		{0,13,4,13,0,0,7,4,13,13,4,7,7,4,0,7},
		{0,15,5,11,4,5,6,4,6,12,14,11,12,0,14,15},
		{0,11,14,15,4,5,6,0,12,6,5,11,12,4,14,15},
		{0,13,0,13,0,0,13,0,13,13,0,13,13,0,0,13},
		{0,0,4,0,0,0,4,4,0,0,4,4,4,4,0,4},
		{0,11,5,15,4,5,12,4,12,6,14,15,6,0,14,11},
	};	
	static int g_R16_179Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3},
		{5,4,7,6,9,8,11,10,13,12,15,14,1,0,3,2},
		{6,7,4,5,10,11,8,9,14,15,12,13,2,3,0,1},
		{7,6,5,4,11,10,9,8,15,14,13,12,3,2,1,0},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11},
		{13,12,15,14,1,0,3,2,5,4,7,6,9,8,11,10},
		{14,15,12,13,2,3,0,1,6,7,4,5,10,11,8,9},
		{15,14,13,12,3,2,1,0,7,6,5,4,11,10,9,8},
	};
	static int g_R16_179Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,8,8,1,1,9,9,0,0,8,8,1,1,9,9},
		{0,8,1,9,2,10,3,11,0,8,1,9,2,10,3,11},
		{0,8,9,1,3,11,10,2,0,8,9,1,3,11,10,2},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,1,10,11,5,4,15,14,8,9,2,3,13,12,7,6},
		{0,9,3,10,6,15,5,12,8,1,11,2,14,7,13,4},
		{0,9,11,2,7,14,12,5,8,1,3,10,15,6,4,13},
		{0,0,0,0,8,8,8,8,0,0,0,0,8,8,8,8},
		{0,0,8,8,9,9,1,1,0,0,8,8,9,9,1,1},
		{0,8,1,9,10,2,11,3,0,8,1,9,10,2,11,3},
		{0,8,9,1,11,3,2,10,0,8,9,1,11,3,2,10},
		{0,1,2,3,12,13,14,15,8,9,10,11,4,5,6,7},
		{0,1,10,11,13,12,7,6,8,9,2,3,5,4,15,14},
		{0,9,3,10,14,7,13,4,8,1,11,2,6,15,5,12},
		{0,9,11,2,15,6,4,13,8,1,3,10,7,14,12,5},
	};	
	static int g_R16_182Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,3,2,14,6,5,0,15,10,9,1,13,12,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,6,5,15,10,9,1,7,13,12,4,3,2,8,0},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,10,9,7,13,12,4,11,3,2,8,6,5,0,1},
		{15,7,13,12,11,3,2,8,14,6,5,0,10,9,1,4},
	};
	static int g_R16_182Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
	};	
	// static int g_R16_183Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,3,4,6,7,8,0,11,9,13,12,2,14,5,15,10},
		// {2,4,0,7,1,10,11,3,12,14,5,6,8,15,9,13},
		// {3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		// {4,7,1,11,3,12,2,6,14,15,8,0,9,10,13,5},
		// {5,8,10,9,12,0,13,14,1,3,2,15,4,6,7,11},
		// {6,0,11,1,2,13,3,4,5,8,15,7,10,9,12,14},
		// {7,11,3,2,6,14,4,0,15,10,9,1,13,12,5,8},
		// {8,9,12,13,14,1,5,15,3,6,4,10,7,0,11,2},
		// {9,13,14,5,15,3,8,10,6,0,7,12,11,1,2,4},
		// {10,12,5,14,8,2,15,9,4,7,0,13,1,11,3,6},
		// {11,2,6,4,0,15,7,1,10,12,13,3,5,14,8,9},
		// {12,14,8,15,9,4,10,13,7,11,1,5,3,2,6,0},
		// {13,5,15,8,10,6,9,12,0,1,11,14,2,3,4,7},
		// {14,15,9,10,13,7,12,5,11,2,3,8,6,4,0,1},
		// {15,10,13,12,5,11,14,8,2,4,6,9,0,7,1,3},
	// };
	// static int g_R16_183Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,3,0,3,0,0,3,0,0,3,3,3,0,3,3},
		// {0,3,5,0,9,0,3,5,3,0,5,9,9,3,5,9},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,9,0,5,0,3,9,3,0,9,5,5,3,9,5},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,3,0,3,0,0,3,0,0,3,3,3,0,3,3},
		// {0,3,5,0,9,0,3,5,3,0,5,9,9,3,5,9},
		// {0,0,3,0,3,0,0,3,0,0,3,3,3,0,3,3},
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,3,5,0,9,0,3,5,3,0,5,9,9,3,5,9},
		// {0,3,9,0,5,0,3,9,3,0,9,5,5,3,9,5},
		// {0,3,9,0,5,0,3,9,3,0,9,5,5,3,9,5},
		// {0,0,3,0,3,0,0,3,0,0,3,3,3,0,3,3},
		// {0,3,5,0,9,0,3,5,3,0,5,9,9,3,5,9},
		// {0,3,9,0,5,0,3,9,3,0,9,5,5,3,9,5},
	// };	
/* 	static int g_R16_190Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,7,2,3,4,13,11,12,9,10,8,15,14},
		{2,5,3,9,10,6,11,12,14,0,8,1,13,15,4,7},
		{3,6,9,0,8,11,1,13,4,2,14,5,15,7,10,12},
		{4,7,10,8,0,12,13,1,3,14,2,15,5,6,9,11},
		{5,2,6,11,12,3,9,10,15,1,13,0,8,14,7,4},
		{6,3,11,1,13,9,0,8,7,5,15,2,14,4,12,10},
		{7,4,12,13,1,10,8,0,6,15,5,14,2,3,11,9},
		{8,13,14,4,3,15,7,6,0,10,9,12,11,1,2,5},
		{9,11,0,2,14,1,5,15,10,3,4,6,7,12,8,13},
		{10,12,8,14,2,13,15,5,9,4,3,7,6,11,0,1},
		{11,9,1,5,15,0,2,14,12,6,7,3,4,10,13,8},
		{12,10,13,15,5,8,14,2,11,7,6,4,3,9,1,0},
		{13,8,15,7,6,14,4,3,1,12,11,10,9,0,5,2},
		{14,15,4,10,9,7,12,11,2,8,0,13,1,5,3,6},
		{15,14,7,12,11,4,10,9,5,13,1,8,0,2,6,3},
	};
	static int g_R16_190Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,3,0,0,0,3,3,3,0,0,0,3,3,3,0,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,0,3,3,3,0,0,0,3,3,3,0,3},
		{0,3,0,0,0,3,3,3,0,0,0,3,3,3,0,3},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
		{0,3,4,0,0,8,3,3,0,4,4,8,8,3,4,8},
		{0,3,0,0,0,3,3,3,0,0,0,3,3,3,0,3},
		{0,0,4,0,0,4,0,0,0,4,4,4,4,0,4,4},
	}; */	
	static int g_R16_228Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,0,10,11,1,2,13,14,4,5,15,8,9,12},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,1,13,14,4,5,3,15,8,9,7,0,12,2},
		{7,11,3,2,14,6,5,0,15,10,9,1,13,12,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,4,3,15,8,9,6,7,0,12,11,1,2,5},
		{11,14,6,5,15,10,9,1,7,13,12,4,3,2,8,0},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,8,6,7,0,12,10,11,1,2,14,4,5,9},
		{14,15,10,9,7,13,12,4,11,3,2,8,6,5,0,1},
		{15,7,13,12,11,3,2,8,14,6,5,0,10,9,1,4},
	};
	static int g_R16_228Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
	};
	static int g_R16_229Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,5,6,8,7,0,10,11,12,2,13,14,4,15,9},
		{2,5,0,7,9,1,10,3,12,4,6,14,8,15,11,13},
		{3,6,7,0,11,10,1,2,13,14,5,4,15,8,9,12},
		{4,8,9,11,0,12,13,14,1,2,15,3,5,6,7,10},
		{5,7,1,10,12,3,2,6,14,8,0,15,11,9,13,4},
		{6,0,10,1,13,2,3,5,4,15,7,8,9,11,12,14},
		{7,10,3,2,14,6,5,0,15,11,1,9,13,12,4,8},
		{8,11,12,13,1,14,4,15,3,5,9,6,7,0,10,2},
		{9,12,4,14,2,8,15,11,5,0,13,7,1,10,3,6},
		{10,2,6,5,15,0,7,1,9,13,3,12,4,14,8,11},
		{11,13,14,4,3,15,8,9,6,7,12,0,10,1,2,5},
		{12,14,8,15,5,11,9,13,7,1,4,10,3,2,6,0},
		{13,4,15,8,6,9,11,12,0,10,14,1,2,3,5,7},
		{14,15,11,9,7,13,12,4,10,3,8,2,6,5,0,1},
		{15,9,13,12,10,4,14,8,2,6,11,5,0,7,1,3},
	};
	static int g_R16_229Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,3,9,2,4,7,11,9,3,14,7,11,14},
		{0,4,3,0,0,11,4,3,4,3,11,0,11,4,3,11},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,0,0,3,3,0,3,0,3,0,3,3,0,3},
		{0,9,11,0,3,7,9,11,14,4,7,3,2,14,4,2},
		{0,2,4,0,3,9,2,4,7,11,9,3,14,7,11,14},
		{0,4,3,0,0,11,4,3,4,3,11,0,11,4,3,11},
		{0,7,4,0,3,14,7,4,2,11,14,3,9,2,11,9},
		{0,11,3,0,0,4,11,3,11,3,4,0,4,11,3,4},
		{0,9,11,0,3,7,9,11,14,4,7,3,2,14,4,2},
		{0,3,0,0,0,3,3,0,3,0,3,0,3,3,0,3},
		{0,14,11,0,3,2,14,11,9,4,2,3,7,9,4,7},
		{0,7,4,0,3,14,7,4,2,11,14,3,9,2,11,9},
		{0,11,3,0,0,4,11,3,11,3,4,0,4,11,3,4},
		{0,14,11,0,3,2,14,11,9,4,2,3,7,9,4,7},
	};
	static int g_R16_239Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,6,7,8,9,10,11,12,13,0,1,14,15,4,5},
		{3,2,7,6,9,8,11,10,13,12,1,0,15,14,5,4},
		{4,5,8,9,0,1,12,13,2,3,14,15,6,7,10,11},
		{5,4,9,8,1,0,13,12,3,2,15,14,7,6,11,10},
		{6,7,10,11,12,13,0,1,14,15,2,3,4,5,8,9},
		{7,6,11,10,13,12,1,0,15,14,3,2,5,4,9,8},
		{8,9,12,13,2,3,14,15,6,7,4,5,10,11,0,1},
		{9,8,13,12,3,2,15,14,7,6,5,4,11,10,1,0},
		{10,11,0,1,14,15,2,3,4,5,6,7,8,9,12,13},
		{11,10,1,0,15,14,3,2,5,4,7,6,9,8,13,12},
		{12,13,14,15,6,7,4,5,10,11,8,9,0,1,2,3},
		{13,12,15,14,7,6,5,4,11,10,9,8,1,0,3,2},
		{14,15,4,5,10,11,8,9,0,1,12,13,2,3,6,7},
		{15,14,5,4,11,10,9,8,1,0,13,12,3,2,7,6},
	};
	static int g_R16_239Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
	};	
	static int g_R16_241Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,6,7,8,9,10,11,12,13,0,1,14,15,4,5},
		{3,2,7,6,9,8,11,10,13,12,1,0,15,14,5,4},
		{4,5,8,9,6,7,12,13,10,11,14,15,0,1,2,3},
		{5,4,9,8,7,6,13,12,11,10,15,14,1,0,3,2},
		{6,7,10,11,12,13,0,1,14,15,2,3,4,5,8,9},
		{7,6,11,10,13,12,1,0,15,14,3,2,5,4,9,8},
		{8,9,12,13,10,11,14,15,0,1,4,5,2,3,6,7},
		{9,8,13,12,11,10,15,14,1,0,5,4,3,2,7,6},
		{10,11,0,1,14,15,2,3,4,5,6,7,8,9,12,13},
		{11,10,1,0,15,14,3,2,5,4,7,6,9,8,13,12},
		{12,13,14,15,0,1,4,5,2,3,8,9,6,7,10,11},
		{13,12,15,14,1,0,5,4,3,2,9,8,7,6,11,10},
		{14,15,4,5,2,3,8,9,6,7,12,13,10,11,0,1},
		{15,14,5,4,3,2,9,8,7,6,13,12,11,10,1,0},
	};
	static int g_R16_241Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
	};	
	static int g_R16_244Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,8,9,10,11,4,5,6,7,14,15,12,13},
		{3,2,1,0,9,8,11,10,5,4,7,6,15,14,13,12},
		{4,5,8,9,6,7,12,13,10,11,14,15,0,1,2,3},
		{5,4,9,8,7,6,13,12,11,10,15,14,1,0,3,2},
		{6,7,10,11,12,13,0,1,14,15,2,3,4,5,8,9},
		{7,6,11,10,13,12,1,0,15,14,3,2,5,4,9,8},
		{8,9,4,5,10,11,14,15,6,7,12,13,2,3,0,1},
		{9,8,5,4,11,10,15,14,7,6,13,12,3,2,1,0},
		{10,11,6,7,14,15,2,3,12,13,0,1,8,9,4,5},
		{11,10,7,6,15,14,3,2,13,12,1,0,9,8,5,4},
		{12,13,14,15,0,1,4,5,2,3,8,9,6,7,10,11},
		{13,12,15,14,1,0,5,4,3,2,9,8,7,6,11,10},
		{14,15,12,13,2,3,8,9,0,1,4,5,10,11,6,7},
		{15,14,13,12,3,2,9,8,1,0,5,4,11,10,7,6},
	};
	static int g_R16_244Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,1,6,7,6,7,0,1,0,1,6,7,6,7,0,1},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,1,6,7,0,1,0,1,6,7,6,7,0,1,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,1,6,7,6,7,0,1,0,1,6,7,6,7,0,1},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,1,6,7,0,1,0,1,6,7,6,7,0,1,6,7},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
	};	
	static int g_R16_246Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,8,9,10,11,4,5,6,7,14,15,12,13},
		{3,2,1,0,9,8,11,10,5,4,7,6,15,14,13,12},
		{4,5,8,9,6,7,12,13,10,11,14,15,0,1,2,3},
		{5,4,9,8,7,6,13,12,11,10,15,14,1,0,3,2},
		{6,7,10,11,12,13,0,1,14,15,2,3,4,5,8,9},
		{7,6,11,10,13,12,1,0,15,14,3,2,5,4,9,8},
		{8,9,4,5,10,11,14,15,6,7,12,13,2,3,0,1},
		{9,8,5,4,11,10,15,14,7,6,13,12,3,2,1,0},
		{10,11,6,7,14,15,2,3,12,13,0,1,8,9,4,5},
		{11,10,7,6,15,14,3,2,13,12,1,0,9,8,5,4},
		{12,13,14,15,0,1,4,5,2,3,8,9,6,7,10,11},
		{13,12,15,14,1,0,5,4,3,2,9,8,7,6,11,10},
		{14,15,12,13,2,3,8,9,0,1,4,5,10,11,6,7},
		{15,14,13,12,3,2,9,8,1,0,5,4,11,10,7,6},
	};
	static int g_R16_246Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,1,6,7,6,7,0,1,0,1,6,7,6,7,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,1,6,7,0,1,0,1,6,7,6,7,0,1,6,7},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,1,6,7,6,7,0,1,0,1,6,7,6,7,0,1},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,1,0,1,6,7,0,1,6,7,0,1,6,7,6,7},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,1,6,7,0,1,0,1,6,7,6,7,0,1,6,7},
	};	
	static int g_R16_248Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,4,5,6,7,0,1,10,11,12,13,14,15,8,9},
		{3,2,5,4,7,6,1,0,11,10,13,12,15,14,9,8},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10},
		{6,7,0,1,2,3,4,5,14,15,8,9,10,11,12,13},
		{7,6,1,0,3,2,5,4,15,14,9,8,11,10,13,12},
		{8,9,10,11,12,13,14,15,4,5,6,7,0,1,2,3},
		{9,8,11,10,13,12,15,14,5,4,7,6,1,0,3,2},
		{10,11,12,13,14,15,8,9,6,7,0,1,2,3,4,5},
		{11,10,13,12,15,14,9,8,7,6,1,0,3,2,5,4},
		{12,13,14,15,8,9,10,11,0,1,2,3,4,5,6,7},
		{13,12,15,14,9,8,11,10,1,0,3,2,5,4,7,6},
		{14,15,8,9,10,11,12,13,2,3,4,5,6,7,0,1},
		{15,14,9,8,11,10,13,12,3,2,5,4,7,6,1,0},
	};
	static int g_R16_248Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{0,0,2,2,4,4,6,6,8,8,10,10,12,12,14,14},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,0,4,4,0,0,4,4,4,4,0,0,4,4,0,0},
		{0,1,4,5,0,1,4,5,4,5,0,1,4,5,0,1},
		{0,0,6,6,4,4,2,2,12,12,10,10,8,8,14,14},
		{0,1,6,7,4,5,2,3,12,13,10,11,8,9,14,15},
		{0,0,8,8,4,4,12,12,6,6,14,14,2,2,10,10},
		{0,1,8,9,4,5,12,13,6,7,14,15,2,3,10,11},
		{0,0,10,10,0,0,10,10,14,14,4,4,14,14,4,4},
		{0,1,10,11,0,1,10,11,14,15,4,5,14,15,4,5},
		{0,0,12,12,4,4,8,8,2,2,14,14,6,6,10,10},
		{0,1,12,13,4,5,8,9,2,3,14,15,6,7,10,11},
		{0,0,14,14,0,0,14,14,10,10,4,4,10,10,4,4},
		{0,1,14,15,0,1,14,15,10,11,4,5,10,11,4,5},
	};	
/* 	static int g_R16_249Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,3,5,6,8,7,0,10,11,12,2,13,14,4,15,9},
		{2,5,0,7,9,1,10,3,12,4,6,14,8,15,11,13},
		{3,6,7,0,11,10,1,2,13,14,5,4,15,8,9,12},
		{4,8,9,11,0,12,13,14,1,2,15,3,5,6,7,10},
		{5,7,1,10,12,3,2,6,14,8,0,15,11,9,13,4},
		{6,0,10,1,13,2,3,5,4,15,7,8,9,11,12,14},
		{7,10,3,2,14,6,5,0,15,11,1,9,13,12,4,8},
		{8,11,12,13,1,14,4,15,3,5,9,6,7,0,10,2},
		{9,12,4,14,2,8,15,11,5,0,13,7,1,10,3,6},
		{10,2,6,5,15,0,7,1,9,13,3,12,4,14,8,11},
		{11,13,14,4,3,15,8,9,6,7,12,0,10,1,2,5},
		{12,14,8,15,5,11,9,13,7,1,4,10,3,2,6,0},
		{13,4,15,8,6,9,11,12,0,10,14,1,2,3,5,7},
		{14,15,11,9,7,13,12,4,10,3,8,2,6,5,0,1},
		{15,9,13,12,10,4,14,8,2,6,11,5,0,7,1,3},
	};
	static int g_R16_249Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,4,4,0,4,0,4,4,0,0,0,4,4,0,0,4},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
		{0,9,0,0,0,9,9,0,9,0,9,0,9,9,0,9},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,4,0,4,9,2,4,9,0,9,4,2,9,0,2},
	}; */
	static int g_R16_171Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_171Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_172Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_172Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
	};	
	static int g_R16_173Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,0,7,9,1,11,3,12,4,14,6,8,15,10,13},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,1,11,12,4,14,6,2,8,15,10,0,7,13,3},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,3,9,14,6,12,4,15,10,2,8,13,5,0,1},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,4,14,2,8,15,10,5,0,7,13,1,11,3,6},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,6,12,15,10,2,8,7,13,5,0,3,9,1,4},
		{12,2,8,15,5,0,7,13,9,1,11,3,4,14,6,10},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,10,2,7,13,5,0,11,3,9,1,6,12,4,8},
		{15,7,13,5,11,3,9,1,14,6,12,4,10,2,8,0},
	};
	static int g_R16_173Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,0,4,0,0,4,0,4,0,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,0,4,0,0,4,4,4,0,4},
		{0,0,0,4,0,0,4,4,0,0,4,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,0,4,4,0,4,4,0,0,4,4,0,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,4,0,4,0,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_125Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,2,3,0,5,6,7,4,9,10,11,8,13,14,15,12},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,0,1,2,7,4,5,6,11,8,9,10,15,12,13,14},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,6,7,4,1,2,3,0,13,14,15,12,9,10,11,8},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,4,5,6,3,0,1,2,15,12,13,14,11,8,9,10},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,10,11,8,13,14,15,12,1,2,3,0,5,6,7,4},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,8,9,10,15,12,13,14,3,0,1,2,7,4,5,6},
		{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3},
		{13,14,15,12,9,10,11,8,5,6,7,4,1,2,3,0},
		{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1},
		{15,12,13,14,11,8,9,10,7,4,5,6,3,0,1,2},
	};
	static int g_R16_125Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_175Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,4,7,10,8,9,11,12,13,0,14,1,15,3,6},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,8,9,12,4,7,13,10,11,1,15,0,14,6,3},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,11,2,14,13,5,4,15,8,3,10,6,12,0,1},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,13,5,15,11,2,8,14,4,6,12,3,10,1,0},
		{10,12,0,14,2,1,15,3,5,6,4,7,8,9,11,13},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,1,15,5,0,14,6,2,3,8,9,4,7,13,11},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,3,10,7,6,12,0,9,1,11,2,13,5,4,8},
		{15,14,6,12,9,3,10,1,7,0,13,5,11,2,8,4},
	};
	static int g_R16_175Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
	};	
	static int g_R16_176Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,4,7,10,8,9,11,12,13,0,14,1,15,3,6},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,8,9,12,4,7,13,10,11,1,15,0,14,6,3},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,11,2,14,13,5,4,15,8,3,10,6,12,0,1},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,13,5,15,11,2,8,14,4,6,12,3,10,1,0},
		{10,12,0,14,2,1,15,3,5,6,4,7,8,9,11,13},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,1,15,5,0,14,6,2,3,8,9,4,7,13,11},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,3,10,7,6,12,0,9,1,11,2,13,5,4,8},
		{15,14,6,12,9,3,10,1,7,0,13,5,11,2,8,4},
	};
	static int g_R16_176Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
	};
	static int g_R16_181Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,7,8,10,0,12,11,13,14,2,3,15,9},
		{2,5,0,9,8,1,11,12,4,3,14,6,7,15,10,13},
		{3,6,9,0,10,11,1,13,14,2,4,5,15,7,8,12},
		{4,7,8,10,0,12,13,1,2,14,3,15,5,6,9,11},
		{5,8,1,11,12,4,14,2,7,6,15,10,0,9,13,3},
		{6,10,11,1,13,14,4,3,15,5,7,8,9,0,12,2},
		{7,0,12,13,1,2,3,4,5,15,6,9,8,10,11,14},
		{8,12,4,14,2,7,15,5,0,10,9,13,1,11,3,6},
		{9,11,3,2,14,6,5,15,10,0,8,1,13,12,4,7},
		{10,13,14,4,3,15,7,6,9,8,0,12,11,1,2,5},
		{11,14,6,5,15,10,8,9,13,1,12,4,3,2,7,0},
		{12,2,7,15,5,0,9,8,1,13,11,3,4,14,6,10},
		{13,3,15,7,6,9,0,10,11,12,1,2,14,4,5,8},
		{14,15,10,8,9,13,12,11,3,4,2,7,6,5,0,1},
		{15,9,13,12,11,3,2,14,6,7,5,0,10,8,1,4},
	};
	static int g_R16_181Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,0,4,0,3,10,3,0,4,4,10,3,10,4,10},
		{0,0,4,0,0,4,0,0,4,4,0,4,4,0,4,4},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,4,0,10,10,3,4,0,4,3,10,10,0,3},
		{0,10,0,4,0,10,3,10,0,4,4,3,10,3,4,3},
		{0,3,0,4,0,3,10,3,0,4,4,10,3,10,4,10},
		{0,0,4,0,0,4,0,0,4,4,0,4,4,0,4,4},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,4,0,0,0,4,4,4,0,0,0,4,4,4,0,4},
		{0,10,4,4,0,3,3,10,4,0,4,10,3,3,0,10},
		{0,3,4,4,0,10,10,3,4,0,4,3,10,10,0,3},
		{0,10,0,4,0,10,3,10,0,4,4,3,10,3,4,3},
		{0,4,4,0,0,0,4,4,4,4,0,0,0,4,4,0},
		{0,10,4,4,0,3,3,10,4,0,4,10,3,3,0,10},
	};	
	static int g_R16_178Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,4,5,6,8,9,10,11,0,12,13,14,2,3,15,7},
		{2,5,4,7,9,8,11,10,12,0,14,13,1,15,3,6},
		{3,6,7,4,10,11,8,9,13,14,0,12,15,1,2,5},
		{4,8,9,10,0,12,13,14,1,2,3,15,5,6,7,11},
		{5,9,8,11,12,0,14,13,2,1,15,3,4,7,6,10},
		{6,10,11,8,13,14,0,12,3,15,1,2,7,4,5,9},
		{7,11,10,9,14,13,12,0,15,3,2,1,6,5,4,8},
		{8,0,12,13,1,2,3,15,4,5,6,7,9,10,11,14},
		{9,12,0,14,2,1,15,3,5,4,7,6,8,11,10,13},
		{10,13,14,0,3,15,1,2,6,7,4,5,11,8,9,12},
		{11,14,13,12,15,3,2,1,7,6,5,4,10,9,8,0},
		{12,2,1,15,5,4,7,6,9,8,11,10,0,14,13,3},
		{13,3,15,1,6,7,4,5,10,11,8,9,14,0,12,2},
		{14,15,3,2,7,6,5,4,11,10,9,8,13,12,0,1},
		{15,7,6,5,11,10,9,8,14,13,12,0,3,2,1,4},
	};
	static int g_R16_178Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,4,4,4,4,8,8,8,8,0,0,0,1},
		{0,2,2,2,4,4,4,4,9,9,9,9,0,0,0,2},
		{0,3,3,3,4,4,4,4,10,10,10,10,0,0,0,3},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,5,5,5,0,0,0,0,5,5,5,5,0,0,0,5},
		{0,6,6,6,0,0,0,0,6,6,6,6,0,0,0,6},
		{0,7,7,7,0,0,0,0,7,7,7,7,0,0,0,7},
		{0,8,8,8,4,4,4,4,1,1,1,1,0,0,0,8},
		{0,9,9,9,4,4,4,4,2,2,2,2,0,0,0,9},
		{0,10,10,10,4,4,4,4,3,3,3,3,0,0,0,10},
		{0,11,11,11,4,4,4,4,15,15,15,15,0,0,0,11},
		{0,12,12,12,0,0,0,0,12,12,12,12,0,0,0,12},
		{0,13,13,13,0,0,0,0,13,13,13,13,0,0,0,13},
		{0,14,14,14,0,0,0,0,14,14,14,14,0,0,0,14},
		{0,15,15,15,4,4,4,4,11,11,11,11,0,0,0,15},
	};
/* 	static int g_R16_180Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,6,7,8,9,10,11,12,13,0,1,14,15,4,5},
		{3,2,7,6,9,8,11,10,13,12,1,0,15,14,5,4},
		{4,5,8,9,0,1,12,13,2,3,14,15,6,7,10,11},
		{5,4,9,8,1,0,13,12,3,2,15,14,7,6,11,10},
		{6,7,10,11,12,13,0,1,14,15,2,3,4,5,8,9},
		{7,6,11,10,13,12,1,0,15,14,3,2,5,4,9,8},
		{8,9,12,13,2,3,14,15,6,7,4,5,10,11,0,1},
		{9,8,13,12,3,2,15,14,7,6,5,4,11,10,1,0},
		{10,11,0,1,14,15,2,3,4,5,6,7,8,9,12,13},
		{11,10,1,0,15,14,3,2,5,4,7,6,9,8,13,12},
		{12,13,14,15,6,7,4,5,10,11,8,9,0,1,2,3},
		{13,12,15,14,7,6,5,4,11,10,9,8,1,0,3,2},
		{14,15,4,5,10,11,8,9,0,1,12,13,2,3,6,7},
		{15,14,5,4,11,10,9,8,1,0,13,12,3,2,7,6},
	};
	static int g_R16_180Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,0,0,0,6,6,0,0,6,6,0,0,6,6,6,6},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,0,6,6,0,0,0,0,6,6,6,6,0,0,6,6},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
		{0,0,6,6,6,6,0,0,0,0,6,6,6,6,0,0},
	}; */
	static int g_R16_273Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,9,2,3,10,11,4,7,8,14,15,12,13},
		{2,5,0,8,7,1,11,4,3,10,9,6,13,12,15,14},
		{3,6,8,0,12,11,1,13,2,14,15,5,4,7,9,10},
		{4,9,7,12,0,10,14,2,13,1,5,15,3,8,6,11},
		{5,2,1,11,10,0,8,9,6,7,4,3,15,14,13,12},
		{6,3,11,1,14,8,0,15,5,12,13,2,9,10,4,7},
		{7,10,4,13,2,9,15,0,12,5,1,14,8,3,11,6},
		{8,11,3,2,13,6,5,12,0,15,14,1,7,4,10,9},
		{9,4,10,14,1,7,12,5,15,0,2,13,6,11,3,8},
		{10,7,9,15,5,4,13,1,14,2,0,12,11,6,8,3},
		{11,8,6,5,15,3,2,14,1,13,12,0,10,9,7,4},
		{12,14,13,4,3,15,9,8,7,6,11,10,0,2,1,5},
		{13,15,12,7,8,14,10,3,4,11,6,9,2,0,5,1},
		{14,12,15,9,6,13,4,11,10,3,8,7,1,5,0,2},
		{15,13,14,10,11,12,7,6,9,8,3,4,5,1,2,0},
	};
	static int g_R16_273Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,4,0,4,9,1,0,4,9,1,9,4,0,9,1},
		{0,7,0,0,0,7,7,0,0,7,7,7,0,0,7,7},
		{0,3,0,0,0,3,3,0,0,3,3,3,0,0,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,10,4,0,4,5,10,0,4,5,10,5,4,0,5,10},
		{0,6,4,0,4,14,6,0,4,14,6,14,4,0,14,6},
		{0,7,0,0,0,7,7,0,0,7,7,7,0,0,7,7},
		{0,13,0,0,0,13,13,0,0,13,13,13,0,0,13,13},
		{0,1,4,0,4,9,1,0,4,9,1,9,4,0,9,1},
		{0,10,4,0,4,5,10,0,4,5,10,5,4,0,5,10},
		{0,15,4,0,4,11,15,0,4,11,15,11,4,0,11,15},
		{0,3,0,0,0,3,3,0,0,3,3,3,0,0,3,3},
		{0,13,0,0,0,13,13,0,0,13,13,13,0,0,13,13},
		{0,6,4,0,4,14,6,0,4,14,6,14,4,0,14,6},
		{0,15,4,0,4,11,15,0,4,11,15,11,4,0,11,15},
	};	
	static int g_R16_275Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,0,7,10,1,9,3,12,6,4,14,8,15,11,13},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,1,9,12,0,7,6,10,3,8,15,4,14,13,11},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,3,2,14,6,5,0,15,1,11,10,13,12,4,8},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,6,5,15,3,2,1,14,0,13,12,11,10,8,4},
		{10,12,4,14,2,8,15,11,5,13,0,7,1,9,3,6},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,8,15,5,4,14,13,2,11,1,9,0,7,6,3},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,11,10,7,13,12,4,9,8,3,2,6,5,0,1},
		{15,14,13,12,9,11,10,8,7,4,6,5,3,2,1,0},
	};
	static int g_R16_275Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
	};	
	static int g_R16_276Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,8,2,3,9,4,7,12,13,10,11,15,14},
		{2,5,0,7,10,1,9,3,12,6,4,14,8,15,11,13},
		{3,6,7,0,11,9,1,2,13,5,14,4,15,8,10,12},
		{4,8,10,11,0,12,13,14,1,15,2,3,5,6,7,9},
		{5,2,1,9,12,0,7,6,10,3,8,15,4,14,13,11},
		{6,3,9,1,13,7,0,5,11,2,15,8,14,4,12,10},
		{7,9,3,2,14,6,5,0,15,1,11,10,13,12,4,8},
		{8,4,12,13,1,10,11,15,0,14,5,6,2,3,9,7},
		{9,7,6,5,15,3,2,1,14,0,13,12,11,10,8,4},
		{10,12,4,14,2,8,15,11,5,13,0,7,1,9,3,6},
		{11,13,14,4,3,15,8,10,6,12,7,0,9,1,2,5},
		{12,10,8,15,5,4,14,13,2,11,1,9,0,7,6,3},
		{13,11,15,8,6,14,4,12,3,10,9,1,7,0,5,2},
		{14,15,11,10,7,13,12,4,9,8,3,2,6,5,0,1},
		{15,14,13,12,9,11,10,8,7,4,6,5,3,2,1,0},
	};
	static int g_R16_276Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,0,4,0,0,4,0,4,0,4,4,0,4,0,4,4},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
		{0,4,0,4,0,4,0,4,4,0,0,4,4,0,4,0},
		{0,4,4,0,0,0,4,4,4,0,4,0,0,4,4,0},
		{0,4,4,4,0,0,0,0,4,4,4,4,0,0,0,4},
		{0,4,0,0,0,4,4,0,4,4,0,0,4,4,0,4},
		{0,0,4,4,0,4,4,0,0,0,4,4,4,4,0,0},
		{0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4},
	};	
	static int g_R16_277Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,5,2,3,8,9,6,7,12,13,10,11,15,14},
		{2,4,0,6,1,8,3,10,5,12,7,14,9,15,11,13},
		{3,5,6,0,8,1,2,11,4,13,14,7,15,9,10,12},
		{4,2,1,8,0,6,5,12,3,10,9,15,7,14,13,11},
		{5,3,8,1,6,0,4,13,2,11,15,9,14,7,12,10},
		{6,8,3,2,5,4,0,14,1,15,11,10,13,12,7,9},
		{7,9,10,11,12,13,14,0,15,1,2,3,4,5,6,8},
		{8,6,5,4,3,2,1,15,0,14,13,12,11,10,9,7},
		{9,7,12,13,10,11,15,1,14,0,4,5,2,3,8,6},
		{10,12,7,14,9,15,11,2,13,4,0,6,1,8,3,5},
		{11,13,14,7,15,9,10,3,12,5,6,0,8,1,2,4},
		{12,10,9,15,7,14,13,4,11,2,1,8,0,6,5,3},
		{13,11,15,9,14,7,12,5,10,3,8,1,6,0,4,2},
		{14,15,11,10,13,12,7,6,9,8,3,2,5,4,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_277Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,7,0,7,7,2,7,2,2,10,2,10,10,10},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,2,0,10,2,7,10,2,7,0,2,7,0,10,7,10},
		{0,0,0,7,0,7,7,2,7,2,2,10,2,10,10,10},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,2,0,10,2,7,10,2,7,0,2,7,0,10,7,10},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,0,0,10,0,10,10,2,10,2,2,7,2,7,7,7},
		{0,2,0,0,2,2,0,0,2,2,0,0,2,2,0,2},
		{0,2,0,7,2,10,7,2,10,0,2,10,0,7,10,7},
		{0,0,0,10,0,10,10,2,10,2,2,7,2,7,7,7},
		{0,2,0,7,2,10,7,2,10,0,2,10,0,7,10,7},
	};	
	static int g_R16_279Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,9,2,3,10,12,4,7,14,8,15,11,13},
		{2,5,0,8,10,1,12,9,3,7,4,15,6,14,13,11},
		{3,6,8,0,11,12,1,13,2,14,15,4,5,7,9,10},
		{4,9,10,11,0,7,14,5,15,1,2,3,13,12,6,8},
		{5,2,1,12,7,0,8,4,6,10,9,13,3,11,15,14},
		{6,3,12,1,14,8,0,15,5,11,13,9,2,10,4,7},
		{7,10,9,13,5,4,15,0,14,2,1,12,11,3,8,6},
		{8,12,3,2,15,6,5,14,0,13,11,10,1,9,7,4},
		{9,4,7,14,1,10,11,2,13,0,5,6,15,8,3,12},
		{10,7,4,15,2,9,13,1,11,5,0,8,14,6,12,3},
		{11,14,15,4,3,13,9,12,10,6,8,0,7,5,1,2},
		{12,8,6,5,13,3,2,11,1,15,14,7,0,4,10,9},
		{13,15,14,7,12,11,10,3,9,8,6,5,4,0,2,1},
		{14,11,13,9,6,15,4,8,7,3,12,1,10,2,0,5},
		{15,13,11,10,8,14,7,6,4,12,3,2,9,1,5,0},
	};
	static int g_R16_279Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,4,3,4,9,6,1,11,9,0,11,14,6,14,3},
		{0,7,2,3,2,9,13,7,8,9,0,8,14,13,14,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,4,3,4,9,6,1,11,9,0,11,14,6,14,3},
		{0,10,10,0,10,0,10,10,10,0,0,10,0,10,0,0},
		{0,1,4,3,4,9,6,1,11,9,0,11,14,6,14,3},
		{0,7,2,3,2,9,13,7,8,9,0,8,14,13,14,3},
		{0,7,2,3,2,9,13,7,8,9,0,8,14,13,14,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,10,10,0,10,0,10,10,10,0,0,10,0,10,0,0},
		{0,1,4,3,4,9,6,1,11,9,0,11,14,6,14,3},
		{0,10,10,0,10,0,10,10,10,0,0,10,0,10,0,0},
		{0,7,2,3,2,9,13,7,8,9,0,8,14,13,14,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,10,10,0,10,0,10,10,10,0,0,10,0,10,0,0},
	};	
/* 	static int g_R16_280Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,5,2,3,8,9,6,7,12,13,10,11,15,14},
		{2,4,0,6,1,8,3,10,5,12,7,14,9,15,11,13},
		{3,5,6,0,8,1,2,11,4,13,14,7,15,9,10,12},
		{4,2,1,8,0,6,5,12,3,10,9,15,7,14,13,11},
		{5,3,8,1,6,0,4,13,2,11,15,9,14,7,12,10},
		{6,8,3,2,5,4,0,14,1,15,11,10,13,12,7,9},
		{7,9,10,11,12,13,14,0,15,1,2,3,4,5,6,8},
		{8,6,5,4,3,2,1,15,0,14,13,12,11,10,9,7},
		{9,7,12,13,10,11,15,1,14,0,4,5,2,3,8,6},
		{10,12,7,14,9,15,11,2,13,4,0,6,1,8,3,5},
		{11,13,14,7,15,9,10,3,12,5,6,0,8,1,2,4},
		{12,10,9,15,7,14,13,4,11,2,1,8,0,6,5,3},
		{13,11,15,9,14,7,12,5,10,3,8,1,6,0,4,2},
		{14,15,11,10,13,12,7,6,9,8,3,2,5,4,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_280Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1},
		{0,0,0,2,0,2,2,0,2,0,0,2,0,2,2,2},
		{0,7,7,3,0,11,11,7,3,0,0,11,7,3,3,11},
		{0,0,0,4,0,4,4,0,4,0,0,4,0,4,4,4},
		{0,7,7,5,0,13,13,7,5,0,0,13,7,5,5,13},
		{0,7,7,6,0,14,14,7,6,0,0,14,7,6,6,14},
		{0,0,0,7,0,7,7,0,7,0,0,7,0,7,7,7},
		{0,7,7,8,0,15,15,7,8,0,0,15,7,8,8,15},
		{0,0,0,9,0,9,9,0,9,0,0,9,0,9,9,9},
		{0,0,0,10,0,10,10,0,10,0,0,10,0,10,10,10},
		{0,7,7,11,0,3,3,7,11,0,0,3,7,11,11,3},
		{0,0,0,12,0,12,12,0,12,0,0,12,0,12,12,12},
		{0,7,7,13,0,5,5,7,13,0,0,5,7,13,13,5},
		{0,7,7,14,0,6,6,7,14,0,0,6,7,14,14,6},
		{0,7,7,15,0,8,8,7,15,0,0,8,7,15,15,8},
	};	 */
	static int g_R16_281Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,6,7,2,3,4,11,12,13,8,9,10,15,14},
		{2,5,0,8,9,1,11,12,3,4,14,6,7,15,10,13},
		{3,6,8,0,10,11,1,13,2,14,4,5,15,7,9,12},
		{4,7,9,10,0,12,13,1,14,2,3,15,5,6,8,11},
		{5,2,1,11,12,0,8,9,6,7,15,3,4,14,13,10},
		{6,3,11,1,13,8,0,10,5,15,7,2,14,4,12,9},
		{7,4,12,13,1,9,10,0,15,5,6,14,2,3,11,8},
		{8,11,3,2,14,6,5,15,0,10,9,1,13,12,4,7},
		{9,12,4,14,2,7,15,5,10,0,8,13,1,11,3,6},
		{10,13,14,4,3,15,7,6,9,8,0,12,11,1,2,5},
		{11,8,6,5,15,3,2,14,1,13,12,0,10,9,7,4},
		{12,9,7,15,5,4,14,2,13,1,11,10,0,8,6,3},
		{13,10,15,7,6,14,4,3,12,11,1,9,8,0,5,2},
		{14,15,10,9,8,13,12,11,4,3,2,7,6,5,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_281Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,2,3,1,9,10,7,8,5,6,14,12,13,11,15},
		{0,7,0,0,7,7,7,0,0,7,7,7,0,0,7,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,4,2,3,1,9,10,7,8,5,6,14,12,13,11,15},
		{0,7,0,0,7,7,7,0,0,7,7,7,0,0,7,0},
		{0,7,0,0,7,7,7,0,0,7,7,7,0,0,7,0},
		{0,4,2,3,1,9,10,7,8,5,6,14,12,13,11,15},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,7,0,0,7,7,7,0,0,7,7,7,0,0,7,0},
		{0,4,2,3,1,9,10,7,8,5,6,14,12,13,11,15},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	};	
	static int g_R16_282Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3},
		{13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2},
		{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_282Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
	};	
	static int g_R16_283Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,4,6,2,8,3,9,5,7,12,13,10,11,15,14},
		{2,4,0,7,1,10,9,3,12,6,5,14,8,15,11,13},
		{3,6,7,0,9,11,1,2,13,4,14,5,15,8,10,12},
		{4,2,1,9,0,12,7,6,10,3,8,15,5,14,13,11},
		{5,8,10,11,12,0,13,14,1,15,2,3,4,6,7,9},
		{6,3,9,1,7,13,0,4,11,2,15,8,14,5,12,10},
		{7,9,3,2,6,14,4,0,15,1,11,10,13,12,5,8},
		{8,5,12,13,10,1,11,15,0,14,4,6,2,3,9,7},
		{9,7,6,4,3,15,2,1,14,0,13,12,11,10,8,5},
		{10,12,5,14,8,2,15,11,4,13,0,7,1,9,3,6},
		{11,13,14,5,15,3,8,10,6,12,7,0,9,1,2,4},
		{12,10,8,15,5,4,14,13,2,11,1,9,0,7,6,3},
		{13,11,15,8,14,6,5,12,3,10,9,1,7,0,4,2},
		{14,15,11,10,13,7,12,5,9,8,3,2,6,4,0,1},
		{15,14,13,12,11,9,10,8,7,5,6,4,3,2,1,0},
	};
	static int g_R16_283Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
		{0,0,0,5,0,0,5,5,0,5,0,5,0,5,5,5},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,5,0,5,5,0,0,5,5,0,0,5,5,0,5,0},
		{0,5,0,0,5,0,5,0,5,5,0,0,5,5,0,5},
	};
	static int g_R16_286Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3},
		{13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2},
		{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_286Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
		{0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
		{0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
		{0,2,0,2,2,0,2,0,2,0,2,0,0,2,0,2},
	};	
	static int g_R16_287Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14},
		{2,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13},
		{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12},
		{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11},
		{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10},
		{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9},
		{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8},
		{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7},
		{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6},
		{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5},
		{11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4},
		{12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3},
		{13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2},
		{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1},
		{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
	};
	static int g_R16_287Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,2,0,2,8,10,8,10,2,0,2,0,10,8,10,8},
		{0,0,0,0,8,8,8,8,2,2,2,2,10,10,10,10},
		{0,2,0,2,8,10,8,10,2,0,2,0,10,8,10,8},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2},
		{0,2,0,2,2,0,2,0,0,2,0,2,2,0,2,0},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,2,0,2,10,8,10,8,2,0,2,0,8,10,8,10},
		{0,0,0,0,10,10,10,10,2,2,2,2,8,8,8,8},
		{0,2,0,2,10,8,10,8,2,0,2,0,8,10,8,10},
	};	
/* 	static int g_R16_290Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,7,8,2,9,3,4,6,13,14,15,10,11,12},
		{2,5,0,10,11,1,12,13,14,15,3,4,6,7,8,9},
		{3,7,10,0,6,13,4,1,9,8,2,12,11,5,15,14},
		{4,8,11,6,0,14,3,9,1,7,12,2,10,15,5,13},
		{5,2,1,13,14,0,15,10,11,12,7,8,9,3,4,6},
		{6,9,12,4,3,15,0,8,7,1,11,10,2,14,13,5},
		{7,3,13,1,9,10,8,0,6,4,5,15,14,2,12,11},
		{8,4,14,9,1,11,7,6,0,3,15,5,13,12,2,10},
		{9,6,15,8,7,12,1,4,3,0,14,13,5,11,10,2},
		{10,13,3,2,12,7,11,5,15,14,0,6,4,1,9,8},
		{11,14,4,12,2,8,10,15,5,13,6,0,3,9,1,7},
		{12,15,6,11,10,9,2,14,13,5,4,3,0,8,7,1},
		{13,10,7,5,15,3,14,2,12,11,1,9,8,0,6,4},
		{14,11,8,15,5,4,13,12,2,10,9,1,7,6,0,3},
		{15,12,9,14,13,6,5,11,10,2,8,7,1,4,3,0},
	}; */
	// static int g_R16_289Add[16][16]={
		// {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		// {1,0,3,2,5,4,8,9,6,7,11,10,14,15,12,13},
		// {2,3,0,1,7,9,12,4,14,5,13,15,6,10,8,11},
		// {3,2,1,0,9,7,14,5,12,4,15,13,8,11,6,10},
		// {4,5,7,9,0,1,13,2,15,3,12,14,10,6,11,8},
		// {5,4,9,7,1,0,15,3,13,2,14,12,11,8,10,6},
		// {6,8,12,14,13,15,0,10,1,11,7,9,2,4,3,5},
		// {7,9,4,5,2,3,10,0,11,1,6,8,13,12,15,14},
		// {8,6,14,12,15,13,1,11,0,10,9,7,3,5,2,4},
		// {9,7,5,4,3,2,11,1,10,0,8,6,15,14,13,12},
		// {10,11,13,15,12,14,7,6,9,8,0,1,4,2,5,3},
		// {11,10,15,13,14,12,9,8,7,6,1,0,5,3,4,2},
		// {12,14,6,8,10,11,2,13,3,15,4,5,0,7,1,9},
		// {13,15,10,11,6,8,4,12,5,14,2,3,7,0,9,1},
		// {14,12,8,6,11,10,3,15,2,13,5,4,1,9,0,7},
		// {15,13,11,10,8,6,5,14,4,12,3,2,9,1,7,0},
	// };
	// static int g_R16_289Mul[16][16]={
		// {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		// {0,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0},
		// {0,0,4,4,6,6,10,13,10,13,2,2,12,7,12,7},
		// {0,0,5,5,8,8,11,13,11,13,3,3,12,7,12,7},
		// {0,0,6,6,10,10,2,7,2,7,4,4,12,13,12,13},
		// {0,0,8,8,11,11,3,7,3,7,5,5,12,13,12,13},
		// {0,0,10,10,2,2,4,13,4,13,6,6,12,7,12,7},
		// {0,0,13,13,7,7,13,12,13,12,7,7,0,12,0,12},
		// {0,0,11,11,3,3,5,13,5,13,8,8,12,7,12,7},
		// {0,0,15,15,9,9,15,12,15,12,9,9,0,12,0,12},
		// {0,0,2,2,4,4,6,7,6,7,10,10,12,13,12,13},
		// {0,0,3,3,5,5,8,7,8,7,11,11,12,13,12,13},
		// {0,0,12,12,12,12,12,0,12,0,12,12,0,0,0,0},
		// {0,0,7,7,13,13,7,12,7,12,13,13,0,12,0,12},
		// {0,0,14,14,14,14,14,0,14,0,14,14,0,0,0,0},
		// {0,0,9,9,15,15,9,12,9,12,15,15,0,12,0,12},
	// };	
/* 	static int g_R16_290Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,3,4,0,0,6,0,3,3,3,4,4,4,6,6,6},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,6,3,0,0,4,0,6,6,6,3,3,3,4,4,4},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
		{0,4,6,0,0,3,0,4,4,4,6,6,6,3,3,3},
	}; */	
/* 	static int g_R16_377Add[16][16]={
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{1,0,5,4,3,2,7,6,9,8,12,13,10,11,15,14},
		{2,5,0,8,9,1,11,13,3,4,14,6,15,7,10,12},
		{3,4,8,0,1,9,12,10,2,5,7,15,6,14,13,11},
		{4,3,9,1,0,8,10,12,5,2,6,14,7,15,11,13},
		{5,2,1,9,8,0,13,11,4,3,15,7,14,6,12,10},
		{6,7,11,12,10,13,0,1,15,14,4,2,3,5,9,8},
		{7,6,13,10,12,11,1,0,14,15,3,5,4,2,8,9},
		{8,9,3,2,5,4,15,14,0,1,13,12,11,10,7,6},
		{9,8,4,5,2,3,14,15,1,0,11,10,13,12,6,7},
		{10,12,14,7,6,15,4,3,13,11,0,9,1,8,2,5},
		{11,13,6,15,14,7,2,5,12,10,9,0,8,1,4,3},
		{12,10,15,6,7,14,3,4,11,13,1,8,0,9,5,2},
		{13,11,7,14,15,6,5,2,10,12,8,1,9,0,3,4},
		{14,15,10,13,11,12,9,8,7,6,2,4,5,3,0,1},
		{15,14,12,11,13,10,8,9,6,7,5,3,2,4,1,0},
	};
	static int g_R16_377Mul[16][16]={
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,3,4,0,3,1,1,4,4,1,4,3,1,0,0,3},
		{0,4,6,3,1,10,8,5,12,7,9,15,2,13,14,11},
		{0,0,3,0,0,3,3,3,3,3,3,0,3,0,0,0},
		{0,3,1,0,3,4,4,1,1,4,1,3,4,0,0,3},
		{0,1,10,3,4,12,9,8,7,6,2,11,5,13,14,15},
		{0,1,8,3,4,9,12,10,2,5,7,11,6,13,14,15},
		{0,4,5,3,1,8,10,6,9,2,12,15,7,13,14,11},
		{0,4,12,3,1,7,2,9,6,10,5,15,8,13,14,11},
		{0,1,7,3,4,6,5,2,10,12,8,11,9,13,14,15},
		{0,4,9,3,1,2,7,12,5,8,6,15,10,13,14,11},
		{0,3,15,0,3,11,11,15,15,11,15,3,11,0,0,3},
		{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{0,0,13,0,0,13,13,13,13,13,13,0,13,0,0,0},
		{0,0,14,0,0,14,14,14,14,14,14,0,14,0,0,0},
		{0,3,11,0,3,15,15,11,11,15,11,3,15,0,0,3},
	};	 */	
	if(i==6)
	{
#if 1
		ZmodnZ* r8=new ZmodnZ(1,8);
		ZmodnZ* r2=new ZmodnZ(1,2);
		DecompositionRing* r= new DecompositionRing(r8,r2);
		r->m_flag=1;		
		return r;
#else
		FiniteRing* r=new FiniteRing(16,&g_R16_6Add[0][0],&g_R16_6Mul[0][0],0);
		return r;
#endif
	}	
	if(i==13)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_13Add[0][0],&g_R16_13Mul[0][0],0);
		return r;
	}	
	if(i==14)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_14Add[0][0],&g_R16_14Mul[0][0],0);
		return r;
	}	
	if(i==15)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_15Add[0][0],&g_R16_15Mul[0][0],0);
		return r;
	}
	if(i==28)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_28Add[0][0],&g_R16_28Mul[0][0],0);
		return r;
	}	
	if(i==29)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_29Add[0][0],&g_R16_29Mul[0][0],0);
		return r;
	}
	if(i==30)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_30Add[0][0],&g_R16_30Mul[0][0],0);
		return r;
	}
	if(i==31)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_31Add[0][0],&g_R16_31Mul[0][0],0);
		return r;
	}
	if(i==32)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_32Add[0][0],&g_R16_32Mul[0][0],0);
		return r;
	}	
	if(i==33)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_33Add[0][0],&g_R16_33Mul[0][0],0);
		return r;
	}	
	if(i==34)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_34Add[0][0],&g_R16_34Mul[0][0],0);
		return r;
	}	
	// if(i==70)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_70Add[0][0],&g_R16_70Mul[0][0],0);
		// return r;
	// }
	if(i==118)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_118Add[0][0],&g_R16_118Mul[0][0],0);
		return r;
	}	
	if(i==119)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_119Add[0][0],&g_R16_119Mul[0][0],0);
		return r;
	}	
	if(i==120)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_120Add[0][0],&g_R16_120Mul[0][0],0);
		return r;
	}	
	if(i==121)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_121Add[0][0],&g_R16_121Mul[0][0],0);
		return r;
	}		
	if(i==122)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_122Add[0][0],&g_R16_122Mul[0][0],0);
		return r;
	}	
	if(i==123)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_123Add[0][0],&g_R16_123Mul[0][0],0);
		return r;
	}	
	if(i==124)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_124Add[0][0],&g_R16_124Mul[0][0],0);
		return r;
	}	
	if(i==126)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_126Add[0][0],&g_R16_126Mul[0][0],0);
		return r;
	}		
	if(i==127)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_127Add[0][0],&g_R16_127Mul[0][0],0);
		return r;
	}	
	if(i==128)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_128Add[0][0],&g_R16_128Mul[0][0],0);
		return r;
	}	
	if(i==130)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_130Add[0][0],&g_R16_130Mul[0][0],0);
		return r;
	}	
	if(i==131)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_131Add[0][0],&g_R16_131Mul[0][0],0);
		return r;
	}
	if(i==132)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_132Add[0][0],&g_R16_132Mul[0][0],0);
		return r;
	}	
	if(i==133)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_133Add[0][0],&g_R16_133Mul[0][0],0);
		return r;
	}	
	if(i==134)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_134Add[0][0],&g_R16_134Mul[0][0],0);
		return r;
	}	
	if(i==135)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_135Add[0][0],&g_R16_135Mul[0][0],0);
		return r;
	}	
	if(i==136)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_136Add[0][0],&g_R16_136Mul[0][0],0);
		return r;
	}	
	if(i==137)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_137Add[0][0],&g_R16_137Mul[0][0],0);
		return r;
	}	
	if(i==138)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_138Add[0][0],&g_R16_138Mul[0][0],0);
		return r;
	}
	if(i==139)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_139Add[0][0],&g_R16_139Mul[0][0],0);
		return r;
	}	
	if(i==140)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_140Add[0][0],&g_R16_140Mul[0][0],0);
		return r;
	}
	if(i==141)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_141Add[0][0],&g_R16_141Mul[0][0],0);
		return r;
	}
	if(i==142)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_142Add[0][0],&g_R16_142Mul[0][0],0);
		return r;
	}	
	if(i==143)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_143Add[0][0],&g_R16_143Mul[0][0],0);
		return r;
	}
	if(i==144)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_144Add[0][0],&g_R16_144Mul[0][0],0);
		return r;
	}	
	if(i==145)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_145Add[0][0],&g_R16_145Mul[0][0],0);
		return r;
	}	
	if(i==146)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_146Add[0][0],&g_R16_146Mul[0][0],0);
		return r;
	}	
/* 	if(i==147)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_147Add[0][0],&g_R16_147Mul[0][0],0);
		return r;
	}	
	if(i==148)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_148Add[0][0],&g_R16_148Mul[0][0],0);
		return r;
	}	 */
	// if(i==149)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_149Add[0][0],&g_R16_149Mul[0][0],0);
		// return r;
	// }	
/* 	if(i==152)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_152Add[0][0],&g_R16_152Mul[0][0],0);
		return r;
	} */
/* 	if(i==153)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_153Add[0][0],&g_R16_153Mul[0][0],0);
		return r;
	}	
	if(i==155)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_155Add[0][0],&g_R16_155Mul[0][0],0);
		return r;
	}	 */
	if(i==156)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_156Add[0][0],&g_R16_156Mul[0][0],0);
		return r;
	}
	// if(i==159)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_159Add[0][0],&g_R16_159Mul[0][0],0);
		// return r;
	// }	
/* 	if(i==160)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_160Add[0][0],&g_R16_160Mul[0][0],0);
		return r;
	} */	
	// if(i==162)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_162Add[0][0],&g_R16_162Mul[0][0],0);
		// return r;
	// }
/* 	if(i==163)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_163Add[0][0],&g_R16_163Mul[0][0],0);
		return r;
	} */
	if(i==165)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_165Add[0][0],&g_R16_165Mul[0][0],0);
		return r;
	}	
/* 	if(i==167)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_167Add[0][0],&g_R16_167Mul[0][0],0);
		return r;
	}	
	if(i==168)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_168Add[0][0],&g_R16_168Mul[0][0],0);
		return r;
	}	 */
	if(i==169)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_169Add[0][0],&g_R16_169Mul[0][0],0);
		return r;
	}
	if(i==179)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_179Add[0][0],&g_R16_179Mul[0][0],0);
		return r;
	}	
	if(i==182)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_182Add[0][0],&g_R16_182Mul[0][0],0);
		return r;
	}	
	// if(i==183)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_183Add[0][0],&g_R16_183Mul[0][0],0);
		// return r;
	// }
/* 	if(i==190)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_190Add[0][0],&g_R16_190Mul[0][0],0);
		return r;
	} */	
	if(i==228)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_228Add[0][0],&g_R16_228Mul[0][0],0);
		return r;
	}	
	if(i==229)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_229Add[0][0],&g_R16_229Mul[0][0],0);
		return r;
	}
	if(i==239)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_239Add[0][0],&g_R16_239Mul[0][0],0);
		return r;
	}	
	if(i==241)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_241Add[0][0],&g_R16_241Mul[0][0],0);
		return r;
	}	
	if(i==244)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_244Add[0][0],&g_R16_244Mul[0][0],0);
		return r;
	}	
	if(i==246)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_246Add[0][0],&g_R16_246Mul[0][0],0);
		return r;
	}	
	if(i==248)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_248Add[0][0],&g_R16_248Mul[0][0],0);
		return r;
	}	
	// if(i==249)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_249Add[0][0],&g_R16_249Mul[0][0],0);
		// return r;
	// }
	if(i==171)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_171Add[0][0],&g_R16_171Mul[0][0],0);
		return r;
	}
	if(i==172)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_172Add[0][0],&g_R16_172Mul[0][0],0);
		return r;
	}
	if(i==173)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_173Add[0][0],&g_R16_173Mul[0][0],0);
		return r;
	}	
	if(i==125)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_125Add[0][0],&g_R16_125Mul[0][0],0);
		return r;
	}	
	if(i==175)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_175Add[0][0],&g_R16_175Mul[0][0],0);
		return r;
	}	
	if(i==176)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_176Add[0][0],&g_R16_176Mul[0][0],0);
		return r;
	}	
	if(i==181)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_181Add[0][0],&g_R16_181Mul[0][0],0);
		return r;
	}	
	if(i==178)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_178Add[0][0],&g_R16_178Mul[0][0],0);
		return r;
	}
	if(i==273)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_273Add[0][0],&g_R16_273Mul[0][0],0);
		return r;
	}	
	if(i==275)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_275Add[0][0],&g_R16_275Mul[0][0],0);
		return r;
	}		
	if(i==276)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_276Add[0][0],&g_R16_276Mul[0][0],0);
		return r;
	}	
	if(i==277)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_277Add[0][0],&g_R16_277Mul[0][0],0);
		return r;
	}	
	if(i==279)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_279Add[0][0],&g_R16_279Mul[0][0],0);
		return r;
	}		
/* 	if(i==180)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_180Add[0][0],&g_R16_180Mul[0][0],0);
		return r;
	} */
/* 	if(i==280)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_280Add[0][0],&g_R16_280Mul[0][0],0);
		return r;
	} */	
	if(i==281)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_281Add[0][0],&g_R16_281Mul[0][0],0);
		return r;
	}	
	if(i==282)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_282Add[0][0],&g_R16_282Mul[0][0],0);
		return r;
	}	
	if(i==283)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_283Add[0][0],&g_R16_283Mul[0][0],0);
		return r;
	}
	if(i==286)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_286Add[0][0],&g_R16_286Mul[0][0],0);
		return r;
	}	
	if(i==287)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_287Add[0][0],&g_R16_287Mul[0][0],0);
		return r;
	}
	// if(i==289)
	// {
		// FiniteRing* r=new FiniteRing(16,&g_R16_289Add[0][0],&g_R16_289Mul[0][0],0);
		// return r;
	// }	
/* 	if(i==290)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_290Add[0][0],&g_R16_290Mul[0][0],0);
		return r;
	}	 */
/* 	if(i==377)
	{
		FiniteRing* r=new FiniteRing(16,&g_R16_377Add[0][0],&g_R16_377Mul[0][0],0);
		return r;
	}	 */
	return NULL;
}

void printRing0(IRing* r,int ID){
   int n=r->size();
   printf("static int g_R%d_%dAdd[%d][%d]={\n",n,ID,n,n);   
   for(int i=0;i<n;i++){
	   printf("{"); 
	   for(int j=0;j<n;j++){
		  int ij=r->add(i,j);
		  printf("%d",ij);
		  if(j<n-1)
			printf(",");  
	   } 
       printf("},\n");   
   }
   printf("};\n");    
   printf("static int g_R%d_%dMul[%d][%d]={\n",n,ID,n,n);   
   for(int i=0;i<n;i++){
	   printf("{"); 
	   for(int j=0;j<n;j++){
		  int ij=r->mul(i,j);
		  printf("%d",ij);
		  if(j<n-1)
			printf(",");  
	   } 
       printf("},\n");   
   }
   printf("};\n"); 
}

void writeTable(IRing* r,const char *path){
   ofstream fout(path);
   int n=r->size();
   fout<<"[R"<<n<<"Add]"<<endl;   
   for(int i=0;i<n;i++){
	   for(int j=0;j<n;j++){
		  int ij=r->add(i,j);
		  fout<<ij+1<<" ";
	   } 
       fout<<endl;   
   }
   fout<<"[R"<<n<<"Mul]"<<endl;   
   for(int i=0;i<n;i++){
	   for(int j=0;j<n;j++){
		  int ij=r->mul(i,j);
		  fout<<ij+1<<" "; 
	   } 
       fout<<endl;	   
   }	
}

typedef vector<vector<int> > MATRIXi;

// 2阶全矩阵环M2(r)
struct M2r:public IRing
{
public:
	// 静态函数
   static int getidx(vector<MATRIXi> &Arr2,MATRIXi &Arr1);
   static bool IsEqual(const MATRIXi &t,const MATRIXi &m);
   static vector<MATRIXi> FR(IRing* r,vector<MATRIXi>& gen); 
   static MATRIXi add(IRing* r,const MATRIXi &t,const MATRIXi &m);  
   static MATRIXi mul(IRing* r,const MATRIXi &t,const MATRIXi &m);
   static string MStr(const MATRIXi &t,const char* szL="[",const char* szR="]");   
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	M2r();// 默认构造函数
	M2r(IRing* r);
	M2r(IRing* r,vector<MATRIXi>& gen);	
	// 析构函数
	~M2r();
	// 成员函数	
    // 有限环序列A、B、C、D、E、F、G、H、I、J、K(拉丁字母符号以4阶环的GAP编号为准)<->C、B、A、J、?、?、Y、P、X、D、K(对应的某些文献的拉丁字母符号)
    void initD(int n);// 256阶全矩阵环M2(Z/4Z)的4阶子环R4_4所在的有限环序列,J=<a,b;pa=pb=0,a^2=b^2=0>=C_p×C_p(0)	
	void initE(int n);// R4_5所在的有限环序列,
	void initF(int n);// R4_6所在的有限环序列,		
    void initG(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_7所在的有限环序列,Y	
    void initH(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_8所在的有限环序列,P	
    void initI(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_9所在的有限环序列,X	
    void initJ(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_10所在的有限环序列,D=<a,b;pa=pb=0,a^2=a,b^2=b,ab=ba=0>=Z_p+Z_p	
    void initK(int n);// 16阶全矩阵环M2(Z/2Z)的4阶子环R4_11所在的有限环序列,K=GF(p^2)=p^2阶有限域
	bool initR8(int ID=0);
	bool initR16(int ID=0);	
	bool initR16_2(int ID=0);
	bool init(int n,int ID);	
	// 成员变量
	vector<MATRIXi> m_Set;
	IRing* m_r;
	int m_flag;// M2r对象析构时是否释放m_r指向的内存
};

M2r::M2r(){
	m_r=NULL;
	m_flag=0;	
}

M2r::~M2r(){
#if 0
	int ID=IdRing(this);
	printf("R%d_%d: %s\n",size(),ID,__FUNCTION__);	
#endif	
	if(m_flag==1 && m_r!=NULL){
		delete m_r;
		m_r=NULL;
	}	
}

// A:=[ [ ZmodnZObj(2,m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj(0,m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 2, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initD(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=n;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=0;
   B[0][1]=0;
   B[1][0]=0;
   B[1][1]=n;
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n*n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

void M2r::initE(int n){
}

void M2r::initF(int n){
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 1, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;YRing:=RingByGenerators([A,B]);;
void M2r::initG(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=1;
   B[0][1]=1;
   B[1][0]=0;
   B[1][1]=0;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 0, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initH(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=0;  
   B[0][0]=1;
   B[0][1]=0;
   B[1][0]=1;
   B[1][1]=0;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 0, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 1, m) ] ];;B:=[ [ ZmodnZObj( 1, m), ZmodnZObj( 1, m) ], [ ZmodnZObj( 0, m), ZmodnZObj( 1, m) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initI(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=1;  
   B[0][0]=1;
   B[0][1]=1;
   B[1][0]=0;
   B[1][1]=1;  
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

// A:=[ [ ZmodnZObj( 1, 2 ), ZmodnZObj( 0, 2 ) ], [ ZmodnZObj( 0, 2 ), ZmodnZObj( 1, 2 ) ] ];;B:=[ [ ZmodnZObj( 1, 2 ), ZmodnZObj( 0, 2 ) ], [ ZmodnZObj( 0, 2 ), ZmodnZObj( 0, 2 ) ] ];;R:=RingByGenerators([A,B]);;
void M2r::initJ(int n){
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=0;
   A[1][0]=0;
   A[1][1]=1;  
   B[0][0]=1;
   B[0][1]=0;
   B[1][0]=0;
   B[1][1]=0; 
   vector<MATRIXi> gen;
   gen.push_back(A);
   gen.push_back(B);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

void M2r::initK(int n){
   MATRIXi A(2,vector<int>(2,0));
   A[0][0]=1;
   A[0][1]=1;
   A[1][0]=1;
   A[1][1]=0;   
   vector<MATRIXi> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_Set=FR(m_r,gen);   
}

bool M2r::init(int n,int ID){
	IRing* newR4(int ID,int p=2);	
	IRing* newR8(int ID);
	IRing* newR16(int ID);
	IRing* newRing(int n,int ID);		
	const CRingDataItem * pItem = Find(n,ID);
	if(pItem && pItem->m_n0==2){
		if(pItem->m_n1==1)
			m_r=new ZmodnZ(1,pItem->m_n2);
		else if(pItem->m_n1==4)
			m_r=newR4(pItem->m_n2);
		else if(pItem->m_n1==8)
			m_r=newR8(pItem->m_n2);
		else if(pItem->m_n1==16)
			m_r=newR16(pItem->m_n2);	
		else if(pItem->m_n1==9||pItem->m_n1==27)
			m_r=newRing(pItem->m_n1,pItem->m_n2);	
		else if(pItem->m_n1==32)
			m_r=FiniteRing::newR32(pItem->m_n2);		
		vector<MATRIXi> gen;		
		vector<string> vv=split(pItem->m_mstr,";");
		for(int i=0;i<vv.size();i++){
			MATRIXi A(2,vector<int>(2,0));
			vector<string> v=split(vv[i],",");
			A[0][0]=atoi(v[0].c_str());
			A[0][1]=atoi(v[1].c_str());
			A[1][0]=atoi(v[2].c_str());
			A[1][1]=atoi(v[3].c_str());
			gen.push_back(A);
		}	
		m_flag=1;
		m_Set=FR(m_r,gen); 
		return true;		
	}	
	return false;
}

bool M2r::initR8(int ID){
	bool bDone = init(8,ID);
	if(bDone){
		return true;		
	}	
	vector<MATRIXi> gen;	
	MATRIXi A(2,vector<int>(2,0));
	MATRIXi B(2,vector<int>(2,0));	
	if(ID==0){	 
		return false; 
	}else{
		return false;
	}	 
	m_flag=1;
	m_Set=FR(m_r,gen); 
    return true;	
}

bool M2r::initR16(int ID){
	bool bDone = init(16,ID);
	if(bDone){
		return true;		
	}	
   vector<MATRIXi> gen;	
   MATRIXi A(2,vector<int>(2,0));
   MATRIXi B(2,vector<int>(2,0));
	if(ID==0){	 
		return false;  
   }else if(ID>280 && ID<=390){ 
		return initR16_2(ID);
   }else if(ID==0){	 
		return false;  
   }else{
		return false;
   }
   m_flag=1;
   m_Set=FR(m_r,gen); 
   return true; 
}

bool M2r::initR16_2(int ID){
	vector<MATRIXi> gen;	
	MATRIXi A(2,vector<int>(2,0));
	MATRIXi B(2,vector<int>(2,0));	
	if(ID==0){	 
		return false;  
	}else{
		return false;
	}	 
	m_flag=1;
	m_Set=FR(m_r,gen); 
    return true;	
}

M2r::M2r(IRing* r,vector<MATRIXi>& gen){
	m_r=r;
	m_Set=FR(r,gen);
}

vector<MATRIXi> M2r::FR(IRing* r,vector<MATRIXi>& gen){
	vector<MATRIXi> Set;
	int n=gen[0].size();
	MATRIXi E(n,vector<int>(n,0));
	Set.push_back(E);
	for(int i=0;i<gen.size();i++)
	{
		if(!IsEqual(gen[i],E))
			Set.push_back(gen[i]);
	}
	int R=Set.size();
	int cnt=R;
	int cnt1=R;
	do{
		cnt=Set.size();
		for(int i=0;i<cnt;i++)
		{
			for(int j=0;j<cnt;j++)
			{
				MATRIXi IJ=mul(r,Set[i],Set[j]);
				vector<MATRIXi>::iterator p=std::find(Set.begin(),Set.end(),IJ);
				if(p==Set.end()){
					Set.push_back(IJ);
				}
				MATRIXi IJ1=add(r,Set[i],Set[j]);
				p=std::find(Set.begin(),Set.end(),IJ1);
				if(p==Set.end()){
					Set.push_back(IJ1);
				}
			}
		}
		cnt1=Set.size();
	}while(cnt1>cnt);
    return Set;	
}

string M2r::MStr(const MATRIXi &t,const char* szL,const char* szR){
	string str=szL;
	int n=t.size();
	for(int i=0;i<n;i++)
	{
        str+=szL;
		for(int j=0;j<n;j++)
		{
			char sz[20]={0};
			sprintf(sz,"%d",t[i][j]);
			str+=sz;
			if(j<n-1)
				str+=",";
		}
		str+=szR;
		if(i<n-1)
			str+=",";
	}
	str+=szR;
	return str;
}

MATRIXi M2r::add(IRing* r,const MATRIXi &t,const MATRIXi &m)
{
    int n=t.size();
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=r->add(t[i][j],m[i][j]);
		}
	}
	return C;
}

MATRIXi M2r::mul(IRing* r,const MATRIXi &t,const MATRIXi &m)
{
    int n=t.size();
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=r->add(sum,r->mul(t[i][k],m[k][j]));
			}
			C[i][j]=sum;
		}
	}
	return C;
}

int M2r::getidx(vector<MATRIXi> &Arr2,MATRIXi &Arr1){
	int N=Arr2.size();
	for(int i=0;i<N;i++){
		if(IsEqual(Arr2[i],Arr1))
			return i;
	}
	return -1;
}

bool M2r::IsEqual(const MATRIXi &t,const MATRIXi &m){
	int nt=t.size();
	int nm=m.size();
	if(nt!=nm)
		return false;
	for(int i=0;i<nt;i++){
		for(int j=0;j<nt;j++){
			if(t[i][j]!=m[i][j])
				return false;
		}
	}
	return true;
}

void M2r::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",size(),ID,str.c_str());	
	string I1=calcI1(this);
	string I2=calcI2(this);   
	printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());	
	//string S1=calS1(this,true);
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	if(size()<100){
		printRing(this);	
	}
	else{
	   printf("环的阶太大，不在控制台打印\n");
	}
}

int M2r::add(int a,int b)
{
	MATRIXi A=m_Set[a];
	MATRIXi B=m_Set[b];	
    int n=2;
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=m_r->add(A[i][j],B[i][j]);
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int M2r::mul(int a,int b)
{
	MATRIXi A=m_Set[a];
	MATRIXi B=m_Set[b];	
    int n=2;
	MATRIXi C(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=m_r->add(sum,m_r->mul(A[i][k],B[k][j]));
			}
			C[i][j]=sum;
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int M2r::size()
{
	return m_Set.size();
}

M2r::M2r(IRing* r)
{
	m_r=r;
	int N=r->size();
	int n=2;
	MATRIXi m(n,vector<int>(n,0));
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			for(int k=0;k<N;k++){
				for(int l=0;l<N;l++){
					m[0][0]=i;
					m[0][1]=j;
					m[1][0]=k;
					m[1][1]=l;
                    m_Set.push_back(m);					
				}
			}
		}
	}
}

typedef unsigned int TElem; // unsigned char
typedef vector<vector<TElem> > MATRIXi8;

// n阶全矩阵环Mn(r)
struct Mnr:public IRing
{
public:
	// 静态函数
   static int getidx(vector<MATRIXi8> &Arr2,MATRIXi8 &Arr1);
   static bool IsEqual(const MATRIXi8 &t,const MATRIXi8 &m);	
   static bool nextV1(int m,vector<TElem>& v);
   static vector<MATRIXi8> FR(IRing* r,vector<MATRIXi8>& gen); 
   static MATRIXi8 add(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m);  
   static MATRIXi8 mul(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m); 
   static string MStr(const MATRIXi8 &t,const char* szL="[",const char* szR="]");   
   static MATRIXi8 getMATRIXi8(int n,int m,int idx);    
public:
	// 实现抽象基类的方法
	virtual void printTable();
	virtual int add(int a,int b);
	virtual int mul(int a,int b);
	virtual int size(); 
	// 构造函数
	Mnr();// 默认构造函数
	Mnr(IRing* r,int n);
	Mnr(IRing* r,int n,vector<MATRIXi8>& gen);	
	// 析构函数
	~Mnr();	
	// 成员函数	
	bool init(IRing* r,int n,const vector<MATRIXi8> & gen,int N);	
    int visitMnRm(int n,int m);	
	// 有限环序列
	void initE(int n);// R4_5、R9_5所在的n^2阶有限环序列,
	void initF(int n);// R4_6、R9_6所在的n^2阶有限环序列,		
	void initL(int n);// R8_38所在的n^3阶有限环序列,
	bool initR8(int ID=0);
	bool initR16(int ID=0);	
	bool initR16_2(int ID=0);// 特征为2的16阶环，拆分原因：fatal error C1061: 编译器限制 : 块嵌套太深
	bool init(int n,int ID);	
	// 成员变量
	vector<MATRIXi8> m_Set;
	IRing* m_r;
	int m_n;
	int m_flag;// Mnr对象析构时是否释放m_r指向的内存
};

Mnr::Mnr(){
	m_r=NULL;
	m_flag=0;	
}

Mnr::~Mnr(){
	if(m_flag==1 && m_r!=NULL){
		delete m_r;
		m_r=NULL;
	}	
}

// A:=[[Z(m),Z(m),0*Z(m),0*Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)],[Z(m),Z(m),0*Z(m),0*Z(m)]];;R4_5:=RingByGenerators([A]);;
void Mnr::initE(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   //MATRIXi8 B(4,vector<unsigned char>(4,0));
   A[0][0]=0;
   A[0][1]=1;
   A[0][2]=0;
   A[0][3]=1; 
   A[1][0]=n-1;
   A[1][1]=n-1;
   A[1][2]=0;
   A[1][3]=0;
   A[2][0]=n-1;
   A[2][1]=n-1;
   A[2][2]=0;
   A[2][3]=0;
   A[3][0]=0;
   A[3][1]=1;
   A[3][2]=0;
   A[3][3]=1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

// A:=[[Z(m),0*Z(m),0*Z(m),Z(m)],[Z(m),0*Z(m),0*Z(m),Z(m)],[0*Z(m),Z(m),Z(m),0*Z(m)],[Z(m),0*Z(m),0*Z(m),Z(m)]];;R4_6:=RingByGenerators([A]);;
void Mnr::initF(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   A[0][0]=1;
   A[0][1]=0;
   A[0][2]=0;
   A[0][3]=1;
   A[1][0]=n-1;
   A[1][1]=0;
   A[1][2]=0;
   A[1][3]=n-1; 
   A[2][0]=0;
   A[2][1]=n-1;
   A[2][2]=n-1;
   A[2][3]=0;
   A[3][0]=n-1;
   A[3][1]=0;
   A[3][2]=0;
   A[3][3]=n-1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

// A:=[[0*Z(m),Z(m),0*Z(m),Z(m)],[Z(m),Z(m),0*Z(m),0*Z(m)],[0*Z(m),0*Z(m),Z(m),Z(m)],[0*Z(m),Z(m),0*Z(m),Z(m)]];;R8_38:=RingByGenerators([A]);;
void Mnr::initL(int n){
   MATRIXi8 A(4,vector<TElem>(4,0));
   //MATRIXi8 B(4,vector<unsigned char>(4,0));
   A[0][0]=0;
   A[0][1]=1;
   A[0][2]=0;
   A[0][3]=1;
   A[1][0]=1;
   A[1][1]=1;
   A[1][2]=0;
   A[1][3]=0; 
   A[2][0]=0;
   A[2][1]=0;
   A[2][2]=1;
   A[2][3]=1;
   A[3][0]=0;
   A[3][1]=1;
   A[3][2]=0;
   A[3][3]=1;
   vector<MATRIXi8> gen;
   gen.push_back(A);
   m_r=new ZmodnZ(1,n);
   m_flag=1;
   m_n=4;
   m_Set=FR(m_r,gen);   
}

bool Mnr::init(int n,int ID){
	IRing* newR4(int ID,int p=2);	
	IRing* newR8(int ID);
	IRing* newR16(int ID);
	IRing* newRing(int n,int ID);	
	const CRingDataItem * pItem = Find(n,ID);
	if(pItem && pItem->m_n0>2){
		if(pItem->m_n1==1)
			m_r=new ZmodnZ(1,pItem->m_n2);
		else if(pItem->m_n1==4)
			m_r=newR4(pItem->m_n2);		
		else if(pItem->m_n1==8)
			m_r=newR8(pItem->m_n2);
		else if(pItem->m_n1==16)
			m_r=newR16(pItem->m_n2);
		else if(pItem->m_n1==9||pItem->m_n1==27)
			m_r=newRing(pItem->m_n1,pItem->m_n2);		
		m_n=pItem->m_n0;	
		vector<MATRIXi8> gen;		
		vector<string> vv=split(pItem->m_mstr,";");
		for(int i=0;i<vv.size();i++){
			MATRIXi8 A(m_n,vector<TElem>(m_n,0));
			vector<string> v=split(vv[i],",");
			for(int j=0;j<m_n;j++)
				for(int k=0;k<m_n;k++)
					A[j][k]=atoi(v[j*m_n+k].c_str());
			gen.push_back(A);
		}	
		m_flag=1;
		m_Set=FR(m_r,gen); 
		return true;		
	}	
	return false;
}

bool Mnr::initR8(int ID){
	bool bDone = init(8,ID);
	if(bDone){
		return true;		
	}	
   vector<MATRIXi8> gen;		
   if(ID==0){
	   return false;
   }else{
       return false;		   
   }
   m_flag=1;
   m_Set=FR(m_r,gen); 
   return true;   
}

bool Mnr::initR16(int ID){
	bool bDone = init(16,ID);
	if(bDone){
		return true;		
	}		
   vector<MATRIXi8> gen;     
	if(ID==0){	
        return false;   				
    }else if(ID>270 && ID<=390){  
 	    return initR16_2(ID);  		
   }else{
       return false; 
   }
   m_flag=1;
   m_Set=FR(m_r,gen);  
   return true;    
}

bool Mnr::initR16_2(int ID){
   vector<MATRIXi8> gen;     
   if(ID==0){	
        return false; 
   }else{
       return false; 
   }
   m_flag=1;
   m_Set=FR(m_r,gen);  
   return true; 		
}

Mnr::Mnr(IRing* r,int n,vector<MATRIXi8>& gen){
	m_r=r;
	m_n=n;
	m_flag=0;
	m_Set=FR(r,gen);
}

string Mnr::MStr(const MATRIXi8 &t,const char* szL,const char* szR){
	string str=szL;
	int n=t.size();
	for(int i=0;i<n;i++)
	{
        str+=szL;
		for(int j=0;j<n;j++)
		{
			char sz[20]={0};
			sprintf(sz,"%d",t[i][j]);
			str+=sz;
			if(j<n-1)
				str+=",";
		}
		str+=szR;
		if(i<n-1)
			str+=",";
	}
	str+=szR;
	return str;
}

vector<MATRIXi8> Mnr::FR(IRing* r,vector<MATRIXi8>& gen){
	vector<MATRIXi8> Set;
	int n=gen[0].size();
	MATRIXi8 E(n,vector<TElem>(n,0));
	Set.push_back(E);
	for(int i=0;i<gen.size();i++)
	{
		if(!IsEqual(gen[i],E))
			Set.push_back(gen[i]);
	}
	int R=Set.size();
	int cnt=R;
	int cnt1=R;
	do{
		cnt=Set.size();
		for(int i=0;i<cnt;i++)
		{
			for(int j=0;j<cnt;j++)
			{
				MATRIXi8 IJ=mul(r,Set[i],Set[j]);
				vector<MATRIXi8>::iterator p=std::find(Set.begin(),Set.end(),IJ);
				if(p==Set.end()){
					Set.push_back(IJ);
				}
				MATRIXi8 IJ1=add(r,Set[i],Set[j]);
				p=std::find(Set.begin(),Set.end(),IJ1);
				if(p==Set.end()){
					Set.push_back(IJ1);
				}
			}
		}
		cnt1=Set.size();
	}while(cnt1>cnt);
    return Set;	
}

MATRIXi8 Mnr::add(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m)
{
    int n=t.size();
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=r->add(t[i][j],m[i][j]);
		}
	}
	return C;
}

MATRIXi8 Mnr::mul(IRing* r,const MATRIXi8 &t,const MATRIXi8 &m)
{
    int n=t.size();
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=r->add(sum,r->mul(t[i][k],m[k][j]));
			}
			C[i][j]=sum;
		}
	}
	return C;
}

bool Mnr::init(IRing* r,int n,const vector<MATRIXi8> & gen,int N){
	m_r=r;
	m_n=n;
	m_flag=0;	
	//int n=gen[0].size();
	MATRIXi8 E(n,vector<TElem>(n,0));
	m_Set.push_back(E);
	for(int i=0;i<gen.size();i++)
	{
		if(!IsEqual(gen[i],E))
			m_Set.push_back(gen[i]);
	}
	int R=m_Set.size();
	int cnt=R;
	int cnt1=R;
	do{
		cnt=m_Set.size();
		if(N>0 && cnt>N)
			return false;		
		for(int i=0;i<cnt;i++)
		{
			for(int j=0;j<cnt;j++)
			{
				MATRIXi8 IJ=mul(r,m_Set[i],m_Set[j]);
				vector<MATRIXi8>::iterator p=std::find(m_Set.begin(),m_Set.end(),IJ);
				if(p==m_Set.end()){
					m_Set.push_back(IJ);
				}
				MATRIXi8 IJ1=add(r,m_Set[i],m_Set[j]);
				p=std::find(m_Set.begin(),m_Set.end(),IJ1);
				if(p==m_Set.end()){
					m_Set.push_back(IJ1);
				}
			}
		}
		cnt1=m_Set.size();
	}while(cnt1>cnt);
    return true;		
}

MATRIXi8 Mnr::getMATRIXi8(int n,int m,int idx){
	vector<TElem> v(n*n,0);
	MATRIXi8 M(n,vector<TElem>(n,0));	
	if(idx<=0){
		return M;
	}
	int cnt=-1;
	do {
		for(int k=0;k<n*n;k++){
			int i=k/n;
			int j=k%n;
			M[i][j]=v[k];
		}
		cnt++;
		if(cnt==idx)
			return M;
	}while(nextV1(m,v));	
	return M;	
}

bool Mnr::nextV1(int m,vector<TElem>& v){
	int n=v.size();
	for(int i=n-1;i>=0;i--){
		if(v[i]<m-1){
			v[i]+=1;
			return true;
		}
		else if(v[i]==m-1 && i>0){
			if(v[i-1]<m-1){
				v[i-1]+=1;
				for(int j=i;j<n;j++)
					v[j]=0;
				return true;
			}
		}
	}
	return false;
}

// 调用m^(n^2)次visit
int Mnr::visitMnRm(int n,int m){
	vector<TElem> v(n*n,0);
	int cnt=0;
	do {
		++cnt;
		MATRIXi8 M(n,vector<TElem>(n,0));
		for(int k=0;k<n*n;k++){
			int i=k/n;
			int j=k%n;
			M[i][j]=v[k];
		}
		m_Set.push_back(M);
	}while(nextV1(m,v));
	return cnt;
}

int Mnr::getidx(vector<MATRIXi8> &Arr2,MATRIXi8 &Arr1){
	int N=Arr2.size();
	for(int i=0;i<N;i++){
		if(IsEqual(Arr2[i],Arr1))
			return i;
	}
	return -1;
}

bool Mnr::IsEqual(const MATRIXi8 &t,const MATRIXi8 &m){
	int nt=t.size();
	int nm=m.size();
	if(nt!=nm)
		return false;
	for(int i=0;i<nt;i++){
		for(int j=0;j<nt;j++){
			if(t[i][j]!=m[i][j])
				return false;
		}
	}
	return true;
}

void Mnr::printTable()
{
	int ID=IdRing(this);
	string str=calcRingInvariant(this);
	printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",size(),ID,str.c_str());
	string I1=calcI1(this);
	string I2=calcI2(this);   
	printf("I1I2=%s,%s\n",I1.c_str(),I2.c_str());	
	//string undoS1=calS1(this,false);	
	//printf("R%d_%d:S1=%s,S1(未经处理)=%s\n",size(),ID,S1.c_str(),undoS1.c_str());
	if(size()<100){
		printRing(this);	
	}
	else{
	   printf("环的阶太大，不在控制台打印\n");
	}
}

int Mnr::add(int a,int b)
{
	MATRIXi8 A=m_Set[a];
	MATRIXi8 B=m_Set[b];	
    int n=m_n;
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			C[i][j]=m_r->add(A[i][j],B[i][j]);
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int Mnr::mul(int a,int b)
{
	MATRIXi8 A=m_Set[a];
	MATRIXi8 B=m_Set[b];	
    int n=m_n;
	MATRIXi8 C(n,vector<TElem>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			int sum=0;
			for(int k=0;k<n;k++){
				sum=m_r->add(sum,m_r->mul(A[i][k],B[k][j]));
			}
			C[i][j]=sum;
		}
	}
	int c=getidx(m_Set,C);
	return c;
}

int Mnr::size()
{
	return m_Set.size();
}

Mnr::Mnr(IRing* r,int n)
{
	m_r=r;
	m_n=n;
	int N=r->size();
	int cnt=visitMnRm(m_n,N);
	printf("cnt=%d\n",cnt);
}

string calcI2a(IRing* r){
	int IdRing(IRing* r);
	int n=r->size();
	vector<pair<int,int> > v;
   for(int i=0;i<n-1;i++){
	   int j=i+1;
		   vector<int> vi;
		   vi.push_back(i);
		   vi.push_back(j);		   
		   Subring si(r,vi);
		   int ni=si.size();
		   if(ni<n && ni>0){
			int ID=IdRing(&si);
#if 1			
			if(ID==-1 && ni==16){
				printf("i=%d,j=%d\n",i,j);
			    break;
			}
#endif
			v.push_back(make_pair(ni,ID));
		   }
   }
	std::sort(v.begin(),v.end());
	vector<tuple<int,int,int> > v1=doN2Vec(v);
	string str="[";
	for(int i=0;i<v1.size();i++)
	{
		char sz[200]={0};
		sprintf(sz,"[%d,%d,%d],",get<0>(v1[i]),get<1>(v1[i]),get<2>(v1[i]));
		str+=sz;
	}
	if(str.size()>2)
	{
		str=str.substr(0,str.size()-1);
	}
	str+="]";
	return str;
}

string IMStr(IRing *r,int i)
{
#ifdef USE_BLACKET
	const char* szL="[";
	const char* szR="]";
#else
	const char* szL="";
	const char* szR="";	
#endif	
	M2r *r1=dynamic_cast<M2r *>(r);
	if(r1)
		return M2r::MStr(r1->m_Set[i],szL,szR);
	Mnr *r2=dynamic_cast<Mnr *>(r);
	if(r2)
		return Mnr::MStr(r2->m_Set[i],szL,szR);
	return "";
}

int g_i=0;
void findsubring1(IRing *r,int n)
{
	set<pair<int,int>> M;
	set<string> S;	
	int ID=0;//IdRing(r);
	//srand(time(NULL));
	//g_i=rand()%r->size();
	//printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	int i0=(g_i<=0?1:g_i);
	for(int i=i0;i<r->size();i++)			
	{
		vector<int> v;
		v.push_back(i);				
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		int ni=S1i.size();
		//if(ni!=n)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(ni,ID));
		int cnt1=M.size();
		if(cnt1>cnt){		
			printf("cnt1=%d:R%d_%d->i=%d=>%s\n",cnt1,ni,ID,i,IMStr(r,i).c_str());	
            if((ni==32||ni==81||ni==64) && ID>0){
				char sz1[128]={0};   
				sprintf(sz1,"R%d_%d.txt",ni,ID);
				writeTable(&S1i,sz1);                  
			}			
		}
		if(ID==-1) 
		{					
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){		
				printf("i=%d=>%s->R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",i,IMStr(r,i).c_str(),ni,ID,strR.c_str());
			}
			S.insert(strR);	
		}		   
	}
}

void findsubring2(IRing *r,int n)
{
#define PRINT_LOG 0	
	bool bFind=false;	
	int ID=0;//IdRing(r);
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d_%d.txt",r->size(),ID,time(NULL));
    ofstream fout(sz);
    string strCmd="del ";
	strCmd+=sz;	
#endif	
	map<pair<int,int>,pair<int,int>> M;	
	set<string> S;		
	//srand(time(NULL));
	//g_i=rand()%r->size();
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);	
	for(int i=g_i;i<r->size()-1;i++)		
	for(int j=i+1;j<r->size();j++)
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		//Subring S1i(r,v);
		int ni=S1i.size();
		//if(ni!=16)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
			string str=IMStr(r,i);
			string strj=IMStr(r,j);			
			printf("cnt1=%d:R%d_%d->i=%d,j=%d=>%s;%s\n",cnt1,ni,ID,i,j,str.c_str(),strj.c_str());
            if((ni==32||ni==81||ni==64) && ID>0){
				char sz1[128]={0};   
				sprintf(sz1,"R%d_%d.txt",ni,ID);
				writeTable(&S1i,sz1);                  
			}				
		}	
		if(ID==-1)  
		{		
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){			
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());				
				//S1i.printTable();
#if PRINT_LOG			
				fout<<i<<","<<j<<"=>";
				fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2N6="<<strR<<endl;
				bFind=true;
#endif
			}
			S.insert(strR);
			//break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring3(IRing *r,int n)
{
#define PRINT_LOG 0
	bool bFind=false;	
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d.txt",r->size(),time(NULL));
    ofstream fout(sz);
    string strCmd="del ";
	strCmd+=sz;	
#endif	
	map<pair<int,int>,pair<int,int>> M;	
	set<string> S;	
	int ID=0;//IdRing(r);
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int i=g_i;i<r->size()-2;i++)		
	for(int j=i+1;j<r->size()-1;j++)
	for(int k=j+1;k<r->size();k++)		
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);	
		v.push_back(k);			
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		int ni=S1i.size();
		//if(ni!=n)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){			
			string str=IMStr(r,i);
			string strj=IMStr(r,j);
			string strk=IMStr(r,k);				
			printf("cnt1=%d:R%d_%d->i=%d,j=%d,k=%d=>%s;%s;%s\n",cnt1,ni,ID,i,j,k,str.c_str(),strj.c_str(),strk.c_str());			
            if((ni==32||ni==81||ni==64) && ID>0){
				char sz1[128]={0};   
				sprintf(sz1,"R%d_%d.txt",ni,ID);
				writeTable(&S1i,sz1);                  
			}			
		}	
		if(ID==-1)   
		{					
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){				
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());				
#if 0//PRINT_LOG			
				fout<<i<<","<<j<<","<<k<<"=>";
				fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2N6="<<strR<<endl;
				bFind=true;
#endif
		}
			S.insert(strR);
			//break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findsubring4(IRing *r,int n)
{
#define PRINT_LOG 0	
	bool bFind=false;	
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d.txt",r->size(),time(NULL));
    ofstream fout(sz);
    string strCmd="del ";
	strCmd+=sz;	
#endif	
	map<pair<int,int>,pair<int,int>> M;	
	set<string> S;		
	int ID=0;//IdRing(r);
	printf("R%d_%d g_i=%d\n",r->size(),ID,g_i);
	for(int t=g_i;t<r->size()-3;t++)	
	for(int i=t+1;i<r->size()-2;i++)		
	for(int j=i+1;j<r->size()-1;j++)
	for(int k=j+1;k<r->size();k++)		
	{
		vector<int> v;
		v.push_back(t);			
		v.push_back(i);		
		v.push_back(j);	
		v.push_back(k);			
		Subring S1i;
		bool bn=S1i.init(r,v,n);
		if(!bn)
			continue;
		int ni=S1i.size();
		//if(ni!=n)
			//continue;
		int ID=IdRing(&S1i);
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){
#if 1
			printf("cnt1=%d:R%d_%d->t=%d,i=%d,j=%d,k=%d\n",cnt1,ni,ID,t,i,j,k);	
#else
			string strt=IMStr(r,t);		
			string str=IMStr(r,i);
			string strj=IMStr(r,j);
			string strk=IMStr(r,k);		
			printf("cnt1=%d:R%d_%d->t=%d,i=%d,j=%d,k=%d=>%s;%s;%s;%s\n",cnt1,ni,ID,t,i,j,k,strt.c_str(),str.c_str(),strj.c_str(),strk.c_str());	
#endif
            if((ni==32||ni==81||ni==64) && ID>0){
				char sz1[128]={0};   
				sprintf(sz1,"R%d_%d.txt",ni,ID);
				writeTable(&S1i,sz1);                  
			}			
		}	
		if(ID==-1)   
		{					
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){			
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());				
#if 0//PRINT_LOG			
				fout<<t<<","<<i<<","<<j<<","<<k<<"=>";
				fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2N6="<<strR<<endl;
				bFind=true;
#endif
		}
			S.insert(strR);
			//break;
		}		   
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("子环表示已输出到文件%s\n",sz);
#endif	
}

void findquotientring(IRing *r,int n)
{
#define PRINT_LOG 0	
	bool bFind=false;	
	int ID=0;//IdRing(r);
	printf("R%d_%d\n",r->size(),ID);
#if PRINT_LOG
    char sz[100]="0";
	sprintf(sz,"R%d_%d_%d.txt",r->size(),ID,time(NULL));
    ofstream fout(sz);
    string strCmd="del ";
	strCmd+=sz;	
#endif	
	map<pair<int,int>,pair<int,int>> M;	
	set<string> S;		
	for(int i=0;i<r->size()-1;i++)		
    //int i=0;
	for(int j=i+1;j<r->size();j++)
	{
		vector<int> v;
		v.push_back(i);		
		v.push_back(j);
		Subring S1i0;
		bool bn=S1i0.init(r,v,r->size()/n);
		if(!bn)
			continue;
		if(S1i0.m_Set.size()!=r->size()/n)
			continue;
		vector<int> v0=v;
		v=S1i0.m_Set;
		int iret1=IsIdeal(r,v); 
		if(iret1!=1)
			continue;
		quotientRing S1i(r,v);
		int ni=S1i.size();	
		int IDr=ID;
		bool b=IsRing(&S1i);
		if(!b){
			continue;
		}			
		int ID=IdRing(&S1i);	
		int cnt=M.size();
		M.insert(make_pair(make_pair(ni,ID),make_pair(i,j)));
		int cnt1=M.size();
		if(cnt1>cnt){		
			int IDr0=IdRing(&S1i0);
			printf("cnt1=%d:R%d_%d/R%d_%d=R%d_%d->i=%d,j=%d\n",cnt1,r->size(),IDr,S1i0.size(),IDr0,ni,ID,i,j);			
			static int cnt=sizeof(IDs)/sizeof(IDs[0]);
		    static vector<int> vIDs(IDs,IDs+cnt);
			vector<int>::iterator p1=std::find(vIDs.begin(),vIDs.end(),ID);
			if((ni==32||ni==27||ni==81) && ID==-1 || (ni==16 && std::find(vIDs.begin(),vIDs.end(),ID)!=vIDs.end())){
				printRing0(&S1i,ID);
			}	
            if((ni==32||ni==81||ni==64) && ID>0){
				char sz1[128]={0};   
				sprintf(sz1,"R%d_%d.txt",ni,ID);
				writeTable(&S1i,sz1);                  
			}			
		}	
		if(ID==-1) 	
		{		
			string strR=calcRingInvariant(&S1i);
			if(S.find(strR)==S.end()){			
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());				
				//S1i.printTable();
#if PRINT_LOG			
				fout<<i<<","<<j<<"=>";
				fout<<"R"<<ni<<"_"<<ID<<":N0n0bAbOn1n2n4n5n6n7n8S1N2N6="<<strR<<endl;
				bFind=true;
#endif
			}
			S.insert(strR);
			//break;
		}
	}
#if PRINT_LOG
	fout.close();	
	if(!bFind)	
		system(strCmd.c_str());
	else
		printf("商环表示已输出到文件%s\n",sz);
#endif	
}

IRing* newR8R2(int ij)
{
	int i=(ij-1)%52+1;
	int j=(ij-1)/52+1;
	IRing* ri=NULL;
	M2r* r8=new M2r;
	bool b=r8->initR8(i);
	if(b){
	   ri=r8;
	}else{
		delete r8;
		r8=NULL;
		Mnr* r8a=new Mnr;
		bool ba=r8a->initR8(i);
		if(ba){
		   ri=r8a;
		}	
		else{
			delete r8a;
			r8a=NULL;
		}				
	}	
	if(!ri)
		return NULL;
	if(j!=1 && j!=2){
		delete ri;
		return NULL;		
	}
    IRing* rj=new ZmodnZ(3-j,2*(3-j));
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR8(int ij)
{
    if(ij<1||ij>52)
		ij=1;
	int i=(ij-1)%52+1;
	IRing* ri=NULL;
	M2r* r8=new M2r;
	bool b=r8->initR8(i);
	if(b){
	   ri=r8;
	}else{
		delete r8;
		r8=NULL;
		Mnr* r8a=new Mnr;
		bool ba=r8a->initR8(i);
		if(ba){
		   ri=r8a;
		}	
		else{
			delete r8a;
			r8a=NULL;
		    ri=FiniteRing::newR8(i);
		}				
	}	
	return ri;
}

IRing* newR16(int ij)
{
    if(ij<1||ij>390)
		ij=1;
	int i=ij;
	IRing* ri=NULL;
	M2r* r16=new M2r;
	bool b=r16->initR16(i);
	if(b){
	   ri=r16;
	}else{
		delete r16;
		r16=NULL;
		Mnr* r16a=new Mnr;
		bool ba=r16a->initR16(i);
		if(ba){
		   ri=r16a;
		}	
		else{
			delete r16a;
			r16a=NULL;
		    ri=FiniteRing::newR16(i);
		}				
	}	
	return ri;
}

IRing* newR4(int i,int p=2)
{
	if(i==1)
	{
		ZmodnZ* r=new ZmodnZ(p*p,p*p*p*p);
		return r;
	}
	if(i==2)
	{
		ZmodnZ* r=new ZmodnZ(p,p*p*p);
		return r;
	}	
	if(i==3)
	{
		ZmodnZ* r=new ZmodnZ(1,p*p);
		return r;
	}
	if(i==4)
	{
		M2r* r=new M2r();
	    r->initD(p);
		return r;
	}	
	if(i==5)
	{
		Mnr* r=new Mnr();
	    r->initE(p);
		return r;
	}	
	if(i==6)
	{
		Mnr* r=new Mnr();
	    r->initF(p);
		return r;
	}	
	if(i==7)
	{
		M2r* r=new M2r();
	    r->initG(p);
		return r;
	}
	if(i==8)
	{
		M2r* r=new M2r();
	    r->initH(p);
		return r;
	}
	if(i==9)
	{
		M2r* r=new M2r();
	    r->initI(p);
		return r;
	}
	if(i==10)
	{
		M2r* r=new M2r();
	    r->initJ(p);
		return r;
	}
	if(i==11)
	{
		M2r* r=new M2r();
	    r->initK(p);
		return r;
	}	
	return NULL;
}

IRing* newRing(int n,int ID){
	IRing *r=NULL;	
	if(n==9){
		r=newR4(ID,3);
	}else if(n==27){
		r=FiniteRing::newR27(ID);
	}
	if(r)
		return r;
	const CRingDataItem * pItem = Find(n,ID);
	if(!pItem){
		printf("没有配置R%d_%d的表示数据！\n",n,ID);
		return 0;
	}
	bool b=false;
	if(pItem->m_n0==2){
	    M2r *r1=new M2r;
		b=r1->init(n,ID);
		r=r1;
	}else{
	    Mnr *r1=new Mnr;
		b=r1->init(n,ID);
		r=r1;		
	}	
	if(b && r){	
		return r;			
	}	
	return NULL;
}

IRing* newR16R2(int ij)
{
	int i=(ij-1)%390+1;
	int j=(ij-1)/390+1;
	IRing* ri=newR16(i);
	if(!ri)
		return NULL;
	if(j!=1 && j!=2){
		delete ri;
		return NULL;		
	}
    IRing* rj=new ZmodnZ(3-j,2*(3-j));
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR16R2(int i,int j)
{
	IRing* ri=newR16(i);
	if(!ri)
		return NULL;
	if(j!=1 && j!=2){
		delete ri;
		return NULL;		
	}
    IRing* rj=new ZmodnZ(3-j,2*(3-j));
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR16R4(int ij)
{
	int i=(ij-1)%390+1;
	int j=(ij-1)/390+1;
	IRing* ri=newR16(i);
	if(!ri)
		return NULL;
	if(j<1 || j>11){
		delete ri;
		return NULL;		
	}
    IRing* rj=newR4(j);
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

IRing* newR8R4(int ij)
{
	int i=(ij-1)%52+1;
	int j=(ij-1)/52+1;
    IRing* ri=newR8(i);
	if(!ri)
		return NULL;
    IRing* rj=newR4(j);
	if(!rj){
		delete ri;
		return NULL;
	}
	DecompositionRing* r= new DecompositionRing(ri,rj);
	r->m_flag=1;
	return r;
}

set<string> gS;
set<std::pair<int,int>> gM;
void FindMnr(IRing* r,int n,int m,int n0)
{	
	for(int i=g_i;i<m;i++)		
	for(int j=i+1;j<m;j++){	
		vector<MATRIXi8> S;
		MATRIXi8 vi=Mnr::getMATRIXi8(n,r->size(),i);
		MATRIXi8 vj=Mnr::getMATRIXi8(n,r->size(),j);		
		S.push_back(vi);
		S.push_back(vj);
		Mnr R;
		bool b=R.init(r,n,S,n0);	
		if(!b)
			continue;
		int ni=R.size();
		int ID=IdRing(&R);
		int cnt=gM.size();
		gM.insert(make_pair(ni,ID));
		int cnt1=gM.size();
		if(cnt1>cnt){
				string str=Mnr::MStr(vi,"","");
				string strj=Mnr::MStr(vj,"","");			   
				printf("R%d_%d->i=%d,j=%d=>%s;%s\n",ni,ID,i,j,str.c_str(),strj.c_str());
				if((ni==32||ni==81||ni==64) && ID>0){
					char sz1[128]={0};   
					sprintf(sz1,"R%d_%d.txt",ni,ID);
					writeTable(&R,sz1);                  
				}
		}
		if(ID==-1){		
			string strR=calcRingInvariant(&R);
			if(gS.find(strR)==gS.end()){			
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());		
			}
			gS.insert(strR);
		}
	}
}

void FindMnr3(IRing* r,int n,int m,int n0)
{	
	for(int i=g_i;i<m;i++)		
	for(int j=i+1;j<m;j++)	
	for(int k=j+1;k<m;k++){	
		vector<MATRIXi8> S;
		MATRIXi8 vi=Mnr::getMATRIXi8(n,r->size(),i);
		MATRIXi8 vj=Mnr::getMATRIXi8(n,r->size(),j);	
		MATRIXi8 vk=Mnr::getMATRIXi8(n,r->size(),k);		
		S.push_back(vi);
		S.push_back(vj);
		S.push_back(vk);		
		Mnr R;
		bool b=R.init(r,n,S,n0);	
		if(!b)
			continue;
		int ni=R.size();
		int ID=IdRing(&R);
		int cnt=gM.size();
		gM.insert(make_pair(ni,ID));
		int cnt1=gM.size();
		if(cnt1>cnt){
				string str=Mnr::MStr(vi,"","");
				string strj=Mnr::MStr(vj,"","");
				string strk=Mnr::MStr(vk,"","");				
				printf("R%d_%d->i=%d,j=%d,k=%d=>%s;%s;%s\n",ni,ID,i,j,k,str.c_str(),strj.c_str(),strk.c_str());
				if((ni==32||ni==81||ni==64) && ID>0){
					char sz1[128]={0};   
					sprintf(sz1,"R%d_%d.txt",ni,ID);
					writeTable(&R,sz1);                  
				}
		}
		if(ID==-1){		
			string strR=calcRingInvariant(&R);
			if(gS.find(strR)==gS.end()){			
				printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());		
			}
			gS.insert(strR);
		}
	}
}

int Mrijk(int argc, char* argv[])
{ 
    int n=2;
	int n1=1;
	int n2=8;
	int ijk=32;	
	if(argc>1)
		n=atoi(argv[1]);
	if(argc>2)
		n1=atoi(argv[2]);
	if(argc>3)
		n2=atoi(argv[3]); 
	if(argc>4)
		g_i=atoi(argv[4]);
	if(argc>5)
		ijk=atoi(argv[5]);	
	int n0=16;
	if(argc>6){
		int _n0=atoi(argv[6]);	
		if(_n0==27)
			n0=27;
		else if(_n0==81)
			n0=81;
		else if(_n0==16)
			n0=16;		
		else
			n0=32;		
	}	
	IRing* r=NULL;	
	if(n1==4 && n2<=11){	
		r=newR4(n2);
	}else if(n1==8 && n2<=52){	
		r=newR8(n2);	
	}else if(n1==16){	
		r=newR16(n2);	
	}else if(n1==9||n1==27){
		r=newRing(n1,n2);		
	}else if(n1==32){
		r=FiniteRing::newR32(n2);		
	}else if(n2%n1==0){
		r=new ZmodnZ(n1,n2);
	}
	if(!r){
		printf("r==NULL\n");
		return 0;
	}
	if(!IsRing(r)){
		printf("r不是环\n");
		return 0;
	}	
	if(n>2||n==1){
		if(n>2 && r->size()>4||(n>3 &&r->size()==4)){
			if((argc>6 && n0==16)||argc>7)
				FindMnr3(r,n,ijk,n0);
			else
				FindMnr(r,n,ijk,n0);				
			/*
			Mnr R16;
			MATRIXi8 A=Mnr::getMATRIXi8(n,r->size(),g_i);
			MATRIXi8 B=Mnr::getMATRIXi8(n,r->size(),ijk);
			vector<MATRIXi8> gen;
			gen.push_back(A);
			gen.push_back(B);		
			bool b=R16.init(r,n,gen,32);		
			if(b){
				int ni=R16.size();
				int ID=IdRing(&R16);
				string str=Mnr::MStr(A);
				string strj=Mnr::MStr(B);			   
				printf("R%d_%d->i=%d,j=%d=>%s,%s\n",ni,ID,g_i,ijk,str.c_str(),strj.c_str());
				if(ID==-1){		
					string strR=calcRingInvariant(&R16);
					printf("R%d_%d:N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s\n",ni,ID,strR.c_str());
				}				
			}else{
				printf("生成32阶以下矩阵环失败\n");
			}*/
			delete r;
			r=NULL;
			return 0;
		}
		Mnr* R=new Mnr(r,n);
		R->m_flag=1;
		//if(argc>5)findsubring3(R,32);else findsubring(R,32);	
		int fun=1;
        if(argc>5){
            fun=atoi(argv[5]);
			if(fun<0||fun>3){
				fun=0;
			}	
		}	
		typedef void(*pF)(IRing *r,int n);
		pF Func[]={findsubring1,findsubring2,findsubring3,findsubring4};
		Func[fun](R,n0);
		delete R;
		R=NULL;
	}else{
		M2r* R=new M2r(r);
		R->m_flag=1;
		int fun=1;
        if(argc>5){
            fun=atoi(argv[5]);
			if(fun<0||fun>3){
				fun=0;
			}	
		}		
		typedef void(*pF)(IRing *r,int n);
		pF Func[]={findsubring1,findsubring2,findsubring3,findsubring4};
		Func[fun](R,n0);	
		delete R;
		R=NULL;		
	}
   
   return 0;
}

int testR16(){	   
	   int IDs[]={273};
	   int cnt=sizeof(IDs)/sizeof(IDs[0]);
	   for(int i=0;i<cnt;i++){
		   IRing* r=newR16(IDs[i]);
		   if(r){
			  int ID=IdRing(r);
			  #if 1
				   bool b=IsRing(r);
				   const char* sz=b?"":"不是环";
				   printf("%d:R16_%d%s\n",i,ID,sz);
				   char sz1[128]={0};   
				   sprintf(sz1,"R%d%d.txt",r->size(),ID);
				   writeTable(r,sz1);	
			  #else
					string I1=calcI1(r);
					string I2=calcI2(r);
					char sz[20]={0};	
					sprintf(sz,"%d",ID);			
					string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+sz+"));";
					printf("%s\n",strI1I2.c_str());	
			  #endif						  
		   }
	}	
	return 0;
}

int testR16R2(){
	int IDs[]={273};
	int cnt=sizeof(IDs)/sizeof(IDs[0]);
	for(int k=0;k<cnt;k++){
		int i=IDs[k];
		for(int j=1;j<=2;j++){
		IRing* r=newR16R2(i,j);
		   if(r){
				int ID=IdRing(r);
				printf("R16_%d×R2_%d=R32_%d\n",i,j,ID);							   
#if 1				
				string strR=calcRingInvariant(r);			
				char sz2[100]={0};	
				sprintf(sz2,"//R16_%d×R2_%d",i,j);			
				string strRingInvariant="m_RingInvariant.insert(make_pair(\""+strR+"\",0));"+sz2;
				printf("%s\n",strRingInvariant.c_str());		
				string I1=calcI1(r);
				string I2=calcI2(r);			
				string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+"0"+"));"+sz2;
				printf("%s\n",strI1I2.c_str());		
#endif
				//delete r;
				//r=NULL;			   
		   }	
		}			
	}	
	return 0;
}	

int testRingData(int argc, char* argv[]){ 
	if(argc<3){
		printf("usage:IRing n ID\n");
		return 0;
	}	
	int n=atoi(argv[1]);
	int ID=atoi(argv[2]);
	const CRingDataItem * pItem = Find(n,ID);
	if(!pItem){
		printf("没有配置R%d_%d的表示数据！\n",n,ID);
		return 0;
	}
	IRing *r=NULL;
	bool b=false;
	if(pItem->m_n0==2){
	    M2r *r1=new M2r;
		b=r1->init(n,ID);
		r=r1;
	}else{
	    Mnr *r1=new Mnr;
		b=r1->init(n,ID);
		r=r1;		
	}	
	if(b && r){
		int in=r->size();
		int iID=IdRing(r);
		printf("R%d_%d",in,iID);
		string str="";
		if(argc>3)
			str=argv[3];
		if(str.substr(0,1)=="w"){
			char sz1[128]={0};   
			sprintf(sz1,"R%d%s%d.txt",r->size(),str.substr(1,1).c_str(),iID);
			writeTable(r,sz1);
			printf("\n写入文件%s\n",sz1);			
		}			
		if(in<=32 && iID<=0||str.substr(0,1)=="r"){
			string strR=calcRingInvariant(r);
			printf(":N0n0bAbOn1n2n4n5n6n7n8S1N2N6=%s",strR.c_str());
			int rk=Rank(r);
			printf("\nr=%d",rk);			
			string I1=calcI1(r);
			string I2=calcI2(r);			
			printf("\nI1I2=%s,%s",I1.c_str(),I2.c_str());				
		}
		if(in>=32 && in<=256){
			int fun=1;
			if(argc>3){
				fun=atoi(argv[3]);
				if(fun<-1||fun>4){
					fun=0;
				}	
			}	
			int n0=16;
			if(argc>4){
				int _n0=atoi(argv[4]);	
				if(_n0==27)
					n0=27;
				else if(_n0==81)
					n0=81;		
				else
					n0=32;		
			}				
			typedef void(*pF)(IRing *r,int n);
			pF Func[]={findsubring1,findsubring2,findsubring3,findsubring4,findquotientring};
			Func[fun](r,n0);		
		}
		printf("\n");	
		for(int i=0;i<in;i++){
			string stri=IMStr(r,i);		
			printf("i=%d=>%s\n",i,stri.c_str());	
		}		
	}
	return 0;
}	

int main(int argc, char* argv[])
{ 	
	// 将环表示数据配置到文件中，精简代码
	int ret=LoadData("RingData.csv");
	printf("ret=%d,环表示数据表中的记录条数=%d\n",ret,g_mapRingDataCache.size());
#ifdef TRD	
	return testRingData(argc,argv);	
#endif	
    //return testR16R2();
	return Mrijk(argc,argv);	
	// 129种16阶可分解环
	static int IDs0[]={6,9,10,11,12,13,14,15,103,104,107,112,113,96,152,180,200,203,204,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,230,231,233,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,380,382,384,386,387,388,389};	
	static int IDs1[]={};
	static int cnt0=sizeof(IDs0)/sizeof(IDs0[0]);
	static int cnt1=sizeof(IDs1)/sizeof(IDs1[0]);
	static int cnt=sizeof(IDs)/sizeof(IDs[0]);
	vector<int> IDs2;// 差集s1-s0=s2
#if 1
	std::sort(IDs1,IDs1+cnt1);
	std::sort(IDs0,IDs0+cnt0);
	set_difference(IDs1,IDs1+cnt1,IDs0,IDs0+cnt0,back_inserter(IDs2));	
#else	
	set<int> s0(IDs0,IDs0+cnt0);
	set<int> s1(IDs1,IDs1+cnt1);	
	set_difference(s1.begin(),s1.end(),s0.begin(),s0.end(),back_inserter(IDs2));
#endif
	printf("cnt0=%d,cnt1=%d,cnt=%d,cnt2=cnt1-cnt0=%d\n",cnt0,cnt1,cnt,IDs2.size());
	// R16R2，其中R16为不可分解环
    for(int k=0;k<IDs2.size();k++){
		int i=IDs2[k];
		for(int j=1;j<=2;j++){
		IRing* r=newR16R2(i,j);
		   if(r){
				int ID=IdRing(r);
				printf("R16_%d×R2_%d=R32_%d\n",i,j,ID);	
#if 0				
				string strR=calcRingInvariant(r);			
				char sz2[100]={0};	
				sprintf(sz2,"//R16_%d×R2_%d",i,j);			
				string strRingInvariant="m_RingInvariant.insert(make_pair(\""+strR+"\",0));"+sz2;
				printf("%s\n",strRingInvariant.c_str());		
				string I1=calcI1(r);
				string I2=calcI2(r);			
				string strI1I2="m_I1I2.insert(make_pair(\""+I1+","+I2+"\","+"0"+"));"+sz2;
				printf("%s\n",strI1I2.c_str());		
#endif
				//delete r;
				//r=NULL;			   
		   }	
		}		   
	}
	return 0;
}