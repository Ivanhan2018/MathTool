//#include "stdafx.h"
#include "GroupUtil.h"
#include <cstdio>
#include <map>
using namespace std;

struct IdxFg
{
	int n;
	int Id;
	char Fg[140];
  	char name[60];  
};

/*
定理1：S_n(n>2)都是二元生成群，其生成元可取(1,2)及(2,3,…,n)。
定理2：S_n(n>3)的一元生成子群均不是极大子群。
*/

IdxFg g_group_fg_data[]={ \
	{4,1,"2,3,4,1","C_4"}, \
         //G4_2:=Group([(1,2),(3,4),(1,2)(3,4),(1,3)(2,4),(1,4)(2,3)]);
        {4,2,"2,1,3,4;1,2,4,3","C_2×C_2"}, \
	//{6,1,"2,3,1;1,3,2","S_3=D_3"},
	{6,1,"2,1,3;1,3,2","S_3=D_3"}, \
	{6,2,"2,1,3,4,5;1,2,4,5,3","C_6"}, \
         //G8_1:=Group((1,2,3,4,5,6,7,8)); 
	{8,1,"2,3,4,5,6,7,8,1","C_8"}, \
         //G8_2:=Group((1,2),(3,4,5,6)); 
	{8,2,"2,1,3,4,5,6;1,2,4,5,6,3","C_2×C_4"}, \
         //G8_3:=Group((1,2)(3,4),(1,3),(1,3)(2,4));
	{8,3,"2,1,4,3;3,2,1,4;3,4,1,2","D_4"}, \
         //G8_4:=Group((1,5,2,6)(3,8,4,7),(1,3,2,4)(5,7,6,8),(1,2)(3,4)(5,6)(7,8));
	{8,4,"5,6,8,7,2,1,3,4;3,4,2,1,7,8,6,5;2,1,4,3,6,5,8,7","Q_8"}, \
         //G8_5:=Group((1,2),(3,4),(5,6));
	{8,5,"2,1,3,4,5,6;1,2,4,3,5,6;1,2,3,4,6,5","C_2×C_2×C_2"}, \
	{10,1,"2,3,4,5,1;1,5,4,3,2","D_5"}, \
	{10,2,"2,1,3,4,5,6,7;1,2,4,5,6,7,3","C_10"}, \
         //G12_1:=Group((1,2,3,4,5,6)(7,8,9,10,11,12),(1,7,4,10)(2,12,5,9)(3,11,6,8));
	{12,1,"2,3,4,5,6,1,8,9,10,11,12,7;7,12,11,10,9,8,4,3,2,1,6,5","Q_12"}, \
         //G12_2:=Group((1,2,3,4,5,6,7,8,9,10,11,12));
	{12,2,"2,3,4,5,6,7,8,9,10,11,12,1","C_12"}, \
         //G12_3:=Group((),(1,2,3),(1,3,2),(1,2,4),(1,4,2),(1,3,4),(1,4,3),(2,3,4),(2,4,3),(1,2)(3,4),(1,3)(2,4),(1,4)(2,3))={(1), (123), (132), (124), (142), (134), (143), (234), (243), (12)(34), (13)(24), (14)(23)}
	{12,3,"2,1,4,3;3,4,1,2;2,3,1,4","A_4"}, \
         //G12_4:=Group((1,3,5)(4,6),(1,5));
	{12,4,"3,2,5,6,1,4;5,2,3,4,1,6","D_6"}, \
	{12,5,"2,1,3,4,5,6,7;1,2,4,3,5,6,7;1,2,3,4,6,7,5","C_2×C_2×C_3"}, \
	{20,1,"2,3,4,5,1,7,8,9,10,6,15,11,12,13,14,20,16,17,18,19;20,16,17,18,19,15,11,12,13,14,2,3,4,5,1,7,8,9,10,6","Q_20"}, \
	{20,2,"2,3,4,1,5,6,7,8,9;1,2,3,4,6,7,8,9,5","C_20"}, \
         //G20_3:=Group((2,3)(4,5),(1,2,3,4));
	{20,3,"1,3,2,5,4;2,3,4,1,5","F_20"}, \
	{20,4,"2,3,4,5,6,7,8,9,10,1;10,9,8,7,6,5,4,3,2,1","D_10"}, \
	{20,5,"2,1,3,4,5,6,7,8,9;1,2,4,3,5,6,7,8,9;1,2,3,4,6,7,8,9,5","C_2×C_2×C_5"}, \
         //G24_12:=Group((1,2)(3,4),(1,3),(1,3)(2,4),(1,2,3,4),(3,4));
	//{24,12,"2,1,4,3;3,2,1,4;3,4,1,2;2,3,4,1;1,2,4,3","S_4"},
	{24,12,"2,1,3,4;1,3,4,2","S_4"}, \
};

int g_group_fg_data_count=sizeof(g_group_fg_data)/sizeof(IdxFg);

map<pair<int,int>,IdxFg> g_Mfg;

void init()
{
	for(int i=0;i<g_group_fg_data_count;i++)
	{
	    pair<int,int> key=make_pair(g_group_fg_data[i].n,g_group_fg_data[i].Id);
            g_Mfg[key]=g_group_fg_data[i];
	}
}

IdxFg SmallGroupFg(int n,int Id)
{
	pair<int,int> key=make_pair(n,Id);
	map<pair<int,int>,IdxFg>::const_iterator ptr=g_Mfg.find(key);
	if(ptr!=g_Mfg.end())
	{
	    return ptr->second;
	}

	IdxFg ret;
	ret.n=n;
	ret.Id=Id;
	ret.Fg[0]='\0';
	ret.name[0]='\0';
	return ret;
}

int main(int argc, char* argv[])
{
	char szn[100]={0};
	char szId[100]={0};
	if(argc<2)
	{
		printf("请输入n：");
		scanf("%s",szn);
	}
	else
		strcpy(szn,argv[1]);

	if(argc<3)
	{
		printf("请输入Id：");
		scanf("%s",szId);
	}
	else
		strcpy(szId,argv[2]);

	int n=atoi(szn);
	int Id=atoi(szId);

	init();
	IdxFg idxfg=SmallGroupFg(n,Id);
	if(idxfg.Fg[0]=='\0')
	{
		printf("Error\n");	   
		return -1;
	}
	char szfn[100]={0};
	sprintf(szfn,"G%d_%d.txt",n,Id);
	bool bRet=GroupUtil::FG(idxfg.Fg,szfn);

	//system("pause");
	return 0;
}


